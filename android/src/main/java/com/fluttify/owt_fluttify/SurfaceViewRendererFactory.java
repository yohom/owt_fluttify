//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package com.fluttify.owt_fluttify;

import android.content.Context;
import android.view.View;
import android.util.Log;
import android.app.Activity;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.common.StandardMessageCodec;
import io.flutter.plugin.platform.PlatformView;
import io.flutter.plugin.platform.PlatformViewFactory;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;

@SuppressWarnings("ALL")
class SurfaceViewRendererFactory extends PlatformViewFactory {

    SurfaceViewRendererFactory(BinaryMessenger messenger, Activity activity) {
        super(StandardMessageCodec.INSTANCE);

        this.messenger = messenger;
        this.activity = activity;

        new MethodChannel(messenger, "com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer").setMethodCallHandler((methodCall, methodResult) -> {
            Map<String, Object> args = (Map<String, Object>) methodCall.arguments;
            OwtFluttifyPlugin.Handler handler = handlerMap.get(methodCall.method);
            if (handler != null) {
                try {
                    handler.call(args, methodResult);
                } catch (Exception e) {
                    e.printStackTrace();
                    methodResult.error(e.getMessage(), null, null);
                }
            } else {
                methodResult.notImplemented();
            }
        });
    }

    private BinaryMessenger messenger;
    private Activity activity;

    private final Map<String, OwtFluttifyPlugin.Handler> handlerMap = new HashMap<String, OwtFluttifyPlugin.Handler>() {{
        // method
        put("org.webrtc.SurfaceViewRenderer::init__org_webrtc_EglBase_Context__org_webrtc_RendererCommon_RendererEvents", (__args__, __methodResult__) -> {
            // args
            // ref arg
            Integer __sharedContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("sharedContext");
            org.webrtc.EglBase.Context sharedContext = __sharedContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__sharedContextRefId__) : null;
            // ref arg
            Integer __rendererEventsRefId__ = (Integer) ((Map<String, Object>) __args__).get("rendererEvents");
            org.webrtc.RendererCommon.RendererEvents rendererEvents = __rendererEventsRefId__ != null ? (org.webrtc.RendererCommon.RendererEvents) getHEAP().get(__rendererEventsRefId__) : null;
        
            // ref
            int refId = (int) ((Map<String, Object>) __args__).get("refId");
            org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
        
            // print log
            if (getEnableLog()) {
                Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::init(" + sharedContext + rendererEvents + ")");
            }
        
            // invoke native method
            try {
                ref.init(sharedContext, rendererEvents);
            } catch (Throwable throwable) {
                throwable.printStackTrace();
                if (getEnableLog()) {
                    Log.d("Current HEAP: ", getHEAP().toString());
                }
                __methodResult__.error(throwable.getMessage(), null, null);
                return;
            }
        
            // convert result to jsonable result
            String jsonableResult = "success";
        
            __methodResult__.success(jsonableResult);
        });
        // method
        put("org.webrtc.SurfaceViewRenderer::init__org_webrtc_EglBase_Context__org_webrtc_RendererCommon_RendererEvents__Int32List__org_webrtc_RendererCommon_GlDrawer", (__args__, __methodResult__) -> {
            // args
            // ref arg
            Integer __sharedContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("sharedContext");
            org.webrtc.EglBase.Context sharedContext = __sharedContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__sharedContextRefId__) : null;
            // ref arg
            Integer __rendererEventsRefId__ = (Integer) ((Map<String, Object>) __args__).get("rendererEvents");
            org.webrtc.RendererCommon.RendererEvents rendererEvents = __rendererEventsRefId__ != null ? (org.webrtc.RendererCommon.RendererEvents) getHEAP().get(__rendererEventsRefId__) : null;
            // jsonable arg
            int[] configAttributes = (int[]) ((Map<String, Object>) __args__).get("configAttributes");
            // ref arg
            Integer __drawerRefId__ = (Integer) ((Map<String, Object>) __args__).get("drawer");
            org.webrtc.RendererCommon.GlDrawer drawer = __drawerRefId__ != null ? (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(__drawerRefId__) : null;
        
            // ref
            int refId = (int) ((Map<String, Object>) __args__).get("refId");
            org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
        
            // print log
            if (getEnableLog()) {
                Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::init(" + sharedContext + rendererEvents + configAttributes + drawer + ")");
            }
        
            // invoke native method
            try {
                ref.init(sharedContext, rendererEvents, configAttributes, drawer);
            } catch (Throwable throwable) {
                throwable.printStackTrace();
                if (getEnableLog()) {
                    Log.d("Current HEAP: ", getHEAP().toString());
                }
                __methodResult__.error(throwable.getMessage(), null, null);
                return;
            }
        
            // convert result to jsonable result
            String jsonableResult = "success";
        
            __methodResult__.success(jsonableResult);
        });
        // method
        put("org.webrtc.SurfaceViewRenderer::release", (__args__, __methodResult__) -> {
            // args
        
        
            // ref
            int refId = (int) ((Map<String, Object>) __args__).get("refId");
            org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
        
            // print log
            if (getEnableLog()) {
                Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::release(" + "" + ")");
            }
        
            // invoke native method
            try {
                ref.release();
            } catch (Throwable throwable) {
                throwable.printStackTrace();
                if (getEnableLog()) {
                    Log.d("Current HEAP: ", getHEAP().toString());
                }
                __methodResult__.error(throwable.getMessage(), null, null);
                return;
            }
        
            // convert result to jsonable result
            String jsonableResult = "success";
        
            __methodResult__.success(jsonableResult);
        });
        // method
        put("org.webrtc.SurfaceViewRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer", (__args__, __methodResult__) -> {
            // args
            // jsonable arg
            Double scale = (Double) ((Map<String, Object>) __args__).get("scale");
            // ref arg
            Integer __drawerParamRefId__ = (Integer) ((Map<String, Object>) __args__).get("drawerParam");
            org.webrtc.RendererCommon.GlDrawer drawerParam = __drawerParamRefId__ != null ? (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(__drawerParamRefId__) : null;
        
            // ref
            int refId = (int) ((Map<String, Object>) __args__).get("refId");
            org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
        
            // print log
            if (getEnableLog()) {
                Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::addFrameListener(" + scale + drawerParam + ")");
            }
        
            // invoke native method
            try {
                ref.addFrameListener(new org.webrtc.EglRenderer.FrameListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.SurfaceViewRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer::Callback");
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
        
                    // call dart method
                    @Override
                    public void onFrame(android.graphics.Bitmap var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onFrame(" + var1 + ")");
                        }
        
                        // convert to jsonable data
                        // ref arg
                        final Integer argvar1;
                        if (var1 != null) {
                            argvar1 = System.identityHashCode(var1);
                            getHEAP().put(argvar1, var1);
                        } else {
                            argvar1 = null;
                        }
        
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::org.webrtc.EglRenderer.FrameListener::onFrame",
                                    new HashMap<String, Object>() {{
                                        put("var1", argvar1);
                                    }}
                                );
                            }
                        });
        
                        // method result
        
                    }
        
            }, new Double(scale).floatValue(), drawerParam);
            } catch (Throwable throwable) {
                throwable.printStackTrace();
                if (getEnableLog()) {
                    Log.d("Current HEAP: ", getHEAP().toString());
                }
                __methodResult__.error(throwable.getMessage(), null, null);
                return;
            }
        
            // convert result to jsonable result
            String jsonableResult = "success";
        
            __methodResult__.success(jsonableResult);
        });
        // method
        put("org.webrtc.SurfaceViewRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double", (__args__, __methodResult__) -> {
            // args
            // jsonable arg
            Double scale = (Double) ((Map<String, Object>) __args__).get("scale");
        
            // ref
            int refId = (int) ((Map<String, Object>) __args__).get("refId");
            org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
        
            // print log
            if (getEnableLog()) {
                Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::addFrameListener(" + scale + ")");
            }
        
            // invoke native method
            try {
                ref.addFrameListener(new org.webrtc.EglRenderer.FrameListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.SurfaceViewRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double::Callback");
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
        
                    // call dart method
                    @Override
                    public void onFrame(android.graphics.Bitmap var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onFrame(" + var1 + ")");
                        }
        
                        // convert to jsonable data
                        // ref arg
                        final Integer argvar1;
                        if (var1 != null) {
                            argvar1 = System.identityHashCode(var1);
                            getHEAP().put(argvar1, var1);
                        } else {
                            argvar1 = null;
                        }
        
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::org.webrtc.EglRenderer.FrameListener::onFrame",
                                    new HashMap<String, Object>() {{
                                        put("var1", argvar1);
                                    }}
                                );
                            }
                        });
        
                        // method result
        
                    }
        
            }, new Double(scale).floatValue());
            } catch (Throwable throwable) {
                throwable.printStackTrace();
                if (getEnableLog()) {
                    Log.d("Current HEAP: ", getHEAP().toString());
                }
                __methodResult__.error(throwable.getMessage(), null, null);
                return;
            }
        
            // convert result to jsonable result
            String jsonableResult = "success";
        
            __methodResult__.success(jsonableResult);
        });
        // method
        put("org.webrtc.SurfaceViewRenderer::removeFrameListener", (__args__, __methodResult__) -> {
            // args
        
        
            // ref
            int refId = (int) ((Map<String, Object>) __args__).get("refId");
            org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
        
            // print log
            if (getEnableLog()) {
                Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::removeFrameListener(" + "" + ")");
            }
        
            // invoke native method
            try {
                ref.removeFrameListener(new org.webrtc.EglRenderer.FrameListener() {
                    // method channel
                    MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.SurfaceViewRenderer::removeFrameListener::Callback");
                    android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
        
                    // call dart method
                    @Override
                    public void onFrame(android.graphics.Bitmap var1) {
                        // print log
                        if (getEnableLog()) {
                            Log.d("java-callback", "fluttify-java-callback: onFrame(" + var1 + ")");
                        }
        
                        // convert to jsonable data
                        // ref arg
                        final Integer argvar1;
                        if (var1 != null) {
                            argvar1 = System.identityHashCode(var1);
                            getHEAP().put(argvar1, var1);
                        } else {
                            argvar1 = null;
                        }
        
                        // call dart method
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                callbackChannel.invokeMethod(
                                    "Callback::org.webrtc.EglRenderer.FrameListener::onFrame",
                                    new HashMap<String, Object>() {{
                                        put("var1", argvar1);
                                    }}
                                );
                            }
                        });
        
                        // method result
        
                    }
        
            });
            } catch (Throwable throwable) {
                throwable.printStackTrace();
                if (getEnableLog()) {
                    Log.d("Current HEAP: ", getHEAP().toString());
                }
                __methodResult__.error(throwable.getMessage(), null, null);
                return;
            }
        
            // convert result to jsonable result
            String jsonableResult = "success";
        
            __methodResult__.success(jsonableResult);
        });
        // method
        put("org.webrtc.SurfaceViewRenderer::setEnableHardwareScaler", (__args__, __methodResult__) -> {
            // args
            // jsonable arg
            boolean enabled = (boolean) ((Map<String, Object>) __args__).get("enabled");
        
            // ref
            int refId = (int) ((Map<String, Object>) __args__).get("refId");
            org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
        
            // print log
            if (getEnableLog()) {
                Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::setEnableHardwareScaler(" + enabled + ")");
            }
        
            // invoke native method
            try {
                ref.setEnableHardwareScaler(enabled);
            } catch (Throwable throwable) {
                throwable.printStackTrace();
                if (getEnableLog()) {
                    Log.d("Current HEAP: ", getHEAP().toString());
                }
                __methodResult__.error(throwable.getMessage(), null, null);
                return;
            }
        
            // convert result to jsonable result
            String jsonableResult = "success";
        
            __methodResult__.success(jsonableResult);
        });
        // method
        put("org.webrtc.SurfaceViewRenderer::setMirror", (__args__, __methodResult__) -> {
            // args
            // jsonable arg
            boolean mirror = (boolean) ((Map<String, Object>) __args__).get("mirror");
        
            // ref
            int refId = (int) ((Map<String, Object>) __args__).get("refId");
            org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
        
            // print log
            if (getEnableLog()) {
                Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::setMirror(" + mirror + ")");
            }
        
            // invoke native method
            try {
                ref.setMirror(mirror);
            } catch (Throwable throwable) {
                throwable.printStackTrace();
                if (getEnableLog()) {
                    Log.d("Current HEAP: ", getHEAP().toString());
                }
                __methodResult__.error(throwable.getMessage(), null, null);
                return;
            }
        
            // convert result to jsonable result
            String jsonableResult = "success";
        
            __methodResult__.success(jsonableResult);
        });
        // method
        put("org.webrtc.SurfaceViewRenderer::setScalingType__org_webrtc_RendererCommon_ScalingType", (__args__, __methodResult__) -> {
            // args
            // enum arg
            org.webrtc.RendererCommon.ScalingType scalingType = org.webrtc.RendererCommon.ScalingType.values()[(int) ((Map<String, Object>) __args__).get("scalingType")];
        
            // ref
            int refId = (int) ((Map<String, Object>) __args__).get("refId");
            org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
        
            // print log
            if (getEnableLog()) {
                Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::setScalingType(" + scalingType + ")");
            }
        
            // invoke native method
            try {
                ref.setScalingType(scalingType);
            } catch (Throwable throwable) {
                throwable.printStackTrace();
                if (getEnableLog()) {
                    Log.d("Current HEAP: ", getHEAP().toString());
                }
                __methodResult__.error(throwable.getMessage(), null, null);
                return;
            }
        
            // convert result to jsonable result
            String jsonableResult = "success";
        
            __methodResult__.success(jsonableResult);
        });
        // method
        put("org.webrtc.SurfaceViewRenderer::setScalingType__org_webrtc_RendererCommon_ScalingType__org_webrtc_RendererCommon_ScalingType", (__args__, __methodResult__) -> {
            // args
            // enum arg
            org.webrtc.RendererCommon.ScalingType scalingTypeMatchOrientation = org.webrtc.RendererCommon.ScalingType.values()[(int) ((Map<String, Object>) __args__).get("scalingTypeMatchOrientation")];
            // enum arg
            org.webrtc.RendererCommon.ScalingType scalingTypeMismatchOrientation = org.webrtc.RendererCommon.ScalingType.values()[(int) ((Map<String, Object>) __args__).get("scalingTypeMismatchOrientation")];
        
            // ref
            int refId = (int) ((Map<String, Object>) __args__).get("refId");
            org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
        
            // print log
            if (getEnableLog()) {
                Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::setScalingType(" + scalingTypeMatchOrientation + scalingTypeMismatchOrientation + ")");
            }
        
            // invoke native method
            try {
                ref.setScalingType(scalingTypeMatchOrientation, scalingTypeMismatchOrientation);
            } catch (Throwable throwable) {
                throwable.printStackTrace();
                if (getEnableLog()) {
                    Log.d("Current HEAP: ", getHEAP().toString());
                }
                __methodResult__.error(throwable.getMessage(), null, null);
                return;
            }
        
            // convert result to jsonable result
            String jsonableResult = "success";
        
            __methodResult__.success(jsonableResult);
        });
        // method
        put("org.webrtc.SurfaceViewRenderer::setFpsReduction", (__args__, __methodResult__) -> {
            // args
            // jsonable arg
            Double fps = (Double) ((Map<String, Object>) __args__).get("fps");
        
            // ref
            int refId = (int) ((Map<String, Object>) __args__).get("refId");
            org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
        
            // print log
            if (getEnableLog()) {
                Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::setFpsReduction(" + fps + ")");
            }
        
            // invoke native method
            try {
                ref.setFpsReduction(new Double(fps).floatValue());
            } catch (Throwable throwable) {
                throwable.printStackTrace();
                if (getEnableLog()) {
                    Log.d("Current HEAP: ", getHEAP().toString());
                }
                __methodResult__.error(throwable.getMessage(), null, null);
                return;
            }
        
            // convert result to jsonable result
            String jsonableResult = "success";
        
            __methodResult__.success(jsonableResult);
        });
        // method
        put("org.webrtc.SurfaceViewRenderer::disableFpsReduction", (__args__, __methodResult__) -> {
            // args
        
        
            // ref
            int refId = (int) ((Map<String, Object>) __args__).get("refId");
            org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
        
            // print log
            if (getEnableLog()) {
                Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::disableFpsReduction(" + "" + ")");
            }
        
            // invoke native method
            try {
                ref.disableFpsReduction();
            } catch (Throwable throwable) {
                throwable.printStackTrace();
                if (getEnableLog()) {
                    Log.d("Current HEAP: ", getHEAP().toString());
                }
                __methodResult__.error(throwable.getMessage(), null, null);
                return;
            }
        
            // convert result to jsonable result
            String jsonableResult = "success";
        
            __methodResult__.success(jsonableResult);
        });
        // method
        put("org.webrtc.SurfaceViewRenderer::pauseVideo", (__args__, __methodResult__) -> {
            // args
        
        
            // ref
            int refId = (int) ((Map<String, Object>) __args__).get("refId");
            org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
        
            // print log
            if (getEnableLog()) {
                Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::pauseVideo(" + "" + ")");
            }
        
            // invoke native method
            try {
                ref.pauseVideo();
            } catch (Throwable throwable) {
                throwable.printStackTrace();
                if (getEnableLog()) {
                    Log.d("Current HEAP: ", getHEAP().toString());
                }
                __methodResult__.error(throwable.getMessage(), null, null);
                return;
            }
        
            // convert result to jsonable result
            String jsonableResult = "success";
        
            __methodResult__.success(jsonableResult);
        });
        // method
        put("org.webrtc.SurfaceViewRenderer::clearImage", (__args__, __methodResult__) -> {
            // args
        
        
            // ref
            int refId = (int) ((Map<String, Object>) __args__).get("refId");
            org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
        
            // print log
            if (getEnableLog()) {
                Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::clearImage(" + "" + ")");
            }
        
            // invoke native method
            try {
                ref.clearImage();
            } catch (Throwable throwable) {
                throwable.printStackTrace();
                if (getEnableLog()) {
                    Log.d("Current HEAP: ", getHEAP().toString());
                }
                __methodResult__.error(throwable.getMessage(), null, null);
                return;
            }
        
            // convert result to jsonable result
            String jsonableResult = "success";
        
            __methodResult__.success(jsonableResult);
        });
    }};

    @Override
    public PlatformView create(Context __, int id, Object params) {
        Map<String, Object> __args__ = (Map<String, Object>) params;

        ////////////////////////////////初始化AndroidView////////////////////////////////////////

        ////////////////////////////////初始化AndroidView////////////////////////////////////////

        org.webrtc.SurfaceViewRenderer view = new org.webrtc.SurfaceViewRenderer(activity);

        getHEAP().put(Integer.MAX_VALUE - id, view);
        return new PlatformView() {

            // add to HEAP
            @Override
            public View getView() {
                return view;
            }

            @Override
            public void dispose() {}
        };
    }
}
