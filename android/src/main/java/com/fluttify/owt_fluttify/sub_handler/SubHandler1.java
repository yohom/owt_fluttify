//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package com.fluttify.owt_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import com.fluttify.owt_fluttify.OwtFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler1 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // getter
            put("org.webrtc.PeerConnectionFactory.Options::get_enableAes128Sha1_32CryptoCipher_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.enableAes128Sha1_32CryptoCipher;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnectionFactory.Options::get_enableGcmCryptoSuites_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.enableGcmCryptoSuites;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.RtpParameters::get_transactionId_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.RtpParameters ref = (org.webrtc.RtpParameters) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.transactionId;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoCodecInfo::get_name_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoCodecInfo ref = (org.webrtc.VideoCodecInfo) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.name;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoCodecInfo::get_params_batch", (__argsBatch__, __methodResult__) -> {
                List<java.util.Map<String,String>> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoCodecInfo ref = (org.webrtc.VideoCodecInfo) getHEAP().get((int) __args__.get("refId"));
            
                    java.util.Map<String,String> __result__ = ref.params;
            
                    java.util.Map<String,String> jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoCodecInfo::get_payload_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoCodecInfo ref = (org.webrtc.VideoCodecInfo) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.payload;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.Metrics.HistogramInfo::get_min_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.Metrics.HistogramInfo ref = (org.webrtc.Metrics.HistogramInfo) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.min;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.Metrics.HistogramInfo::get_max_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.Metrics.HistogramInfo ref = (org.webrtc.Metrics.HistogramInfo) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.max;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.Metrics.HistogramInfo::get_bucketCount_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.Metrics.HistogramInfo ref = (org.webrtc.Metrics.HistogramInfo) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.bucketCount;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.DataChannel.Init::get_ordered_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.ordered;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.DataChannel.Init::get_maxRetransmitTimeMs_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.maxRetransmitTimeMs;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.DataChannel.Init::get_maxRetransmits_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.maxRetransmits;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.DataChannel.Init::get_protocol_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.protocol;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.DataChannel.Init::get_negotiated_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.negotiated;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.DataChannel.Init::get_id_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.id;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.IceServer::get_uri_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.IceServer ref = (org.webrtc.PeerConnection.IceServer) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.uri;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.IceServer::get_urls_batch", (__argsBatch__, __methodResult__) -> {
                List<java.util.List<String>> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.IceServer ref = (org.webrtc.PeerConnection.IceServer) getHEAP().get((int) __args__.get("refId"));
            
                    java.util.List<String> __result__ = ref.urls;
            
                    java.util.List<String> jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.IceServer::get_username_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.IceServer ref = (org.webrtc.PeerConnection.IceServer) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.username;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.IceServer::get_password_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.IceServer ref = (org.webrtc.PeerConnection.IceServer) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.password;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.IceServer::get_tlsCertPolicy_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.IceServer ref = (org.webrtc.PeerConnection.IceServer) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.PeerConnection.TlsCertPolicy __result__ = ref.tlsCertPolicy;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.IceServer::get_hostname_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.IceServer ref = (org.webrtc.PeerConnection.IceServer) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.hostname;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.IceServer::get_tlsAlpnProtocols_batch", (__argsBatch__, __methodResult__) -> {
                List<java.util.List<String>> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.IceServer ref = (org.webrtc.PeerConnection.IceServer) getHEAP().get((int) __args__.get("refId"));
            
                    java.util.List<String> __result__ = ref.tlsAlpnProtocols;
            
                    java.util.List<String> jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.IceServer::get_tlsEllipticCurves_batch", (__argsBatch__, __methodResult__) -> {
                List<java.util.List<String>> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.IceServer ref = (org.webrtc.PeerConnection.IceServer) getHEAP().get((int) __args__.get("refId"));
            
                    java.util.List<String> __result__ = ref.tlsEllipticCurves;
            
                    java.util.List<String> jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoDecoder.DecodeInfo::get_isMissingFrames_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoDecoder.DecodeInfo ref = (org.webrtc.VideoDecoder.DecodeInfo) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.isMissingFrames;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoDecoder.DecodeInfo::get_renderTimeMs_batch", (__argsBatch__, __methodResult__) -> {
                List<Long> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoDecoder.DecodeInfo ref = (org.webrtc.VideoDecoder.DecodeInfo) getHEAP().get((int) __args__.get("refId"));
            
                    long __result__ = ref.renderTimeMs;
            
                    long jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.EncodedImage::get_encodedWidth_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.EncodedImage ref = (org.webrtc.EncodedImage) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.encodedWidth;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.EncodedImage::get_encodedHeight_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.EncodedImage ref = (org.webrtc.EncodedImage) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.encodedHeight;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.EncodedImage::get_captureTimeMs_batch", (__argsBatch__, __methodResult__) -> {
                List<Long> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.EncodedImage ref = (org.webrtc.EncodedImage) getHEAP().get((int) __args__.get("refId"));
            
                    long __result__ = ref.captureTimeMs;
            
                    long jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.EncodedImage::get_captureTimeNs_batch", (__argsBatch__, __methodResult__) -> {
                List<Long> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.EncodedImage ref = (org.webrtc.EncodedImage) getHEAP().get((int) __args__.get("refId"));
            
                    long __result__ = ref.captureTimeNs;
            
                    long jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.EncodedImage::get_frameType_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.EncodedImage ref = (org.webrtc.EncodedImage) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.EncodedImage.FrameType __result__ = ref.frameType;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.EncodedImage::get_rotation_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.EncodedImage ref = (org.webrtc.EncodedImage) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.rotation;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.EncodedImage::get_completeFrame_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.EncodedImage ref = (org.webrtc.EncodedImage) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.completeFrame;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.EncodedImage::get_qp_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.EncodedImage ref = (org.webrtc.EncodedImage) getHEAP().get((int) __args__.get("refId"));
            
                    Integer __result__ = ref.qp;
            
                    Integer jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange::get_min_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.min;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange::get_max_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.max;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.NetworkMonitorAutoDetect.IPAddress::get_address_batch", (__argsBatch__, __methodResult__) -> {
                List<byte[]> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.NetworkMonitorAutoDetect.IPAddress ref = (org.webrtc.NetworkMonitorAutoDetect.IPAddress) getHEAP().get((int) __args__.get("refId"));
            
                    byte[] __result__ = ref.address;
            
                    byte[] jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.IceCandidate::get_sdpMid_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.IceCandidate ref = (org.webrtc.IceCandidate) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.sdpMid;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.IceCandidate::get_sdpMLineIndex_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.IceCandidate ref = (org.webrtc.IceCandidate) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.sdpMLineIndex;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.IceCandidate::get_sdp_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.IceCandidate ref = (org.webrtc.IceCandidate) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.sdp;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.IceCandidate::get_serverUrl_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.IceCandidate ref = (org.webrtc.IceCandidate) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.serverUrl;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceTransportsType_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.PeerConnection.IceTransportsType __result__ = ref.iceTransportsType;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceServers_batch", (__argsBatch__, __methodResult__) -> {
                List<List<Integer>> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    java.util.List<org.webrtc.PeerConnection.IceServer> __result__ = ref.iceServers;
            
                    List<Integer> jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = new ArrayList<>();
                for (org.webrtc.PeerConnection.IceServer item : __result__) {
                    getHEAP().put(System.identityHashCode(item), item);
                    jsonableResult.add(System.identityHashCode(item));
                }
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_bundlePolicy_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.PeerConnection.BundlePolicy __result__ = ref.bundlePolicy;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_rtcpMuxPolicy_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.PeerConnection.RtcpMuxPolicy __result__ = ref.rtcpMuxPolicy;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_tcpCandidatePolicy_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.PeerConnection.TcpCandidatePolicy __result__ = ref.tcpCandidatePolicy;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_candidateNetworkPolicy_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.PeerConnection.CandidateNetworkPolicy __result__ = ref.candidateNetworkPolicy;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_audioJitterBufferMaxPackets_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.audioJitterBufferMaxPackets;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_audioJitterBufferFastAccelerate_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.audioJitterBufferFastAccelerate;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceConnectionReceivingTimeout_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.iceConnectionReceivingTimeout;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceBackupCandidatePairPingInterval_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.iceBackupCandidatePairPingInterval;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_keyType_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.PeerConnection.KeyType __result__ = ref.keyType;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_continualGatheringPolicy_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.PeerConnection.ContinualGatheringPolicy __result__ = ref.continualGatheringPolicy;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceCandidatePoolSize_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.iceCandidatePoolSize;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_pruneTurnPorts_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.pruneTurnPorts;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_presumeWritableWhenFullyRelayed_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.presumeWritableWhenFullyRelayed;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceCheckIntervalStrongConnectivityMs_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    Integer __result__ = ref.iceCheckIntervalStrongConnectivityMs;
            
                    Integer jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceCheckIntervalWeakConnectivityMs_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    Integer __result__ = ref.iceCheckIntervalWeakConnectivityMs;
            
                    Integer jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceCheckMinInterval_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    Integer __result__ = ref.iceCheckMinInterval;
            
                    Integer jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceUnwritableTimeMs_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    Integer __result__ = ref.iceUnwritableTimeMs;
            
                    Integer jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceUnwritableMinChecks_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    Integer __result__ = ref.iceUnwritableMinChecks;
            
                    Integer jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_stunCandidateKeepaliveIntervalMs_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    Integer __result__ = ref.stunCandidateKeepaliveIntervalMs;
            
                    Integer jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_disableIPv6OnWifi_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.disableIPv6OnWifi;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_maxIPv6Networks_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.maxIPv6Networks;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceRegatherIntervalRange_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.PeerConnection.IntervalRange __result__ = ref.iceRegatherIntervalRange;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_disableIpv6_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.disableIpv6;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_enableDscp_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.enableDscp;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_enableCpuOveruseDetection_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.enableCpuOveruseDetection;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_enableRtpDataChannel_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.enableRtpDataChannel;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_suspendBelowMinBitrate_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.suspendBelowMinBitrate;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_screencastMinBitrate_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    Integer __result__ = ref.screencastMinBitrate;
            
                    Integer jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_combinedAudioVideoBwe_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    Boolean __result__ = ref.combinedAudioVideoBwe;
            
                    Boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_enableDtlsSrtp_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    Boolean __result__ = ref.enableDtlsSrtp;
            
                    Boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_networkPreference_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.PeerConnection.AdapterType __result__ = ref.networkPreference;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_sdpSemantics_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.PeerConnection.SdpSemantics __result__ = ref.sdpSemantics;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_turnCustomizer_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.TurnCustomizer __result__ = ref.turnCustomizer;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_activeResetSrtpParams_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.activeResetSrtpParams;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.DataChannel.Buffer::get_binary_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.DataChannel.Buffer ref = (org.webrtc.DataChannel.Buffer) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.binary;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.MediaConstraints::get_mandatory_batch", (__argsBatch__, __methodResult__) -> {
                List<List<Integer>> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.MediaConstraints ref = (org.webrtc.MediaConstraints) getHEAP().get((int) __args__.get("refId"));
            
                    java.util.List<org.webrtc.MediaConstraints.KeyValuePair> __result__ = ref.mandatory;
            
                    List<Integer> jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = new ArrayList<>();
                for (org.webrtc.MediaConstraints.KeyValuePair item : __result__) {
                    getHEAP().put(System.identityHashCode(item), item);
                    jsonableResult.add(System.identityHashCode(item));
                }
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.MediaConstraints::get_optional_batch", (__argsBatch__, __methodResult__) -> {
                List<List<Integer>> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.MediaConstraints ref = (org.webrtc.MediaConstraints) getHEAP().get((int) __args__.get("refId"));
            
                    java.util.List<org.webrtc.MediaConstraints.KeyValuePair> __result__ = ref.optional;
            
                    List<Integer> jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = new ArrayList<>();
                for (org.webrtc.MediaConstraints.KeyValuePair item : __result__) {
                    getHEAP().put(System.identityHashCode(item), item);
                    jsonableResult.add(System.identityHashCode(item));
                }
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.StatsReport.Value::get_name_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.StatsReport.Value ref = (org.webrtc.StatsReport.Value) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.name;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.StatsReport.Value::get_value_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.StatsReport.Value ref = (org.webrtc.StatsReport.Value) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.value;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.conference.Participant::get_id_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.conference.Participant ref = (owt.conference.Participant) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.id;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.conference.Participant::get_role_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.conference.Participant ref = (owt.conference.Participant) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.role;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.conference.Participant::get_userId_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.conference.Participant ref = (owt.conference.Participant) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.userId;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.conference.Subscription.VideoUpdateOptions::get_resolutionHeight_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.resolutionHeight;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.conference.Subscription.VideoUpdateOptions::get_resolutionWidth_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.resolutionWidth;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.conference.Subscription.VideoUpdateOptions::get_fps_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.fps;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.conference.Subscription.VideoUpdateOptions::get_keyframeInterval_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.keyframeInterval;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.conference.Subscription.VideoUpdateOptions::get_bitrateMultiplier_batch", (__argsBatch__, __methodResult__) -> {
                List<Double> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get((int) __args__.get("refId"));
            
                    double __result__ = ref.bitrateMultiplier;
            
                    double jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.conference.RemoteStream::get_extraSubscriptionCapability_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.conference.RemoteStream ref = (owt.conference.RemoteStream) getHEAP().get((int) __args__.get("refId"));
            
                    owt.conference.SubscriptionCapabilities __result__ = ref.extraSubscriptionCapability;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.conference.RemoteStream::get_publicationSettings_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.conference.RemoteStream ref = (owt.conference.RemoteStream) getHEAP().get((int) __args__.get("refId"));
            
                    owt.conference.PublicationSettings __result__ = ref.publicationSettings;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.conference.Subscription::get_id_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.conference.Subscription ref = (owt.conference.Subscription) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.id;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.conference.BuildConfig::get_DEBUG_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.conference.BuildConfig ref = (owt.conference.BuildConfig) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.DEBUG;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.conference.RemoteMixedStream::get_view_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.conference.RemoteMixedStream ref = (owt.conference.RemoteMixedStream) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.view;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.p2p.BuildConfig::get_DEBUG_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.p2p.BuildConfig ref = (owt.p2p.BuildConfig) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.DEBUG;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.p2p.OwtP2PError::get_value_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.p2p.OwtP2PError ref = (owt.p2p.OwtP2PError) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.value;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.MediaConstraints.AudioTrackConstraints::get_echoCancellation_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.MediaConstraints.AudioTrackConstraints ref = (owt.base.MediaConstraints.AudioTrackConstraints) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.echoCancellation;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.MediaConstraints.AudioTrackConstraints::get_extendedFilterEchoCancellation_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.MediaConstraints.AudioTrackConstraints ref = (owt.base.MediaConstraints.AudioTrackConstraints) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.extendedFilterEchoCancellation;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.MediaConstraints.AudioTrackConstraints::get_delayAgnosticEchoCancellation_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.MediaConstraints.AudioTrackConstraints ref = (owt.base.MediaConstraints.AudioTrackConstraints) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.delayAgnosticEchoCancellation;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.Stream.StreamSourceInfo.AudioSourceInfo::get_type_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.Stream.StreamSourceInfo.AudioSourceInfo ref = (owt.base.Stream.StreamSourceInfo.AudioSourceInfo) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.type;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.ClientConfiguration::get_rtcConfiguration_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.ClientConfiguration ref = (owt.base.ClientConfiguration) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.PeerConnection.RTCConfiguration __result__ = ref.rtcConfiguration;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.AudioCodecParameters::get_name_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.AudioCodecParameters ref = (owt.base.AudioCodecParameters) getHEAP().get((int) __args__.get("refId"));
            
                    owt.base.MediaCodecs.AudioCodec __result__ = ref.name;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.AudioCodecParameters::get_channelNum_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.AudioCodecParameters ref = (owt.base.AudioCodecParameters) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.channelNum;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.AudioCodecParameters::get_sampleRate_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.AudioCodecParameters ref = (owt.base.AudioCodecParameters) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.sampleRate;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.PeerConnectionChannel::get_key_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.PeerConnectionChannel ref = (owt.base.PeerConnectionChannel) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.key;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.AudioEncodingParameters::get_maxBitrate_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.AudioEncodingParameters ref = (owt.base.AudioEncodingParameters) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.maxBitrate;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.AudioEncodingParameters::get_codec_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.AudioEncodingParameters ref = (owt.base.AudioEncodingParameters) getHEAP().get((int) __args__.get("refId"));
            
                    owt.base.AudioCodecParameters __result__ = ref.codec;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.Stream.StreamSourceInfo::get_videoSourceInfo_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.Stream.StreamSourceInfo ref = (owt.base.Stream.StreamSourceInfo) getHEAP().get((int) __args__.get("refId"));
            
                    owt.base.Stream.StreamSourceInfo.VideoSourceInfo __result__ = ref.videoSourceInfo;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.Stream.StreamSourceInfo::get_audioSourceInfo_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.Stream.StreamSourceInfo ref = (owt.base.Stream.StreamSourceInfo) getHEAP().get((int) __args__.get("refId"));
            
                    owt.base.Stream.StreamSourceInfo.AudioSourceInfo __result__ = ref.audioSourceInfo;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.VideoCodecParameters::get_name_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.VideoCodecParameters ref = (owt.base.VideoCodecParameters) getHEAP().get((int) __args__.get("refId"));
            
                    owt.base.MediaCodecs.VideoCodec __result__ = ref.name;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.VideoCodecParameters::get_profile_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.VideoCodecParameters ref = (owt.base.VideoCodecParameters) getHEAP().get((int) __args__.get("refId"));
            
                    owt.base.MediaCodecs.H264Profile __result__ = ref.profile;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.LocalStream::get_resolutionWidth_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.LocalStream ref = (owt.base.LocalStream) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.resolutionWidth;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.LocalStream::get_resolutionHeight_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.LocalStream ref = (owt.base.LocalStream) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.resolutionHeight;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.LocalStream::get_frameRate_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.LocalStream ref = (owt.base.LocalStream) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.frameRate;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.Stream.StreamSourceInfo.VideoSourceInfo::get_type_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.Stream.StreamSourceInfo.VideoSourceInfo ref = (owt.base.Stream.StreamSourceInfo.VideoSourceInfo) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.type;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.MediaConstraints.TrackKind::get_kind_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.MediaConstraints.TrackKind ref = (owt.base.MediaConstraints.TrackKind) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.kind;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.VideoEncodingParameters::get_maxBitrate_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.VideoEncodingParameters ref = (owt.base.VideoEncodingParameters) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.maxBitrate;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.VideoEncodingParameters::get_codec_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.VideoEncodingParameters ref = (owt.base.VideoEncodingParameters) getHEAP().get((int) __args__.get("refId"));
            
                    owt.base.VideoCodecParameters __result__ = ref.codec;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.Const::get_userAgent_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.Const ref = (owt.base.Const) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.userAgent;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.BuildConfig::get_DEBUG_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.BuildConfig ref = (owt.base.BuildConfig) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.DEBUG;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.OwtError::get_errorCode_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.OwtError ref = (owt.base.OwtError) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.errorCode;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("owt.base.OwtError::get_errorMessage_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    owt.base.OwtError ref = (owt.base.OwtError) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.errorMessage;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // setter
            put("org.webrtc.Size::set_width", (__args__, __methodResult__) -> {
                // jsonable arg
                int width = (int) ((Map<String, Object>) __args__).get("width");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.Size ref = (org.webrtc.Size) getHEAP().get(refId);
            
                ref.width = width;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.Size::set_height", (__args__, __methodResult__) -> {
                // jsonable arg
                int height = (int) ((Map<String, Object>) __args__).get("height");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.Size ref = (org.webrtc.Size) getHEAP().get(refId);
            
                ref.height = height;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnectionFactory.Options::set_networkIgnoreMask", (__args__, __methodResult__) -> {
                // jsonable arg
                int networkIgnoreMask = (int) ((Map<String, Object>) __args__).get("networkIgnoreMask");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get(refId);
            
                ref.networkIgnoreMask = networkIgnoreMask;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnectionFactory.Options::set_disableEncryption", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean disableEncryption = (boolean) ((Map<String, Object>) __args__).get("disableEncryption");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get(refId);
            
                ref.disableEncryption = disableEncryption;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnectionFactory.Options::set_disableNetworkMonitor", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean disableNetworkMonitor = (boolean) ((Map<String, Object>) __args__).get("disableNetworkMonitor");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get(refId);
            
                ref.disableNetworkMonitor = disableNetworkMonitor;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnectionFactory.Options::set_enableAes128Sha1_32CryptoCipher", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean enableAes128Sha1_32CryptoCipher = (boolean) ((Map<String, Object>) __args__).get("enableAes128Sha1_32CryptoCipher");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get(refId);
            
                ref.enableAes128Sha1_32CryptoCipher = enableAes128Sha1_32CryptoCipher;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnectionFactory.Options::set_enableGcmCryptoSuites", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean enableGcmCryptoSuites = (boolean) ((Map<String, Object>) __args__).get("enableGcmCryptoSuites");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get(refId);
            
                ref.enableGcmCryptoSuites = enableGcmCryptoSuites;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.DataChannel.Init::set_ordered", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean ordered = (boolean) ((Map<String, Object>) __args__).get("ordered");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get(refId);
            
                ref.ordered = ordered;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.DataChannel.Init::set_maxRetransmitTimeMs", (__args__, __methodResult__) -> {
                // jsonable arg
                int maxRetransmitTimeMs = (int) ((Map<String, Object>) __args__).get("maxRetransmitTimeMs");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get(refId);
            
                ref.maxRetransmitTimeMs = maxRetransmitTimeMs;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.DataChannel.Init::set_maxRetransmits", (__args__, __methodResult__) -> {
                // jsonable arg
                int maxRetransmits = (int) ((Map<String, Object>) __args__).get("maxRetransmits");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get(refId);
            
                ref.maxRetransmits = maxRetransmits;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.DataChannel.Init::set_protocol", (__args__, __methodResult__) -> {
                // jsonable arg
                String protocol = (String) ((Map<String, Object>) __args__).get("protocol");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get(refId);
            
                ref.protocol = protocol;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.DataChannel.Init::set_negotiated", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean negotiated = (boolean) ((Map<String, Object>) __args__).get("negotiated");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get(refId);
            
                ref.negotiated = negotiated;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.DataChannel.Init::set_id", (__args__, __methodResult__) -> {
                // jsonable arg
                int id = (int) ((Map<String, Object>) __args__).get("id");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get(refId);
            
                ref.id = id;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange::set_min", (__args__, __methodResult__) -> {
                // jsonable arg
                int min = (int) ((Map<String, Object>) __args__).get("min");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange) getHEAP().get(refId);
            
                ref.min = min;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange::set_max", (__args__, __methodResult__) -> {
                // jsonable arg
                int max = (int) ((Map<String, Object>) __args__).get("max");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange) getHEAP().get(refId);
            
                ref.max = max;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceTransportsType", (__args__, __methodResult__) -> {
                // enum arg
                org.webrtc.PeerConnection.IceTransportsType iceTransportsType = org.webrtc.PeerConnection.IceTransportsType.values()[(int) ((Map<String, Object>) __args__).get("iceTransportsType")];
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.iceTransportsType = iceTransportsType;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceServers", (__args__, __methodResult__) -> {
                // list arg
                List<Integer> iceServersRefIdList = (List<Integer>) ((Map<String, Object>) __args__).get("iceServers");
                java.util.List<org.webrtc.PeerConnection.IceServer> iceServers = new ArrayList<>();
                for (int refId : iceServersRefIdList) {
                    ((ArrayList<org.webrtc.PeerConnection.IceServer>) iceServers).add((org.webrtc.PeerConnection.IceServer) getHEAP().get(refId));
                }
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.iceServers = (ArrayList) iceServers;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_bundlePolicy", (__args__, __methodResult__) -> {
                // enum arg
                org.webrtc.PeerConnection.BundlePolicy bundlePolicy = org.webrtc.PeerConnection.BundlePolicy.values()[(int) ((Map<String, Object>) __args__).get("bundlePolicy")];
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.bundlePolicy = bundlePolicy;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_rtcpMuxPolicy", (__args__, __methodResult__) -> {
                // enum arg
                org.webrtc.PeerConnection.RtcpMuxPolicy rtcpMuxPolicy = org.webrtc.PeerConnection.RtcpMuxPolicy.values()[(int) ((Map<String, Object>) __args__).get("rtcpMuxPolicy")];
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.rtcpMuxPolicy = rtcpMuxPolicy;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_tcpCandidatePolicy", (__args__, __methodResult__) -> {
                // enum arg
                org.webrtc.PeerConnection.TcpCandidatePolicy tcpCandidatePolicy = org.webrtc.PeerConnection.TcpCandidatePolicy.values()[(int) ((Map<String, Object>) __args__).get("tcpCandidatePolicy")];
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.tcpCandidatePolicy = tcpCandidatePolicy;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_candidateNetworkPolicy", (__args__, __methodResult__) -> {
                // enum arg
                org.webrtc.PeerConnection.CandidateNetworkPolicy candidateNetworkPolicy = org.webrtc.PeerConnection.CandidateNetworkPolicy.values()[(int) ((Map<String, Object>) __args__).get("candidateNetworkPolicy")];
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.candidateNetworkPolicy = candidateNetworkPolicy;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_audioJitterBufferMaxPackets", (__args__, __methodResult__) -> {
                // jsonable arg
                int audioJitterBufferMaxPackets = (int) ((Map<String, Object>) __args__).get("audioJitterBufferMaxPackets");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.audioJitterBufferMaxPackets = audioJitterBufferMaxPackets;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_audioJitterBufferFastAccelerate", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean audioJitterBufferFastAccelerate = (boolean) ((Map<String, Object>) __args__).get("audioJitterBufferFastAccelerate");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.audioJitterBufferFastAccelerate = audioJitterBufferFastAccelerate;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceConnectionReceivingTimeout", (__args__, __methodResult__) -> {
                // jsonable arg
                int iceConnectionReceivingTimeout = (int) ((Map<String, Object>) __args__).get("iceConnectionReceivingTimeout");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.iceConnectionReceivingTimeout = iceConnectionReceivingTimeout;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceBackupCandidatePairPingInterval", (__args__, __methodResult__) -> {
                // jsonable arg
                int iceBackupCandidatePairPingInterval = (int) ((Map<String, Object>) __args__).get("iceBackupCandidatePairPingInterval");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.iceBackupCandidatePairPingInterval = iceBackupCandidatePairPingInterval;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_keyType", (__args__, __methodResult__) -> {
                // enum arg
                org.webrtc.PeerConnection.KeyType keyType = org.webrtc.PeerConnection.KeyType.values()[(int) ((Map<String, Object>) __args__).get("keyType")];
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.keyType = keyType;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_continualGatheringPolicy", (__args__, __methodResult__) -> {
                // enum arg
                org.webrtc.PeerConnection.ContinualGatheringPolicy continualGatheringPolicy = org.webrtc.PeerConnection.ContinualGatheringPolicy.values()[(int) ((Map<String, Object>) __args__).get("continualGatheringPolicy")];
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.continualGatheringPolicy = continualGatheringPolicy;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceCandidatePoolSize", (__args__, __methodResult__) -> {
                // jsonable arg
                int iceCandidatePoolSize = (int) ((Map<String, Object>) __args__).get("iceCandidatePoolSize");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.iceCandidatePoolSize = iceCandidatePoolSize;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_pruneTurnPorts", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean pruneTurnPorts = (boolean) ((Map<String, Object>) __args__).get("pruneTurnPorts");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.pruneTurnPorts = pruneTurnPorts;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_presumeWritableWhenFullyRelayed", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean presumeWritableWhenFullyRelayed = (boolean) ((Map<String, Object>) __args__).get("presumeWritableWhenFullyRelayed");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.presumeWritableWhenFullyRelayed = presumeWritableWhenFullyRelayed;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceCheckIntervalStrongConnectivityMs", (__args__, __methodResult__) -> {
                // jsonable arg
                Integer iceCheckIntervalStrongConnectivityMs = (Integer) ((Map<String, Object>) __args__).get("iceCheckIntervalStrongConnectivityMs");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.iceCheckIntervalStrongConnectivityMs = iceCheckIntervalStrongConnectivityMs;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceCheckIntervalWeakConnectivityMs", (__args__, __methodResult__) -> {
                // jsonable arg
                Integer iceCheckIntervalWeakConnectivityMs = (Integer) ((Map<String, Object>) __args__).get("iceCheckIntervalWeakConnectivityMs");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.iceCheckIntervalWeakConnectivityMs = iceCheckIntervalWeakConnectivityMs;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceCheckMinInterval", (__args__, __methodResult__) -> {
                // jsonable arg
                Integer iceCheckMinInterval = (Integer) ((Map<String, Object>) __args__).get("iceCheckMinInterval");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.iceCheckMinInterval = iceCheckMinInterval;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceUnwritableTimeMs", (__args__, __methodResult__) -> {
                // jsonable arg
                Integer iceUnwritableTimeMs = (Integer) ((Map<String, Object>) __args__).get("iceUnwritableTimeMs");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.iceUnwritableTimeMs = iceUnwritableTimeMs;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceUnwritableMinChecks", (__args__, __methodResult__) -> {
                // jsonable arg
                Integer iceUnwritableMinChecks = (Integer) ((Map<String, Object>) __args__).get("iceUnwritableMinChecks");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.iceUnwritableMinChecks = iceUnwritableMinChecks;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_stunCandidateKeepaliveIntervalMs", (__args__, __methodResult__) -> {
                // jsonable arg
                Integer stunCandidateKeepaliveIntervalMs = (Integer) ((Map<String, Object>) __args__).get("stunCandidateKeepaliveIntervalMs");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.stunCandidateKeepaliveIntervalMs = stunCandidateKeepaliveIntervalMs;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_disableIPv6OnWifi", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean disableIPv6OnWifi = (boolean) ((Map<String, Object>) __args__).get("disableIPv6OnWifi");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.disableIPv6OnWifi = disableIPv6OnWifi;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_maxIPv6Networks", (__args__, __methodResult__) -> {
                // jsonable arg
                int maxIPv6Networks = (int) ((Map<String, Object>) __args__).get("maxIPv6Networks");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.maxIPv6Networks = maxIPv6Networks;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceRegatherIntervalRange", (__args__, __methodResult__) -> {
                // ref arg
                Integer __iceRegatherIntervalRangeRefId__ = (Integer) ((Map<String, Object>) __args__).get("iceRegatherIntervalRange");
                org.webrtc.PeerConnection.IntervalRange iceRegatherIntervalRange = __iceRegatherIntervalRangeRefId__ != null ? (org.webrtc.PeerConnection.IntervalRange) getHEAP().get(__iceRegatherIntervalRangeRefId__) : null;
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.iceRegatherIntervalRange = iceRegatherIntervalRange;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_disableIpv6", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean disableIpv6 = (boolean) ((Map<String, Object>) __args__).get("disableIpv6");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.disableIpv6 = disableIpv6;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_enableDscp", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean enableDscp = (boolean) ((Map<String, Object>) __args__).get("enableDscp");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.enableDscp = enableDscp;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_enableCpuOveruseDetection", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean enableCpuOveruseDetection = (boolean) ((Map<String, Object>) __args__).get("enableCpuOveruseDetection");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.enableCpuOveruseDetection = enableCpuOveruseDetection;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_enableRtpDataChannel", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean enableRtpDataChannel = (boolean) ((Map<String, Object>) __args__).get("enableRtpDataChannel");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.enableRtpDataChannel = enableRtpDataChannel;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_suspendBelowMinBitrate", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean suspendBelowMinBitrate = (boolean) ((Map<String, Object>) __args__).get("suspendBelowMinBitrate");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.suspendBelowMinBitrate = suspendBelowMinBitrate;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_screencastMinBitrate", (__args__, __methodResult__) -> {
                // jsonable arg
                Integer screencastMinBitrate = (Integer) ((Map<String, Object>) __args__).get("screencastMinBitrate");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.screencastMinBitrate = screencastMinBitrate;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_combinedAudioVideoBwe", (__args__, __methodResult__) -> {
                // jsonable arg
                Boolean combinedAudioVideoBwe = (Boolean) ((Map<String, Object>) __args__).get("combinedAudioVideoBwe");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.combinedAudioVideoBwe = combinedAudioVideoBwe;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_enableDtlsSrtp", (__args__, __methodResult__) -> {
                // jsonable arg
                Boolean enableDtlsSrtp = (Boolean) ((Map<String, Object>) __args__).get("enableDtlsSrtp");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.enableDtlsSrtp = enableDtlsSrtp;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_networkPreference", (__args__, __methodResult__) -> {
                // enum arg
                org.webrtc.PeerConnection.AdapterType networkPreference = org.webrtc.PeerConnection.AdapterType.values()[(int) ((Map<String, Object>) __args__).get("networkPreference")];
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.networkPreference = networkPreference;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_sdpSemantics", (__args__, __methodResult__) -> {
                // enum arg
                org.webrtc.PeerConnection.SdpSemantics sdpSemantics = org.webrtc.PeerConnection.SdpSemantics.values()[(int) ((Map<String, Object>) __args__).get("sdpSemantics")];
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.sdpSemantics = sdpSemantics;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_turnCustomizer", (__args__, __methodResult__) -> {
                // ref arg
                Integer __turnCustomizerRefId__ = (Integer) ((Map<String, Object>) __args__).get("turnCustomizer");
                org.webrtc.TurnCustomizer turnCustomizer = __turnCustomizerRefId__ != null ? (org.webrtc.TurnCustomizer) getHEAP().get(__turnCustomizerRefId__) : null;
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.turnCustomizer = turnCustomizer;
                __methodResult__.success("success");
            });
            // setter
            put("org.webrtc.PeerConnection.RTCConfiguration::set_activeResetSrtpParams", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean activeResetSrtpParams = (boolean) ((Map<String, Object>) __args__).get("activeResetSrtpParams");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                ref.activeResetSrtpParams = activeResetSrtpParams;
                __methodResult__.success("success");
            });
            // setter
            put("owt.conference.Subscription.VideoUpdateOptions::set_resolutionHeight", (__args__, __methodResult__) -> {
                // jsonable arg
                int resolutionHeight = (int) ((Map<String, Object>) __args__).get("resolutionHeight");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get(refId);
            
                ref.resolutionHeight = resolutionHeight;
                __methodResult__.success("success");
            });
            // setter
            put("owt.conference.Subscription.VideoUpdateOptions::set_resolutionWidth", (__args__, __methodResult__) -> {
                // jsonable arg
                int resolutionWidth = (int) ((Map<String, Object>) __args__).get("resolutionWidth");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get(refId);
            
                ref.resolutionWidth = resolutionWidth;
                __methodResult__.success("success");
            });
            // setter
            put("owt.conference.Subscription.VideoUpdateOptions::set_fps", (__args__, __methodResult__) -> {
                // jsonable arg
                int fps = (int) ((Map<String, Object>) __args__).get("fps");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get(refId);
            
                ref.fps = fps;
                __methodResult__.success("success");
            });
            // setter
            put("owt.conference.Subscription.VideoUpdateOptions::set_keyframeInterval", (__args__, __methodResult__) -> {
                // jsonable arg
                int keyframeInterval = (int) ((Map<String, Object>) __args__).get("keyframeInterval");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get(refId);
            
                ref.keyframeInterval = keyframeInterval;
                __methodResult__.success("success");
            });
            // setter
            put("owt.conference.Subscription.VideoUpdateOptions::set_bitrateMultiplier", (__args__, __methodResult__) -> {
                // jsonable arg
                double bitrateMultiplier = (double) ((Map<String, Object>) __args__).get("bitrateMultiplier");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get(refId);
            
                ref.bitrateMultiplier = bitrateMultiplier;
                __methodResult__.success("success");
            });
            // setter
            put("owt.conference.RemoteStream::set_extraSubscriptionCapability", (__args__, __methodResult__) -> {
                // ref arg
                Integer __extraSubscriptionCapabilityRefId__ = (Integer) ((Map<String, Object>) __args__).get("extraSubscriptionCapability");
                owt.conference.SubscriptionCapabilities extraSubscriptionCapability = __extraSubscriptionCapabilityRefId__ != null ? (owt.conference.SubscriptionCapabilities) getHEAP().get(__extraSubscriptionCapabilityRefId__) : null;
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.RemoteStream ref = (owt.conference.RemoteStream) getHEAP().get(refId);
            
                ref.extraSubscriptionCapability = extraSubscriptionCapability;
                __methodResult__.success("success");
            });
            // setter
            put("owt.conference.RemoteStream::set_publicationSettings", (__args__, __methodResult__) -> {
                // ref arg
                Integer __publicationSettingsRefId__ = (Integer) ((Map<String, Object>) __args__).get("publicationSettings");
                owt.conference.PublicationSettings publicationSettings = __publicationSettingsRefId__ != null ? (owt.conference.PublicationSettings) getHEAP().get(__publicationSettingsRefId__) : null;
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.RemoteStream ref = (owt.conference.RemoteStream) getHEAP().get(refId);
            
                ref.publicationSettings = publicationSettings;
                __methodResult__.success("success");
            });
            // setter
            put("owt.base.MediaConstraints.AudioTrackConstraints::set_echoCancellation", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean echoCancellation = (boolean) ((Map<String, Object>) __args__).get("echoCancellation");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.MediaConstraints.AudioTrackConstraints ref = (owt.base.MediaConstraints.AudioTrackConstraints) getHEAP().get(refId);
            
                ref.echoCancellation = echoCancellation;
                __methodResult__.success("success");
            });
            // setter
            put("owt.base.MediaConstraints.AudioTrackConstraints::set_extendedFilterEchoCancellation", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean extendedFilterEchoCancellation = (boolean) ((Map<String, Object>) __args__).get("extendedFilterEchoCancellation");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.MediaConstraints.AudioTrackConstraints ref = (owt.base.MediaConstraints.AudioTrackConstraints) getHEAP().get(refId);
            
                ref.extendedFilterEchoCancellation = extendedFilterEchoCancellation;
                __methodResult__.success("success");
            });
            // setter
            put("owt.base.MediaConstraints.AudioTrackConstraints::set_delayAgnosticEchoCancellation", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean delayAgnosticEchoCancellation = (boolean) ((Map<String, Object>) __args__).get("delayAgnosticEchoCancellation");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.MediaConstraints.AudioTrackConstraints ref = (owt.base.MediaConstraints.AudioTrackConstraints) getHEAP().get(refId);
            
                ref.delayAgnosticEchoCancellation = delayAgnosticEchoCancellation;
                __methodResult__.success("success");
            });
            // setter
            put("owt.base.Stream.StreamSourceInfo::set_videoSourceInfo", (__args__, __methodResult__) -> {
                // enum arg
                owt.base.Stream.StreamSourceInfo.VideoSourceInfo videoSourceInfo = owt.base.Stream.StreamSourceInfo.VideoSourceInfo.values()[(int) ((Map<String, Object>) __args__).get("videoSourceInfo")];
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.Stream.StreamSourceInfo ref = (owt.base.Stream.StreamSourceInfo) getHEAP().get(refId);
            
                ref.videoSourceInfo = videoSourceInfo;
                __methodResult__.success("success");
            });
            // setter
            put("owt.base.Stream.StreamSourceInfo::set_audioSourceInfo", (__args__, __methodResult__) -> {
                // enum arg
                owt.base.Stream.StreamSourceInfo.AudioSourceInfo audioSourceInfo = owt.base.Stream.StreamSourceInfo.AudioSourceInfo.values()[(int) ((Map<String, Object>) __args__).get("audioSourceInfo")];
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.Stream.StreamSourceInfo ref = (owt.base.Stream.StreamSourceInfo) getHEAP().get(refId);
            
                ref.audioSourceInfo = audioSourceInfo;
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.Size::set_width_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int width = (int) ((Map<String, Object>) __args__).get("width");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.Size ref = (org.webrtc.Size) getHEAP().get(refId);
            
                    ref.width = width;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.Size::set_height_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int height = (int) ((Map<String, Object>) __args__).get("height");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.Size ref = (org.webrtc.Size) getHEAP().get(refId);
            
                    ref.height = height;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnectionFactory.Options::set_networkIgnoreMask_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int networkIgnoreMask = (int) ((Map<String, Object>) __args__).get("networkIgnoreMask");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get(refId);
            
                    ref.networkIgnoreMask = networkIgnoreMask;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnectionFactory.Options::set_disableEncryption_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean disableEncryption = (boolean) ((Map<String, Object>) __args__).get("disableEncryption");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get(refId);
            
                    ref.disableEncryption = disableEncryption;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnectionFactory.Options::set_disableNetworkMonitor_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean disableNetworkMonitor = (boolean) ((Map<String, Object>) __args__).get("disableNetworkMonitor");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get(refId);
            
                    ref.disableNetworkMonitor = disableNetworkMonitor;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnectionFactory.Options::set_enableAes128Sha1_32CryptoCipher_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean enableAes128Sha1_32CryptoCipher = (boolean) ((Map<String, Object>) __args__).get("enableAes128Sha1_32CryptoCipher");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get(refId);
            
                    ref.enableAes128Sha1_32CryptoCipher = enableAes128Sha1_32CryptoCipher;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnectionFactory.Options::set_enableGcmCryptoSuites_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean enableGcmCryptoSuites = (boolean) ((Map<String, Object>) __args__).get("enableGcmCryptoSuites");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get(refId);
            
                    ref.enableGcmCryptoSuites = enableGcmCryptoSuites;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.DataChannel.Init::set_ordered_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean ordered = (boolean) ((Map<String, Object>) __args__).get("ordered");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get(refId);
            
                    ref.ordered = ordered;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.DataChannel.Init::set_maxRetransmitTimeMs_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int maxRetransmitTimeMs = (int) ((Map<String, Object>) __args__).get("maxRetransmitTimeMs");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get(refId);
            
                    ref.maxRetransmitTimeMs = maxRetransmitTimeMs;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.DataChannel.Init::set_maxRetransmits_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int maxRetransmits = (int) ((Map<String, Object>) __args__).get("maxRetransmits");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get(refId);
            
                    ref.maxRetransmits = maxRetransmits;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.DataChannel.Init::set_protocol_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    String protocol = (String) ((Map<String, Object>) __args__).get("protocol");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get(refId);
            
                    ref.protocol = protocol;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.DataChannel.Init::set_negotiated_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean negotiated = (boolean) ((Map<String, Object>) __args__).get("negotiated");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get(refId);
            
                    ref.negotiated = negotiated;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.DataChannel.Init::set_id_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int id = (int) ((Map<String, Object>) __args__).get("id");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get(refId);
            
                    ref.id = id;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange::set_min_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int min = (int) ((Map<String, Object>) __args__).get("min");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange) getHEAP().get(refId);
            
                    ref.min = min;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange::set_max_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int max = (int) ((Map<String, Object>) __args__).get("max");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange) getHEAP().get(refId);
            
                    ref.max = max;
                }
            
                __methodResult__.success("success");
            });
        }};
    }
}
