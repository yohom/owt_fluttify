//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package com.fluttify.owt_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import com.fluttify.owt_fluttify.OwtFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler7 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            put("RefClass::isKindOforg_webrtc_PeerConnectionFactory", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.PeerConnectionFactory);
            });
            put("RefClass::isKindOforg_webrtc_RtpParameters", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.RtpParameters);
            });
            put("RefClass::isKindOforg_webrtc_VideoCodecInfo", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.VideoCodecInfo);
            });
            put("RefClass::isKindOforg_webrtc_voiceengine_BuildInfo", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.voiceengine.BuildInfo);
            });
            put("RefClass::isKindOforg_webrtc_voiceengine_WebRtcAudioTrack", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.voiceengine.WebRtcAudioTrack);
            });
            put("RefClass::isKindOforg_webrtc_voiceengine_WebRtcAudioEffects", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.voiceengine.WebRtcAudioEffects);
            });
            put("RefClass::isKindOforg_webrtc_voiceengine_WebRtcAudioRecord", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.voiceengine.WebRtcAudioRecord);
            });
            put("RefClass::isKindOforg_webrtc_voiceengine_WebRtcAudioUtils", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.voiceengine.WebRtcAudioUtils);
            });
            put("RefClass::isKindOforg_webrtc_voiceengine_WebRtcAudioManager", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.voiceengine.WebRtcAudioManager);
            });
            put("RefClass::isKindOforg_webrtc_Camera2Enumerator", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.Camera2Enumerator);
            });
            put("RefClass::isKindOforg_webrtc_PeerConnection_IntervalRange", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.PeerConnection.IntervalRange);
            });
            put("RefClass::isKindOforg_webrtc_Metrics_HistogramInfo", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.Metrics.HistogramInfo);
            });
            put("RefClass::isKindOforg_webrtc_YuvConverter", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.YuvConverter);
            });
            put("RefClass::isKindOforg_webrtc_RendererCommon", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.RendererCommon);
            });
            put("RefClass::isKindOforg_webrtc_DataChannel_Init", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.DataChannel.Init);
            });
            put("RefClass::isKindOforg_webrtc_PeerConnection_IceServer", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.PeerConnection.IceServer);
            });
            put("RefClass::isKindOforg_webrtc_VideoDecoder_DecodeInfo", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.VideoDecoder.DecodeInfo);
            });
            put("RefClass::isKindOforg_webrtc_MediaCodecVideoDecoder", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.MediaCodecVideoDecoder);
            });
            put("RefClass::isKindOforg_webrtc_PeerConnectionDependencies", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.PeerConnectionDependencies);
            });
            put("RefClass::isKindOforg_webrtc_MediaStreamTrack", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.MediaStreamTrack);
            });
            put("RefClass::isKindOforg_webrtc_audio_LegacyAudioDeviceModule", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.audio.LegacyAudioDeviceModule);
            });
            put("RefClass::isKindOforg_webrtc_audio_JavaAudioDeviceModule_AudioSamples", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.audio.JavaAudioDeviceModule.AudioSamples);
            });
            put("RefClass::isKindOforg_webrtc_audio_JavaAudioDeviceModule", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.audio.JavaAudioDeviceModule);
            });
            put("RefClass::isKindOforg_webrtc_RTCStats", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.RTCStats);
            });
            put("RefClass::isKindOforg_webrtc_VideoSource", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.VideoSource);
            });
            put("RefClass::isKindOforg_webrtc_EncodedImage", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.EncodedImage);
            });
            put("RefClass::isKindOforg_webrtc_RtpReceiver", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.RtpReceiver);
            });
            put("RefClass::isKindOforg_webrtc_JavaI420Buffer", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.JavaI420Buffer);
            });
            put("RefClass::isKindOforg_webrtc_VideoFileRenderer", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.VideoFileRenderer);
            });
            put("RefClass::isKindOforg_webrtc_SurfaceEglRenderer", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.SurfaceEglRenderer);
            });
            put("RefClass::isKindOforg_webrtc_YuvHelper", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.YuvHelper);
            });
            put("RefClass::isKindOforg_webrtc_ContextUtils", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.ContextUtils);
            });
            put("RefClass::isKindOforg_webrtc_EglRenderer", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.EglRenderer);
            });
            put("RefClass::isKindOforg_webrtc_VideoFrameDrawer", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.VideoFrameDrawer);
            });
            put("RefClass::isKindOforg_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange);
            });
            put("RefClass::isKindOforg_webrtc_SoftwareVideoEncoderFactory", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.SoftwareVideoEncoderFactory);
            });
            put("RefClass::isKindOforg_webrtc_RtpTransceiver", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.RtpTransceiver);
            });
            put("RefClass::isKindOforg_webrtc_RendererCommon_VideoLayoutMeasure", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.RendererCommon.VideoLayoutMeasure);
            });
            put("RefClass::isKindOforg_webrtc_NetworkMonitorAutoDetect", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.NetworkMonitorAutoDetect);
            });
            put("RefClass::isKindOforg_webrtc_ScreenCapturerAndroid", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.ScreenCapturerAndroid);
            });
            put("RefClass::isKindOforg_webrtc_MediaConstraints_KeyValuePair", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.MediaConstraints.KeyValuePair);
            });
            put("RefClass::isKindOforg_webrtc_Camera2Capturer", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.Camera2Capturer);
            });
            put("RefClass::isKindOforg_webrtc_VideoEncoder_CodecSpecificInfoH264", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.VideoEncoder.CodecSpecificInfoH264);
            });
            put("RefClass::isKindOforg_webrtc_VideoEncoder_CodecSpecificInfoVP9", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.VideoEncoder.CodecSpecificInfoVP9);
            });
            put("RefClass::isKindOforg_webrtc_NV12Buffer", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.NV12Buffer);
            });
            put("RefClass::isKindOforg_webrtc_VideoEncoder_BitrateAllocation", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.VideoEncoder.BitrateAllocation);
            });
            put("RefClass::isKindOforg_webrtc_NetworkMonitorAutoDetect_IPAddress", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.NetworkMonitorAutoDetect.IPAddress);
            });
            put("RefClass::isKindOforg_webrtc_ThreadUtils", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.ThreadUtils);
            });
            put("RefClass::isKindOforg_webrtc_VideoEncoder_CodecSpecificInfoVP8", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.VideoEncoder.CodecSpecificInfoVP8);
            });
            put("RefClass::isKindOforg_webrtc_IceCandidate", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.IceCandidate);
            });
            put("RefClass::isKindOforg_webrtc_VideoEncoder_EncodeInfo", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.VideoEncoder.EncodeInfo);
            });
            put("RefClass::isKindOforg_webrtc_ThreadUtils_ThreadChecker", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.ThreadUtils.ThreadChecker);
            });
            put("RefClass::isKindOforg_webrtc_PeerConnection_RTCConfiguration", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.PeerConnection.RTCConfiguration);
            });
            put("RefClass::isKindOforg_webrtc_DtmfSender", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.DtmfSender);
            });
            put("RefClass::isKindOforg_webrtc_Logging", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.Logging);
            });
            put("RefClass::isKindOforg_webrtc_DataChannel_Buffer", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.DataChannel.Buffer);
            });
            put("RefClass::isKindOforg_webrtc_AudioTrack", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.AudioTrack);
            });
            put("RefClass::isKindOforg_webrtc_SoftwareVideoDecoderFactory", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.SoftwareVideoDecoderFactory);
            });
            put("RefClass::isKindOforg_webrtc_MediaConstraints", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.MediaConstraints);
            });
            put("RefClass::isKindOforg_webrtc_RtpTransceiver_RtpTransceiverInit", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.RtpTransceiver.RtpTransceiverInit);
            });
            put("RefClass::isKindOforg_webrtc_StatsReport_Value", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.StatsReport.Value);
            });
            put("RefClass::isKindOforg_webrtc_Metrics", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.Metrics);
            });
            put("RefClass::isKindOforg_webrtc_TurnCustomizer", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof org.webrtc.TurnCustomizer);
            });
            put("RefClass::isKindOfowt_conference_Participant", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.conference.Participant);
            });
            put("RefClass::isKindOfowt_conference_Publication", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.conference.Publication);
            });
            put("RefClass::isKindOfowt_conference_ConferenceInfo", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.conference.ConferenceInfo);
            });
            put("RefClass::isKindOfowt_conference_SubscribeOptions", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.conference.SubscribeOptions);
            });
            put("RefClass::isKindOfowt_conference_Subscription_VideoUpdateOptions", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.conference.Subscription.VideoUpdateOptions);
            });
            put("RefClass::isKindOfowt_conference_PublishOptions", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.conference.PublishOptions);
            });
            put("RefClass::isKindOfowt_conference_PublicationSettings", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.conference.PublicationSettings);
            });
            put("RefClass::isKindOfowt_conference_RemoteStream", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.conference.RemoteStream);
            });
            put("RefClass::isKindOfowt_conference_ConferenceClientConfiguration", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.conference.ConferenceClientConfiguration);
            });
            put("RefClass::isKindOfowt_conference_SubscriptionCapabilities", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.conference.SubscriptionCapabilities);
            });
            put("RefClass::isKindOfowt_conference_Subscription", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.conference.Subscription);
            });
            put("RefClass::isKindOfowt_conference_BuildConfig", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.conference.BuildConfig);
            });
            put("RefClass::isKindOfowt_conference_RemoteMixedStream", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.conference.RemoteMixedStream);
            });
            put("RefClass::isKindOfowt_p2p_Publication", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.p2p.Publication);
            });
            put("RefClass::isKindOfowt_p2p_P2PClientConfiguration", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.p2p.P2PClientConfiguration);
            });
            put("RefClass::isKindOfowt_p2p_RemoteStream", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.p2p.RemoteStream);
            });
            put("RefClass::isKindOfowt_p2p_P2PClient", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.p2p.P2PClient);
            });
            put("RefClass::isKindOfowt_p2p_BuildConfig", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.p2p.BuildConfig);
            });
            put("RefClass::isKindOfowt_base_MediaConstraints_AudioTrackConstraints", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.MediaConstraints.AudioTrackConstraints);
            });
            put("RefClass::isKindOfowt_base_Publication", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.Publication);
            });
            put("RefClass::isKindOfowt_base_ClientConfiguration", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.ClientConfiguration);
            });
            put("RefClass::isKindOfowt_base_AudioCodecParameters", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.AudioCodecParameters);
            });
            put("RefClass::isKindOfowt_base_MediaCodecs", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.MediaCodecs);
            });
            put("RefClass::isKindOfowt_base_PeerConnectionChannel", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.PeerConnectionChannel);
            });
            put("RefClass::isKindOfowt_base_Stream", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.Stream);
            });
            put("RefClass::isKindOfowt_base_AudioEncodingParameters", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.AudioEncodingParameters);
            });
            put("RefClass::isKindOfowt_base_Stream_StreamSourceInfo", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.Stream.StreamSourceInfo);
            });
            put("RefClass::isKindOfowt_base_CheckCondition", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.CheckCondition);
            });
            put("RefClass::isKindOfowt_base_VideoCodecParameters", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.VideoCodecParameters);
            });
            put("RefClass::isKindOfowt_base_LocalStream", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.LocalStream);
            });
            put("RefClass::isKindOfowt_base_RemoteStream", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.RemoteStream);
            });
            put("RefClass::isKindOfowt_base_VideoEncodingParameters", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.VideoEncodingParameters);
            });
            put("RefClass::isKindOfowt_base_Const", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.Const);
            });
            put("RefClass::isKindOfowt_base_BuildConfig", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.BuildConfig);
            });
            put("RefClass::isKindOfowt_base_OwtError", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.OwtError);
            });
            put("RefClass::isKindOfowt_base_MediaConstraints", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.MediaConstraints);
            });
            put("RefClass::isKindOfowt_base_ContextInitialization", (__args__, __methodResult__) -> {
                // 引用对象
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                Object ref = getHEAP().get(refId);
            
                __methodResult__.success(ref instanceof owt.base.ContextInitialization);
            });
            // factory
            put("ObjectFactory::createorg_webrtc_GlRectDrawer__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_GlRectDrawer__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.GlRectDrawer __obj__ = new org.webrtc.GlRectDrawer();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_HardwareVideoEncoderFactory__org_webrtc_EglBase_Context__boolean__boolean", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_HardwareVideoEncoderFactory__org_webrtc_EglBase_Context__boolean__boolean");
                }
            
                // args
                // ref arg
                Integer __sharedContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("sharedContext");
                org.webrtc.EglBase.Context sharedContext = __sharedContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__sharedContextRefId__) : null;
                // jsonable arg
                boolean enableIntelVp8Encoder = (boolean) ((Map<String, Object>) __args__).get("enableIntelVp8Encoder");
                // jsonable arg
                boolean enableH264HighProfile = (boolean) ((Map<String, Object>) __args__).get("enableH264HighProfile");
            
                // create target object
                org.webrtc.HardwareVideoEncoderFactory __obj__ = new org.webrtc.HardwareVideoEncoderFactory(sharedContext, enableIntelVp8Encoder, enableH264HighProfile);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_HardwareVideoEncoderFactory__boolean__boolean", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_HardwareVideoEncoderFactory__boolean__boolean");
                }
            
                // args
                // jsonable arg
                boolean enableIntelVp8Encoder = (boolean) ((Map<String, Object>) __args__).get("enableIntelVp8Encoder");
                // jsonable arg
                boolean enableH264HighProfile = (boolean) ((Map<String, Object>) __args__).get("enableH264HighProfile");
            
                // create target object
                org.webrtc.HardwareVideoEncoderFactory __obj__ = new org.webrtc.HardwareVideoEncoderFactory(enableIntelVp8Encoder, enableH264HighProfile);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_MediaSource__long", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_MediaSource__long");
                }
            
                // args
                // jsonable arg
                long nativeSource = (long) (int) ((Map<String, Object>) __args__).get("nativeSource");
            
                // create target object
                org.webrtc.MediaSource __obj__ = new org.webrtc.MediaSource(nativeSource);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_Size__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_Size__int__int");
                }
            
                // args
                // jsonable arg
                int width = (int) ((Map<String, Object>) __args__).get("width");
                // jsonable arg
                int height = (int) ((Map<String, Object>) __args__).get("height");
            
                // create target object
                org.webrtc.Size __obj__ = new org.webrtc.Size(width, height);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoDecoderFallback__org_webrtc_VideoDecoder__org_webrtc_VideoDecoder", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoDecoderFallback__org_webrtc_VideoDecoder__org_webrtc_VideoDecoder");
                }
            
                // args
                // ref arg
                Integer __fallbackRefId__ = (Integer) ((Map<String, Object>) __args__).get("fallback");
                org.webrtc.VideoDecoder fallback = __fallbackRefId__ != null ? (org.webrtc.VideoDecoder) getHEAP().get(__fallbackRefId__) : null;
                // ref arg
                Integer __primaryRefId__ = (Integer) ((Map<String, Object>) __args__).get("primary");
                org.webrtc.VideoDecoder primary = __primaryRefId__ != null ? (org.webrtc.VideoDecoder) getHEAP().get(__primaryRefId__) : null;
            
                // create target object
                org.webrtc.VideoDecoderFallback __obj__ = new org.webrtc.VideoDecoderFallback(fallback, primary);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_CallSessionFileRotatingLogSink__String__int__org_webrtc_Logging_Severity", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_CallSessionFileRotatingLogSink__String__int__org_webrtc_Logging_Severity");
                }
            
                // args
                // jsonable arg
                String dirPath = (String) ((Map<String, Object>) __args__).get("dirPath");
                // jsonable arg
                int maxFileSize = (int) ((Map<String, Object>) __args__).get("maxFileSize");
                // enum arg
                org.webrtc.Logging.Severity severity = org.webrtc.Logging.Severity.values()[(int) ((Map<String, Object>) __args__).get("severity")];
            
                // create target object
                org.webrtc.CallSessionFileRotatingLogSink __obj__ = new org.webrtc.CallSessionFileRotatingLogSink(dirPath, maxFileSize, severity);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_DefaultVideoEncoderFactory__org_webrtc_EglBase_Context__boolean__boolean", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_DefaultVideoEncoderFactory__org_webrtc_EglBase_Context__boolean__boolean");
                }
            
                // args
                // ref arg
                Integer __eglContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("eglContext");
                org.webrtc.EglBase.Context eglContext = __eglContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__eglContextRefId__) : null;
                // jsonable arg
                boolean enableIntelVp8Encoder = (boolean) ((Map<String, Object>) __args__).get("enableIntelVp8Encoder");
                // jsonable arg
                boolean enableH264HighProfile = (boolean) ((Map<String, Object>) __args__).get("enableH264HighProfile");
            
                // create target object
                org.webrtc.DefaultVideoEncoderFactory __obj__ = new org.webrtc.DefaultVideoEncoderFactory(eglContext, enableIntelVp8Encoder, enableH264HighProfile);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoCapabilityParser__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoCapabilityParser__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.VideoCapabilityParser __obj__ = new org.webrtc.VideoCapabilityParser();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_FileVideoCapturer__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_FileVideoCapturer__String");
                }
            
                // args
                // jsonable arg
                String inputFile = (String) ((Map<String, Object>) __args__).get("inputFile");
            
                // create target object
                org.webrtc.FileVideoCapturer __obj__ = new org.webrtc.FileVideoCapturer(inputFile);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoEncoder_CodecSpecificInfo__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoEncoder_CodecSpecificInfo__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.VideoEncoder.CodecSpecificInfo __obj__ = new org.webrtc.VideoEncoder.CodecSpecificInfo();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_Camera1Enumerator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_Camera1Enumerator__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.Camera1Enumerator __obj__ = new org.webrtc.Camera1Enumerator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_Camera1Enumerator__boolean", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_Camera1Enumerator__boolean");
                }
            
                // args
                // jsonable arg
                boolean captureToTexture = (boolean) ((Map<String, Object>) __args__).get("captureToTexture");
            
                // create target object
                org.webrtc.Camera1Enumerator __obj__ = new org.webrtc.Camera1Enumerator(captureToTexture);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_MediaCodecVideoEncoder_EncoderProperties__String__int__org_webrtc_MediaCodecVideoEncoder_BitrateAdjustmentType", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_MediaCodecVideoEncoder_EncoderProperties__String__int__org_webrtc_MediaCodecVideoEncoder_BitrateAdjustmentType");
                }
            
                // args
                // jsonable arg
                String codecName = (String) ((Map<String, Object>) __args__).get("codecName");
                // jsonable arg
                int colorFormat = (int) ((Map<String, Object>) __args__).get("colorFormat");
                // enum arg
                org.webrtc.MediaCodecVideoEncoder.BitrateAdjustmentType bitrateAdjustmentType = org.webrtc.MediaCodecVideoEncoder.BitrateAdjustmentType.values()[(int) ((Map<String, Object>) __args__).get("bitrateAdjustmentType")];
            
                // create target object
                org.webrtc.MediaCodecVideoEncoder.EncoderProperties __obj__ = new org.webrtc.MediaCodecVideoEncoder.EncoderProperties(codecName, colorFormat, bitrateAdjustmentType);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_SurfaceViewRenderer__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_SurfaceViewRenderer__android_content_Context");
                }
            
                // args
                // ref arg
                Integer __contextRefId__ = (Integer) ((Map<String, Object>) __args__).get("context");
                android.content.Context context = __contextRefId__ != null ? (android.content.Context) getHEAP().get(__contextRefId__) : null;
            
                // create target object
                org.webrtc.SurfaceViewRenderer __obj__ = new org.webrtc.SurfaceViewRenderer(context);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_RtpSender__long", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_RtpSender__long");
                }
            
                // args
                // jsonable arg
                long nativeRtpSender = (long) (int) ((Map<String, Object>) __args__).get("nativeRtpSender");
            
                // create target object
                org.webrtc.RtpSender __obj__ = new org.webrtc.RtpSender(nativeRtpSender);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoFrame__org_webrtc_VideoFrame_Buffer__int__long", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoFrame__org_webrtc_VideoFrame_Buffer__int__long");
                }
            
                // args
                // ref arg
                Integer __bufferRefId__ = (Integer) ((Map<String, Object>) __args__).get("buffer");
                org.webrtc.VideoFrame.Buffer buffer = __bufferRefId__ != null ? (org.webrtc.VideoFrame.Buffer) getHEAP().get(__bufferRefId__) : null;
                // jsonable arg
                int rotation = (int) ((Map<String, Object>) __args__).get("rotation");
                // jsonable arg
                long timestampNs = (long) (int) ((Map<String, Object>) __args__).get("timestampNs");
            
                // create target object
                org.webrtc.VideoFrame __obj__ = new org.webrtc.VideoFrame(buffer, rotation, timestampNs);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_DefaultVideoDecoderFactory__org_webrtc_EglBase_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_DefaultVideoDecoderFactory__org_webrtc_EglBase_Context");
                }
            
                // args
                // ref arg
                Integer __eglContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("eglContext");
                org.webrtc.EglBase.Context eglContext = __eglContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__eglContextRefId__) : null;
            
                // create target object
                org.webrtc.DefaultVideoDecoderFactory __obj__ = new org.webrtc.DefaultVideoDecoderFactory(eglContext);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_CameraEnumerationAndroid__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_CameraEnumerationAndroid__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.CameraEnumerationAndroid __obj__ = new org.webrtc.CameraEnumerationAndroid();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_GlShader__String__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_GlShader__String__String");
                }
            
                // args
                // jsonable arg
                String vertexSource = (String) ((Map<String, Object>) __args__).get("vertexSource");
                // jsonable arg
                String fragmentSource = (String) ((Map<String, Object>) __args__).get("fragmentSource");
            
                // create target object
                org.webrtc.GlShader __obj__ = new org.webrtc.GlShader(vertexSource, fragmentSource);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_DataChannel__long", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_DataChannel__long");
                }
            
                // args
                // jsonable arg
                long nativeDataChannel = (long) (int) ((Map<String, Object>) __args__).get("nativeDataChannel");
            
                // create target object
                org.webrtc.DataChannel __obj__ = new org.webrtc.DataChannel(nativeDataChannel);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoEncoder_Settings__int__int__int__int__int__int__boolean", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoEncoder_Settings__int__int__int__int__int__int__boolean");
                }
            
                // args
                // jsonable arg
                int numberOfCores = (int) ((Map<String, Object>) __args__).get("numberOfCores");
                // jsonable arg
                int width = (int) ((Map<String, Object>) __args__).get("width");
                // jsonable arg
                int height = (int) ((Map<String, Object>) __args__).get("height");
                // jsonable arg
                int startBitrate = (int) ((Map<String, Object>) __args__).get("startBitrate");
                // jsonable arg
                int maxFramerate = (int) ((Map<String, Object>) __args__).get("maxFramerate");
                // jsonable arg
                int numberOfSimulcastStreams = (int) ((Map<String, Object>) __args__).get("numberOfSimulcastStreams");
                // jsonable arg
                boolean automaticResizeOn = (boolean) ((Map<String, Object>) __args__).get("automaticResizeOn");
            
                // create target object
                org.webrtc.VideoEncoder.Settings __obj__ = new org.webrtc.VideoEncoder.Settings(numberOfCores, width, height, startBitrate, maxFramerate, numberOfSimulcastStreams, automaticResizeOn);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoEncoder_Settings__int__int__int__int__int__boolean", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoEncoder_Settings__int__int__int__int__int__boolean");
                }
            
                // args
                // jsonable arg
                int numberOfCores = (int) ((Map<String, Object>) __args__).get("numberOfCores");
                // jsonable arg
                int width = (int) ((Map<String, Object>) __args__).get("width");
                // jsonable arg
                int height = (int) ((Map<String, Object>) __args__).get("height");
                // jsonable arg
                int startBitrate = (int) ((Map<String, Object>) __args__).get("startBitrate");
                // jsonable arg
                int maxFramerate = (int) ((Map<String, Object>) __args__).get("maxFramerate");
                // jsonable arg
                boolean automaticResizeOn = (boolean) ((Map<String, Object>) __args__).get("automaticResizeOn");
            
                // create target object
                org.webrtc.VideoEncoder.Settings __obj__ = new org.webrtc.VideoEncoder.Settings(numberOfCores, width, height, startBitrate, maxFramerate, automaticResizeOn);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_HardwareVideoDecoderFactory__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_HardwareVideoDecoderFactory__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.HardwareVideoDecoderFactory __obj__ = new org.webrtc.HardwareVideoDecoderFactory();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_HardwareVideoDecoderFactory__org_webrtc_EglBase_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_HardwareVideoDecoderFactory__org_webrtc_EglBase_Context");
                }
            
                // args
                // ref arg
                Integer __sharedContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("sharedContext");
                org.webrtc.EglBase.Context sharedContext = __sharedContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__sharedContextRefId__) : null;
            
                // create target object
                org.webrtc.HardwareVideoDecoderFactory __obj__ = new org.webrtc.HardwareVideoDecoderFactory(sharedContext);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_CameraEnumerationAndroid_CaptureFormat__int__int__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_CameraEnumerationAndroid_CaptureFormat__int__int__int__int");
                }
            
                // args
                // jsonable arg
                int width = (int) ((Map<String, Object>) __args__).get("width");
                // jsonable arg
                int height = (int) ((Map<String, Object>) __args__).get("height");
                // jsonable arg
                int minFramerate = (int) ((Map<String, Object>) __args__).get("minFramerate");
                // jsonable arg
                int maxFramerate = (int) ((Map<String, Object>) __args__).get("maxFramerate");
            
                // create target object
                org.webrtc.CameraEnumerationAndroid.CaptureFormat __obj__ = new org.webrtc.CameraEnumerationAndroid.CaptureFormat(width, height, minFramerate, maxFramerate);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_CameraEnumerationAndroid_CaptureFormat__int__int__org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_CameraEnumerationAndroid_CaptureFormat__int__int__org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange");
                }
            
                // args
                // jsonable arg
                int width = (int) ((Map<String, Object>) __args__).get("width");
                // jsonable arg
                int height = (int) ((Map<String, Object>) __args__).get("height");
                // ref arg
                Integer __framerateRefId__ = (Integer) ((Map<String, Object>) __args__).get("framerate");
                org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange framerate = __framerateRefId__ != null ? (org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange) getHEAP().get(__framerateRefId__) : null;
            
                // create target object
                org.webrtc.CameraEnumerationAndroid.CaptureFormat __obj__ = new org.webrtc.CameraEnumerationAndroid.CaptureFormat(width, height, framerate);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoDecoder_Settings__int__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoDecoder_Settings__int__int__int");
                }
            
                // args
                // jsonable arg
                int numberOfCores = (int) ((Map<String, Object>) __args__).get("numberOfCores");
                // jsonable arg
                int width = (int) ((Map<String, Object>) __args__).get("width");
                // jsonable arg
                int height = (int) ((Map<String, Object>) __args__).get("height");
            
                // create target object
                org.webrtc.VideoDecoder.Settings __obj__ = new org.webrtc.VideoDecoder.Settings(numberOfCores, width, height);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_GlTextureFrameBuffer__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_GlTextureFrameBuffer__int");
                }
            
                // args
                // jsonable arg
                int pixelFormat = (int) ((Map<String, Object>) __args__).get("pixelFormat");
            
                // create target object
                org.webrtc.GlTextureFrameBuffer __obj__ = new org.webrtc.GlTextureFrameBuffer(pixelFormat);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_MediaStream__long", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_MediaStream__long");
                }
            
                // args
                // jsonable arg
                long nativeStream = (long) (int) ((Map<String, Object>) __args__).get("nativeStream");
            
                // create target object
                org.webrtc.MediaStream __obj__ = new org.webrtc.MediaStream(nativeStream);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_JniCommon__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_JniCommon__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.JniCommon __obj__ = new org.webrtc.JniCommon();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_SessionDescription__org_webrtc_SessionDescription_Type__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_SessionDescription__org_webrtc_SessionDescription_Type__String");
                }
            
                // args
                // enum arg
                org.webrtc.SessionDescription.Type type = org.webrtc.SessionDescription.Type.values()[(int) ((Map<String, Object>) __args__).get("type")];
                // jsonable arg
                String description = (String) ((Map<String, Object>) __args__).get("description");
            
                // create target object
                org.webrtc.SessionDescription __obj__ = new org.webrtc.SessionDescription(type, description);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoEncoderFallback__org_webrtc_VideoEncoder__org_webrtc_VideoEncoder", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoEncoderFallback__org_webrtc_VideoEncoder__org_webrtc_VideoEncoder");
                }
            
                // args
                // ref arg
                Integer __fallbackRefId__ = (Integer) ((Map<String, Object>) __args__).get("fallback");
                org.webrtc.VideoEncoder fallback = __fallbackRefId__ != null ? (org.webrtc.VideoEncoder) getHEAP().get(__fallbackRefId__) : null;
                // ref arg
                Integer __primaryRefId__ = (Integer) ((Map<String, Object>) __args__).get("primary");
                org.webrtc.VideoEncoder primary = __primaryRefId__ != null ? (org.webrtc.VideoEncoder) getHEAP().get(__primaryRefId__) : null;
            
                // create target object
                org.webrtc.VideoEncoderFallback __obj__ = new org.webrtc.VideoEncoderFallback(fallback, primary);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoEncoder_ScalingSettings__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoEncoder_ScalingSettings__int__int");
                }
            
                // args
                // jsonable arg
                int low = (int) ((Map<String, Object>) __args__).get("low");
                // jsonable arg
                int high = (int) ((Map<String, Object>) __args__).get("high");
            
                // create target object
                org.webrtc.VideoEncoder.ScalingSettings __obj__ = new org.webrtc.VideoEncoder.ScalingSettings(low, high);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoEncoder_ScalingSettings__boolean", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoEncoder_ScalingSettings__boolean");
                }
            
                // args
                // jsonable arg
                boolean on = (boolean) ((Map<String, Object>) __args__).get("on");
            
                // create target object
                org.webrtc.VideoEncoder.ScalingSettings __obj__ = new org.webrtc.VideoEncoder.ScalingSettings(on);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoEncoder_ScalingSettings__boolean__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoEncoder_ScalingSettings__boolean__int__int");
                }
            
                // args
                // jsonable arg
                boolean on = (boolean) ((Map<String, Object>) __args__).get("on");
                // jsonable arg
                int low = (int) ((Map<String, Object>) __args__).get("low");
                // jsonable arg
                int high = (int) ((Map<String, Object>) __args__).get("high");
            
                // create target object
                org.webrtc.VideoEncoder.ScalingSettings __obj__ = new org.webrtc.VideoEncoder.ScalingSettings(on, low, high);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoTrack__long", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoTrack__long");
                }
            
                // args
                // jsonable arg
                long nativeTrack = (long) (int) ((Map<String, Object>) __args__).get("nativeTrack");
            
                // create target object
                org.webrtc.VideoTrack __obj__ = new org.webrtc.VideoTrack(nativeTrack);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_AudioSource__long", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_AudioSource__long");
                }
            
                // args
                // jsonable arg
                long nativeSource = (long) (int) ((Map<String, Object>) __args__).get("nativeSource");
            
                // create target object
                org.webrtc.AudioSource __obj__ = new org.webrtc.AudioSource(nativeSource);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_PeerConnectionFactory_Options__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_PeerConnectionFactory_Options__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.PeerConnectionFactory.Options __obj__ = new org.webrtc.PeerConnectionFactory.Options();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoCodecInfo__String__java_util_Map_String_String_", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoCodecInfo__String__java_util_Map_String_String_");
                }
            
                // args
                // jsonable arg
                String name = (String) ((Map<String, Object>) __args__).get("name");
                // jsonable arg
                java.util.Map<String,String> params = (java.util.Map<String,String>) ((Map<String, Object>) __args__).get("params");
            
                // create target object
                org.webrtc.VideoCodecInfo __obj__ = new org.webrtc.VideoCodecInfo(name, params);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoCodecInfo__int__String__java_util_Map_String_String_", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoCodecInfo__int__String__java_util_Map_String_String_");
                }
            
                // args
                // jsonable arg
                int payload = (int) ((Map<String, Object>) __args__).get("payload");
                // jsonable arg
                String name = (String) ((Map<String, Object>) __args__).get("name");
                // jsonable arg
                java.util.Map<String,String> params = (java.util.Map<String,String>) ((Map<String, Object>) __args__).get("params");
            
                // create target object
                org.webrtc.VideoCodecInfo __obj__ = new org.webrtc.VideoCodecInfo(payload, name, params);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_voiceengine_BuildInfo__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_voiceengine_BuildInfo__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.voiceengine.BuildInfo __obj__ = new org.webrtc.voiceengine.BuildInfo();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_voiceengine_WebRtcAudioUtils__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_voiceengine_WebRtcAudioUtils__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.voiceengine.WebRtcAudioUtils __obj__ = new org.webrtc.voiceengine.WebRtcAudioUtils();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_Camera2Enumerator__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_Camera2Enumerator__android_content_Context");
                }
            
                // args
                // ref arg
                Integer __contextRefId__ = (Integer) ((Map<String, Object>) __args__).get("context");
                android.content.Context context = __contextRefId__ != null ? (android.content.Context) getHEAP().get(__contextRefId__) : null;
            
                // create target object
                org.webrtc.Camera2Enumerator __obj__ = new org.webrtc.Camera2Enumerator(context);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_PeerConnection_IntervalRange__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_PeerConnection_IntervalRange__int__int");
                }
            
                // args
                // jsonable arg
                int min = (int) ((Map<String, Object>) __args__).get("min");
                // jsonable arg
                int max = (int) ((Map<String, Object>) __args__).get("max");
            
                // create target object
                org.webrtc.PeerConnection.IntervalRange __obj__ = new org.webrtc.PeerConnection.IntervalRange(min, max);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_Metrics_HistogramInfo__int__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_Metrics_HistogramInfo__int__int__int");
                }
            
                // args
                // jsonable arg
                int min = (int) ((Map<String, Object>) __args__).get("min");
                // jsonable arg
                int max = (int) ((Map<String, Object>) __args__).get("max");
                // jsonable arg
                int bucketCount = (int) ((Map<String, Object>) __args__).get("bucketCount");
            
                // create target object
                org.webrtc.Metrics.HistogramInfo __obj__ = new org.webrtc.Metrics.HistogramInfo(min, max, bucketCount);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_YuvConverter__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_YuvConverter__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.YuvConverter __obj__ = new org.webrtc.YuvConverter();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_RendererCommon__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_RendererCommon__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.RendererCommon __obj__ = new org.webrtc.RendererCommon();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_DataChannel_Init__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_DataChannel_Init__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.DataChannel.Init __obj__ = new org.webrtc.DataChannel.Init();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_PeerConnection_IceServer__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_PeerConnection_IceServer__String");
                }
            
                // args
                // jsonable arg
                String uri = (String) ((Map<String, Object>) __args__).get("uri");
            
                // create target object
                org.webrtc.PeerConnection.IceServer __obj__ = new org.webrtc.PeerConnection.IceServer(uri);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_PeerConnection_IceServer__String__String__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_PeerConnection_IceServer__String__String__String");
                }
            
                // args
                // jsonable arg
                String uri = (String) ((Map<String, Object>) __args__).get("uri");
                // jsonable arg
                String username = (String) ((Map<String, Object>) __args__).get("username");
                // jsonable arg
                String password = (String) ((Map<String, Object>) __args__).get("password");
            
                // create target object
                org.webrtc.PeerConnection.IceServer __obj__ = new org.webrtc.PeerConnection.IceServer(uri, username, password);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_PeerConnection_IceServer__String__String__String__org_webrtc_PeerConnection_TlsCertPolicy", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_PeerConnection_IceServer__String__String__String__org_webrtc_PeerConnection_TlsCertPolicy");
                }
            
                // args
                // jsonable arg
                String uri = (String) ((Map<String, Object>) __args__).get("uri");
                // jsonable arg
                String username = (String) ((Map<String, Object>) __args__).get("username");
                // jsonable arg
                String password = (String) ((Map<String, Object>) __args__).get("password");
                // enum arg
                org.webrtc.PeerConnection.TlsCertPolicy tlsCertPolicy = org.webrtc.PeerConnection.TlsCertPolicy.values()[(int) ((Map<String, Object>) __args__).get("tlsCertPolicy")];
            
                // create target object
                org.webrtc.PeerConnection.IceServer __obj__ = new org.webrtc.PeerConnection.IceServer(uri, username, password, tlsCertPolicy);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_PeerConnection_IceServer__String__String__String__org_webrtc_PeerConnection_TlsCertPolicy__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_PeerConnection_IceServer__String__String__String__org_webrtc_PeerConnection_TlsCertPolicy__String");
                }
            
                // args
                // jsonable arg
                String uri = (String) ((Map<String, Object>) __args__).get("uri");
                // jsonable arg
                String username = (String) ((Map<String, Object>) __args__).get("username");
                // jsonable arg
                String password = (String) ((Map<String, Object>) __args__).get("password");
                // enum arg
                org.webrtc.PeerConnection.TlsCertPolicy tlsCertPolicy = org.webrtc.PeerConnection.TlsCertPolicy.values()[(int) ((Map<String, Object>) __args__).get("tlsCertPolicy")];
                // jsonable arg
                String hostname = (String) ((Map<String, Object>) __args__).get("hostname");
            
                // create target object
                org.webrtc.PeerConnection.IceServer __obj__ = new org.webrtc.PeerConnection.IceServer(uri, username, password, tlsCertPolicy, hostname);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoDecoder_DecodeInfo__boolean__long", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoDecoder_DecodeInfo__boolean__long");
                }
            
                // args
                // jsonable arg
                boolean isMissingFrames = (boolean) ((Map<String, Object>) __args__).get("isMissingFrames");
                // jsonable arg
                long renderTimeMs = (long) (int) ((Map<String, Object>) __args__).get("renderTimeMs");
            
                // create target object
                org.webrtc.VideoDecoder.DecodeInfo __obj__ = new org.webrtc.VideoDecoder.DecodeInfo(isMissingFrames, renderTimeMs);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_MediaStreamTrack__long", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_MediaStreamTrack__long");
                }
            
                // args
                // jsonable arg
                long nativeTrack = (long) (int) ((Map<String, Object>) __args__).get("nativeTrack");
            
                // create target object
                org.webrtc.MediaStreamTrack __obj__ = new org.webrtc.MediaStreamTrack(nativeTrack);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_audio_LegacyAudioDeviceModule__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_audio_LegacyAudioDeviceModule__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.audio.LegacyAudioDeviceModule __obj__ = new org.webrtc.audio.LegacyAudioDeviceModule();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_audio_JavaAudioDeviceModule_AudioSamples__int__int__int__byteArray", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_audio_JavaAudioDeviceModule_AudioSamples__int__int__int__byteArray");
                }
            
                // args
                // jsonable arg
                int audioFormat = (int) ((Map<String, Object>) __args__).get("audioFormat");
                // jsonable arg
                int channelCount = (int) ((Map<String, Object>) __args__).get("channelCount");
                // jsonable arg
                int sampleRate = (int) ((Map<String, Object>) __args__).get("sampleRate");
                // jsonable arg
                byte[] data = (byte[]) ((Map<String, Object>) __args__).get("data");
            
                // create target object
                org.webrtc.audio.JavaAudioDeviceModule.AudioSamples __obj__ = new org.webrtc.audio.JavaAudioDeviceModule.AudioSamples(audioFormat, channelCount, sampleRate, data);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_RTCStats__long__String__String__java_util_Map_String_java_lang_Object_", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_RTCStats__long__String__String__java_util_Map_String_java_lang_Object_");
                }
            
                // args
                // jsonable arg
                long timestampUs = (long) (int) ((Map<String, Object>) __args__).get("timestampUs");
                // jsonable arg
                String type = (String) ((Map<String, Object>) __args__).get("type");
                // jsonable arg
                String id = (String) ((Map<String, Object>) __args__).get("id");
                // jsonable arg
                java.util.Map<String,java.lang.Object> members = (java.util.Map<String,java.lang.Object>) ((Map<String, Object>) __args__).get("members");
            
                // create target object
                org.webrtc.RTCStats __obj__ = new org.webrtc.RTCStats(timestampUs, type, id, members);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoSource__long", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoSource__long");
                }
            
                // args
                // jsonable arg
                long nativeSource = (long) (int) ((Map<String, Object>) __args__).get("nativeSource");
            
                // create target object
                org.webrtc.VideoSource __obj__ = new org.webrtc.VideoSource(nativeSource);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_RtpReceiver__long", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_RtpReceiver__long");
                }
            
                // args
                // jsonable arg
                long nativeRtpReceiver = (long) (int) ((Map<String, Object>) __args__).get("nativeRtpReceiver");
            
                // create target object
                org.webrtc.RtpReceiver __obj__ = new org.webrtc.RtpReceiver(nativeRtpReceiver);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoFileRenderer__String__int__int__org_webrtc_EglBase_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoFileRenderer__String__int__int__org_webrtc_EglBase_Context");
                }
            
                // args
                // jsonable arg
                String outputFile = (String) ((Map<String, Object>) __args__).get("outputFile");
                // jsonable arg
                int outputFileWidth = (int) ((Map<String, Object>) __args__).get("outputFileWidth");
                // jsonable arg
                int outputFileHeight = (int) ((Map<String, Object>) __args__).get("outputFileHeight");
                // ref arg
                Integer __sharedContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("sharedContext");
                org.webrtc.EglBase.Context sharedContext = __sharedContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__sharedContextRefId__) : null;
            
                // create target object
                org.webrtc.VideoFileRenderer __obj__ = new org.webrtc.VideoFileRenderer(outputFile, outputFileWidth, outputFileHeight, sharedContext);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_SurfaceEglRenderer__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_SurfaceEglRenderer__String");
                }
            
                // args
                // jsonable arg
                String name = (String) ((Map<String, Object>) __args__).get("name");
            
                // create target object
                org.webrtc.SurfaceEglRenderer __obj__ = new org.webrtc.SurfaceEglRenderer(name);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_YuvHelper__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_YuvHelper__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.YuvHelper __obj__ = new org.webrtc.YuvHelper();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_ContextUtils__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_ContextUtils__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.ContextUtils __obj__ = new org.webrtc.ContextUtils();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_EglRenderer__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_EglRenderer__String");
                }
            
                // args
                // jsonable arg
                String name = (String) ((Map<String, Object>) __args__).get("name");
            
                // create target object
                org.webrtc.EglRenderer __obj__ = new org.webrtc.EglRenderer(name);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoFrameDrawer__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoFrameDrawer__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.VideoFrameDrawer __obj__ = new org.webrtc.VideoFrameDrawer();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange__int__int");
                }
            
                // args
                // jsonable arg
                int min = (int) ((Map<String, Object>) __args__).get("min");
                // jsonable arg
                int max = (int) ((Map<String, Object>) __args__).get("max");
            
                // create target object
                org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange __obj__ = new org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange(min, max);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_SoftwareVideoEncoderFactory__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_SoftwareVideoEncoderFactory__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.SoftwareVideoEncoderFactory __obj__ = new org.webrtc.SoftwareVideoEncoderFactory();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_RendererCommon_VideoLayoutMeasure__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_RendererCommon_VideoLayoutMeasure__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.RendererCommon.VideoLayoutMeasure __obj__ = new org.webrtc.RendererCommon.VideoLayoutMeasure();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_MediaConstraints_KeyValuePair__String__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_MediaConstraints_KeyValuePair__String__String");
                }
            
                // args
                // jsonable arg
                String key = (String) ((Map<String, Object>) __args__).get("key");
                // jsonable arg
                String value = (String) ((Map<String, Object>) __args__).get("value");
            
                // create target object
                org.webrtc.MediaConstraints.KeyValuePair __obj__ = new org.webrtc.MediaConstraints.KeyValuePair(key, value);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoEncoder_CodecSpecificInfoH264__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoEncoder_CodecSpecificInfoH264__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.VideoEncoder.CodecSpecificInfoH264 __obj__ = new org.webrtc.VideoEncoder.CodecSpecificInfoH264();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoEncoder_CodecSpecificInfoVP9__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoEncoder_CodecSpecificInfoVP9__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.VideoEncoder.CodecSpecificInfoVP9 __obj__ = new org.webrtc.VideoEncoder.CodecSpecificInfoVP9();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_NetworkMonitorAutoDetect_IPAddress__byteArray", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_NetworkMonitorAutoDetect_IPAddress__byteArray");
                }
            
                // args
                // jsonable arg
                byte[] address = (byte[]) ((Map<String, Object>) __args__).get("address");
            
                // create target object
                org.webrtc.NetworkMonitorAutoDetect.IPAddress __obj__ = new org.webrtc.NetworkMonitorAutoDetect.IPAddress(address);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_ThreadUtils__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_ThreadUtils__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.ThreadUtils __obj__ = new org.webrtc.ThreadUtils();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_VideoEncoder_CodecSpecificInfoVP8__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_VideoEncoder_CodecSpecificInfoVP8__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.VideoEncoder.CodecSpecificInfoVP8 __obj__ = new org.webrtc.VideoEncoder.CodecSpecificInfoVP8();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_IceCandidate__String__int__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_IceCandidate__String__int__String");
                }
            
                // args
                // jsonable arg
                String sdpMid = (String) ((Map<String, Object>) __args__).get("sdpMid");
                // jsonable arg
                int sdpMLineIndex = (int) ((Map<String, Object>) __args__).get("sdpMLineIndex");
                // jsonable arg
                String sdp = (String) ((Map<String, Object>) __args__).get("sdp");
            
                // create target object
                org.webrtc.IceCandidate __obj__ = new org.webrtc.IceCandidate(sdpMid, sdpMLineIndex, sdp);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_ThreadUtils_ThreadChecker__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_ThreadUtils_ThreadChecker__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.ThreadUtils.ThreadChecker __obj__ = new org.webrtc.ThreadUtils.ThreadChecker();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_PeerConnection_RTCConfiguration__java_util_List_org_webrtc_PeerConnection_IceServer_", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_PeerConnection_RTCConfiguration__java_util_List_org_webrtc_PeerConnection_IceServer_");
                }
            
                // args
                // list arg
                List<Integer> iceServersRefIdList = (List<Integer>) ((Map<String, Object>) __args__).get("iceServers");
                java.util.List<org.webrtc.PeerConnection.IceServer> iceServers = new ArrayList<>();
                for (int refId : iceServersRefIdList) {
                    ((ArrayList<org.webrtc.PeerConnection.IceServer>) iceServers).add((org.webrtc.PeerConnection.IceServer) getHEAP().get(refId));
                }
            
                // create target object
                org.webrtc.PeerConnection.RTCConfiguration __obj__ = new org.webrtc.PeerConnection.RTCConfiguration((ArrayList) iceServers);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_DtmfSender__long", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_DtmfSender__long");
                }
            
                // args
                // jsonable arg
                long nativeDtmfSender = (long) (int) ((Map<String, Object>) __args__).get("nativeDtmfSender");
            
                // create target object
                org.webrtc.DtmfSender __obj__ = new org.webrtc.DtmfSender(nativeDtmfSender);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_Logging__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_Logging__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.Logging __obj__ = new org.webrtc.Logging();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_AudioTrack__long", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_AudioTrack__long");
                }
            
                // args
                // jsonable arg
                long nativeTrack = (long) (int) ((Map<String, Object>) __args__).get("nativeTrack");
            
                // create target object
                org.webrtc.AudioTrack __obj__ = new org.webrtc.AudioTrack(nativeTrack);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_SoftwareVideoDecoderFactory__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_SoftwareVideoDecoderFactory__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.SoftwareVideoDecoderFactory __obj__ = new org.webrtc.SoftwareVideoDecoderFactory();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_MediaConstraints__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_MediaConstraints__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.MediaConstraints __obj__ = new org.webrtc.MediaConstraints();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_RtpTransceiver_RtpTransceiverInit__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_RtpTransceiver_RtpTransceiverInit__");
                }
            
                // args
            
            
                // create target object
                org.webrtc.RtpTransceiver.RtpTransceiverInit __obj__ = new org.webrtc.RtpTransceiver.RtpTransceiverInit();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_RtpTransceiver_RtpTransceiverInit__org_webrtc_RtpTransceiver_RtpTransceiverDirection", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_RtpTransceiver_RtpTransceiverInit__org_webrtc_RtpTransceiver_RtpTransceiverDirection");
                }
            
                // args
                // enum arg
                org.webrtc.RtpTransceiver.RtpTransceiverDirection direction = org.webrtc.RtpTransceiver.RtpTransceiverDirection.values()[(int) ((Map<String, Object>) __args__).get("direction")];
            
                // create target object
                org.webrtc.RtpTransceiver.RtpTransceiverInit __obj__ = new org.webrtc.RtpTransceiver.RtpTransceiverInit(direction);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_RtpTransceiver_RtpTransceiverInit__org_webrtc_RtpTransceiver_RtpTransceiverDirection__java_util_List_String_", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_RtpTransceiver_RtpTransceiverInit__org_webrtc_RtpTransceiver_RtpTransceiverDirection__java_util_List_String_");
                }
            
                // args
                // enum arg
                org.webrtc.RtpTransceiver.RtpTransceiverDirection direction = org.webrtc.RtpTransceiver.RtpTransceiverDirection.values()[(int) ((Map<String, Object>) __args__).get("direction")];
                // jsonable arg
                java.util.List<String> streamIds = (java.util.List<String>) ((Map<String, Object>) __args__).get("streamIds");
            
                // create target object
                org.webrtc.RtpTransceiver.RtpTransceiverInit __obj__ = new org.webrtc.RtpTransceiver.RtpTransceiverInit(direction, (ArrayList) streamIds);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_StatsReport_Value__String__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_StatsReport_Value__String__String");
                }
            
                // args
                // jsonable arg
                String name = (String) ((Map<String, Object>) __args__).get("name");
                // jsonable arg
                String value = (String) ((Map<String, Object>) __args__).get("value");
            
                // create target object
                org.webrtc.StatsReport.Value __obj__ = new org.webrtc.StatsReport.Value(name, value);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createorg_webrtc_TurnCustomizer__long", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: org_webrtc_TurnCustomizer__long");
                }
            
                // args
                // jsonable arg
                long nativeTurnCustomizer = (long) (int) ((Map<String, Object>) __args__).get("nativeTurnCustomizer");
            
                // create target object
                org.webrtc.TurnCustomizer __obj__ = new org.webrtc.TurnCustomizer(nativeTurnCustomizer);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createowt_conference_Subscription_VideoUpdateOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: owt_conference_Subscription_VideoUpdateOptions__");
                }
            
                // args
            
            
                // create target object
                owt.conference.Subscription.VideoUpdateOptions __obj__ = new owt.conference.Subscription.VideoUpdateOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createowt_conference_BuildConfig__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: owt_conference_BuildConfig__");
                }
            
                // args
            
            
                // create target object
                owt.conference.BuildConfig __obj__ = new owt.conference.BuildConfig();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createowt_p2p_BuildConfig__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: owt_p2p_BuildConfig__");
                }
            
                // args
            
            
                // create target object
                owt.p2p.BuildConfig __obj__ = new owt.p2p.BuildConfig();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createowt_base_MediaConstraints_AudioTrackConstraints__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: owt_base_MediaConstraints_AudioTrackConstraints__");
                }
            
                // args
            
            
                // create target object
                owt.base.MediaConstraints.AudioTrackConstraints __obj__ = new owt.base.MediaConstraints.AudioTrackConstraints();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createowt_base_AudioCodecParameters__owt_base_MediaCodecs_AudioCodec", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: owt_base_AudioCodecParameters__owt_base_MediaCodecs_AudioCodec");
                }
            
                // args
                // enum arg
                owt.base.MediaCodecs.AudioCodec codecName = owt.base.MediaCodecs.AudioCodec.values()[(int) ((Map<String, Object>) __args__).get("codecName")];
            
                // create target object
                owt.base.AudioCodecParameters __obj__ = new owt.base.AudioCodecParameters(codecName);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createowt_base_AudioCodecParameters__owt_base_MediaCodecs_AudioCodec__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: owt_base_AudioCodecParameters__owt_base_MediaCodecs_AudioCodec__int__int");
                }
            
                // args
                // enum arg
                owt.base.MediaCodecs.AudioCodec codecName = owt.base.MediaCodecs.AudioCodec.values()[(int) ((Map<String, Object>) __args__).get("codecName")];
                // jsonable arg
                int channelNum = (int) ((Map<String, Object>) __args__).get("channelNum");
                // jsonable arg
                int sampleRate = (int) ((Map<String, Object>) __args__).get("sampleRate");
            
                // create target object
                owt.base.AudioCodecParameters __obj__ = new owt.base.AudioCodecParameters(codecName, channelNum, sampleRate);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createowt_base_MediaCodecs__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: owt_base_MediaCodecs__");
                }
            
                // args
            
            
                // create target object
                owt.base.MediaCodecs __obj__ = new owt.base.MediaCodecs();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createowt_base_AudioEncodingParameters__owt_base_MediaCodecs_AudioCodec", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: owt_base_AudioEncodingParameters__owt_base_MediaCodecs_AudioCodec");
                }
            
                // args
                // enum arg
                owt.base.MediaCodecs.AudioCodec codec = owt.base.MediaCodecs.AudioCodec.values()[(int) ((Map<String, Object>) __args__).get("codec")];
            
                // create target object
                owt.base.AudioEncodingParameters __obj__ = new owt.base.AudioEncodingParameters(codec);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createowt_base_AudioEncodingParameters__owt_base_AudioCodecParameters", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: owt_base_AudioEncodingParameters__owt_base_AudioCodecParameters");
                }
            
                // args
                // ref arg
                Integer __audioCodecParametersRefId__ = (Integer) ((Map<String, Object>) __args__).get("audioCodecParameters");
                owt.base.AudioCodecParameters audioCodecParameters = __audioCodecParametersRefId__ != null ? (owt.base.AudioCodecParameters) getHEAP().get(__audioCodecParametersRefId__) : null;
            
                // create target object
                owt.base.AudioEncodingParameters __obj__ = new owt.base.AudioEncodingParameters(audioCodecParameters);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createowt_base_AudioEncodingParameters__owt_base_AudioCodecParameters__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: owt_base_AudioEncodingParameters__owt_base_AudioCodecParameters__int");
                }
            
                // args
                // ref arg
                Integer __audioCodecParametersRefId__ = (Integer) ((Map<String, Object>) __args__).get("audioCodecParameters");
                owt.base.AudioCodecParameters audioCodecParameters = __audioCodecParametersRefId__ != null ? (owt.base.AudioCodecParameters) getHEAP().get(__audioCodecParametersRefId__) : null;
                // jsonable arg
                int maxBitrateKbps = (int) ((Map<String, Object>) __args__).get("maxBitrateKbps");
            
                // create target object
                owt.base.AudioEncodingParameters __obj__ = new owt.base.AudioEncodingParameters(audioCodecParameters, maxBitrateKbps);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createowt_base_Stream_StreamSourceInfo__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: owt_base_Stream_StreamSourceInfo__");
                }
            
                // args
            
            
                // create target object
                owt.base.Stream.StreamSourceInfo __obj__ = new owt.base.Stream.StreamSourceInfo();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createowt_base_Stream_StreamSourceInfo__owt_base_Stream_StreamSourceInfo_VideoSourceInfo__owt_base_Stream_StreamSourceInfo_AudioSourceInfo", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: owt_base_Stream_StreamSourceInfo__owt_base_Stream_StreamSourceInfo_VideoSourceInfo__owt_base_Stream_StreamSourceInfo_AudioSourceInfo");
                }
            
                // args
                // enum arg
                owt.base.Stream.StreamSourceInfo.VideoSourceInfo videoSourceInfo = owt.base.Stream.StreamSourceInfo.VideoSourceInfo.values()[(int) ((Map<String, Object>) __args__).get("videoSourceInfo")];
                // enum arg
                owt.base.Stream.StreamSourceInfo.AudioSourceInfo audioSourceInfo = owt.base.Stream.StreamSourceInfo.AudioSourceInfo.values()[(int) ((Map<String, Object>) __args__).get("audioSourceInfo")];
            
                // create target object
                owt.base.Stream.StreamSourceInfo __obj__ = new owt.base.Stream.StreamSourceInfo(videoSourceInfo, audioSourceInfo);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
        }};
    }
}
