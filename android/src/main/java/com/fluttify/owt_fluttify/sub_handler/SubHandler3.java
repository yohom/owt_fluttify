//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package com.fluttify.owt_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import com.fluttify.owt_fluttify.OwtFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler3 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // method
            put("org.webrtc.PeerConnection::iceConnectionState", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::iceConnectionState(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.PeerConnection.IceConnectionState __result__;
                try {
                    __result__ = ref.iceConnectionState();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::iceGatheringState", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::iceGatheringState(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.PeerConnection.IceGatheringState __result__;
                try {
                    __result__ = ref.iceGatheringState();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::close", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::close(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.close();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::dispose", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::dispose(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.dispose();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::getNativePeerConnection", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::getNativePeerConnection(" + "" + ")");
                }
            
                // invoke native method
                long __result__;
                try {
                    __result__ = ref.getNativePeerConnection();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                long jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::createNativePeerConnectionObserver", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __observerRefId__ = (Integer) ((Map<String, Object>) __args__).get("observer");
                org.webrtc.PeerConnection.Observer observer = __observerRefId__ != null ? (org.webrtc.PeerConnection.Observer) getHEAP().get(__observerRefId__) : null;
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection::createNativePeerConnectionObserver(" + observer + ")");
                }
            
                // invoke native method
                long __result__;
                try {
                    __result__ = org.webrtc.PeerConnection.createNativePeerConnectionObserver(observer);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                long jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoEncoder::createNativeVideoEncoder", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoEncoder ref = (org.webrtc.VideoEncoder) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoEncoder@" + refId + "::createNativeVideoEncoder(" + "" + ")");
                }
            
                // invoke native method
                long __result__;
                try {
                    __result__ = ref.createNativeVideoEncoder();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                long jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoEncoder::isHardwareEncoder", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoEncoder ref = (org.webrtc.VideoEncoder) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoEncoder@" + refId + "::isHardwareEncoder(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.isHardwareEncoder();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoEncoder::initEncode", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                org.webrtc.VideoEncoder.Settings var1 = __var1RefId__ != null ? (org.webrtc.VideoEncoder.Settings) getHEAP().get(__var1RefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoEncoder ref = (org.webrtc.VideoEncoder) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoEncoder@" + refId + "::initEncode(" + var1 + ")");
                }
            
                // invoke native method
                org.webrtc.VideoCodecStatus __result__;
                try {
                    __result__ = ref.initEncode(var1, new org.webrtc.VideoEncoder.Callback() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.VideoEncoder::initEncode::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onEncodedFrame(org.webrtc.EncodedImage var1, org.webrtc.VideoEncoder.CodecSpecificInfo var2) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onEncodedFrame(" + var1 + var2 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
                            // ref arg
                            final Integer argvar2;
                            if (var2 != null) {
                                argvar2 = System.identityHashCode(var2);
                                getHEAP().put(argvar2, var2);
                            } else {
                                argvar2 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.VideoEncoder.Callback::onEncodedFrame",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                            put("var2", argvar2);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoEncoder::release", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoEncoder ref = (org.webrtc.VideoEncoder) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoEncoder@" + refId + "::release(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.VideoCodecStatus __result__;
                try {
                    __result__ = ref.release();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoEncoder::encode", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                org.webrtc.VideoFrame var1 = __var1RefId__ != null ? (org.webrtc.VideoFrame) getHEAP().get(__var1RefId__) : null;
                // ref arg
                Integer __var2RefId__ = (Integer) ((Map<String, Object>) __args__).get("var2");
                org.webrtc.VideoEncoder.EncodeInfo var2 = __var2RefId__ != null ? (org.webrtc.VideoEncoder.EncodeInfo) getHEAP().get(__var2RefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoEncoder ref = (org.webrtc.VideoEncoder) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoEncoder@" + refId + "::encode(" + var1 + var2 + ")");
                }
            
                // invoke native method
                org.webrtc.VideoCodecStatus __result__;
                try {
                    __result__ = ref.encode(var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoEncoder::setRateAllocation", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                org.webrtc.VideoEncoder.BitrateAllocation var1 = __var1RefId__ != null ? (org.webrtc.VideoEncoder.BitrateAllocation) getHEAP().get(__var1RefId__) : null;
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) __args__).get("var2");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoEncoder ref = (org.webrtc.VideoEncoder) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoEncoder@" + refId + "::setRateAllocation(" + var1 + var2 + ")");
                }
            
                // invoke native method
                org.webrtc.VideoCodecStatus __result__;
                try {
                    __result__ = ref.setRateAllocation(var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoEncoder::getScalingSettings", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoEncoder ref = (org.webrtc.VideoEncoder) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoEncoder@" + refId + "::getScalingSettings(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.VideoEncoder.ScalingSettings __result__;
                try {
                    __result__ = ref.getScalingSettings();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoEncoder::getImplementationName", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoEncoder ref = (org.webrtc.VideoEncoder) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoEncoder@" + refId + "::getImplementationName(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = ref.getImplementationName();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::shutdownInternalTracer", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory::shutdownInternalTracer(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.PeerConnectionFactory.shutdownInternalTracer();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::initializeFieldTrials", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String fieldTrialsInitString = (String) ((Map<String, Object>) __args__).get("fieldTrialsInitString");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory::initializeFieldTrials(" + fieldTrialsInitString + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.PeerConnectionFactory.initializeFieldTrials(fieldTrialsInitString);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::fieldTrialsFindFullName", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String name = (String) ((Map<String, Object>) __args__).get("name");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory::fieldTrialsFindFullName(" + name + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = org.webrtc.PeerConnectionFactory.fieldTrialsFindFullName(name);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::startInternalTracingCapture", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String tracingFilename = (String) ((Map<String, Object>) __args__).get("tracingFilename");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory::startInternalTracingCapture(" + tracingFilename + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.PeerConnectionFactory.startInternalTracingCapture(tracingFilename);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::stopInternalTracingCapture", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory::stopInternalTracingCapture(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.PeerConnectionFactory.stopInternalTracingCapture();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::createPeerConnection__org_webrtc_PeerConnection_RTCConfiguration__org_webrtc_MediaConstraints__org_webrtc_PeerConnection_Observer", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __rtcConfigRefId__ = (Integer) ((Map<String, Object>) __args__).get("rtcConfig");
                org.webrtc.PeerConnection.RTCConfiguration rtcConfig = __rtcConfigRefId__ != null ? (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(__rtcConfigRefId__) : null;
                // ref arg
                Integer __constraintsRefId__ = (Integer) ((Map<String, Object>) __args__).get("constraints");
                org.webrtc.MediaConstraints constraints = __constraintsRefId__ != null ? (org.webrtc.MediaConstraints) getHEAP().get(__constraintsRefId__) : null;
                // ref arg
                Integer __observerRefId__ = (Integer) ((Map<String, Object>) __args__).get("observer");
                org.webrtc.PeerConnection.Observer observer = __observerRefId__ != null ? (org.webrtc.PeerConnection.Observer) getHEAP().get(__observerRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory ref = (org.webrtc.PeerConnectionFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory@" + refId + "::createPeerConnection(" + rtcConfig + constraints + observer + ")");
                }
            
                // invoke native method
                org.webrtc.PeerConnection __result__;
                try {
                    __result__ = ref.createPeerConnection(rtcConfig, constraints, observer);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::createPeerConnection__List_org_webrtc_PeerConnection_IceServer___org_webrtc_MediaConstraints__org_webrtc_PeerConnection_Observer", (__args__, __methodResult__) -> {
                // args
                // list arg
                List<Integer> iceServersRefIdList = (List<Integer>) ((Map<String, Object>) __args__).get("iceServers");
                java.util.List<org.webrtc.PeerConnection.IceServer> iceServers = new ArrayList<>();
                for (int refId : iceServersRefIdList) {
                    ((ArrayList<org.webrtc.PeerConnection.IceServer>) iceServers).add((org.webrtc.PeerConnection.IceServer) getHEAP().get(refId));
                }
                // ref arg
                Integer __constraintsRefId__ = (Integer) ((Map<String, Object>) __args__).get("constraints");
                org.webrtc.MediaConstraints constraints = __constraintsRefId__ != null ? (org.webrtc.MediaConstraints) getHEAP().get(__constraintsRefId__) : null;
                // ref arg
                Integer __observerRefId__ = (Integer) ((Map<String, Object>) __args__).get("observer");
                org.webrtc.PeerConnection.Observer observer = __observerRefId__ != null ? (org.webrtc.PeerConnection.Observer) getHEAP().get(__observerRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory ref = (org.webrtc.PeerConnectionFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory@" + refId + "::createPeerConnection(" + iceServers + constraints + observer + ")");
                }
            
                // invoke native method
                org.webrtc.PeerConnection __result__;
                try {
                    __result__ = ref.createPeerConnection((ArrayList) iceServers, constraints, observer);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::createPeerConnection__List_org_webrtc_PeerConnection_IceServer___org_webrtc_PeerConnection_Observer", (__args__, __methodResult__) -> {
                // args
                // list arg
                List<Integer> iceServersRefIdList = (List<Integer>) ((Map<String, Object>) __args__).get("iceServers");
                java.util.List<org.webrtc.PeerConnection.IceServer> iceServers = new ArrayList<>();
                for (int refId : iceServersRefIdList) {
                    ((ArrayList<org.webrtc.PeerConnection.IceServer>) iceServers).add((org.webrtc.PeerConnection.IceServer) getHEAP().get(refId));
                }
                // ref arg
                Integer __observerRefId__ = (Integer) ((Map<String, Object>) __args__).get("observer");
                org.webrtc.PeerConnection.Observer observer = __observerRefId__ != null ? (org.webrtc.PeerConnection.Observer) getHEAP().get(__observerRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory ref = (org.webrtc.PeerConnectionFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory@" + refId + "::createPeerConnection(" + iceServers + observer + ")");
                }
            
                // invoke native method
                org.webrtc.PeerConnection __result__;
                try {
                    __result__ = ref.createPeerConnection((ArrayList) iceServers, observer);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::createPeerConnection__org_webrtc_PeerConnection_RTCConfiguration__org_webrtc_PeerConnection_Observer", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __rtcConfigRefId__ = (Integer) ((Map<String, Object>) __args__).get("rtcConfig");
                org.webrtc.PeerConnection.RTCConfiguration rtcConfig = __rtcConfigRefId__ != null ? (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(__rtcConfigRefId__) : null;
                // ref arg
                Integer __observerRefId__ = (Integer) ((Map<String, Object>) __args__).get("observer");
                org.webrtc.PeerConnection.Observer observer = __observerRefId__ != null ? (org.webrtc.PeerConnection.Observer) getHEAP().get(__observerRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory ref = (org.webrtc.PeerConnectionFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory@" + refId + "::createPeerConnection(" + rtcConfig + observer + ")");
                }
            
                // invoke native method
                org.webrtc.PeerConnection __result__;
                try {
                    __result__ = ref.createPeerConnection(rtcConfig, observer);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::createPeerConnection__org_webrtc_PeerConnection_RTCConfiguration__org_webrtc_PeerConnectionDependencies", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __rtcConfigRefId__ = (Integer) ((Map<String, Object>) __args__).get("rtcConfig");
                org.webrtc.PeerConnection.RTCConfiguration rtcConfig = __rtcConfigRefId__ != null ? (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(__rtcConfigRefId__) : null;
                // ref arg
                Integer __dependenciesRefId__ = (Integer) ((Map<String, Object>) __args__).get("dependencies");
                org.webrtc.PeerConnectionDependencies dependencies = __dependenciesRefId__ != null ? (org.webrtc.PeerConnectionDependencies) getHEAP().get(__dependenciesRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory ref = (org.webrtc.PeerConnectionFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory@" + refId + "::createPeerConnection(" + rtcConfig + dependencies + ")");
                }
            
                // invoke native method
                org.webrtc.PeerConnection __result__;
                try {
                    __result__ = ref.createPeerConnection(rtcConfig, dependencies);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::createLocalMediaStream", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String label = (String) ((Map<String, Object>) __args__).get("label");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory ref = (org.webrtc.PeerConnectionFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory@" + refId + "::createLocalMediaStream(" + label + ")");
                }
            
                // invoke native method
                org.webrtc.MediaStream __result__;
                try {
                    __result__ = ref.createLocalMediaStream(label);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::createVideoSource", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean isScreencast = (boolean) ((Map<String, Object>) __args__).get("isScreencast");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory ref = (org.webrtc.PeerConnectionFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory@" + refId + "::createVideoSource(" + isScreencast + ")");
                }
            
                // invoke native method
                org.webrtc.VideoSource __result__;
                try {
                    __result__ = ref.createVideoSource(isScreencast);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::createVideoTrack", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String id = (String) ((Map<String, Object>) __args__).get("id");
                // ref arg
                Integer __sourceRefId__ = (Integer) ((Map<String, Object>) __args__).get("source");
                org.webrtc.VideoSource source = __sourceRefId__ != null ? (org.webrtc.VideoSource) getHEAP().get(__sourceRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory ref = (org.webrtc.PeerConnectionFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory@" + refId + "::createVideoTrack(" + id + source + ")");
                }
            
                // invoke native method
                org.webrtc.VideoTrack __result__;
                try {
                    __result__ = ref.createVideoTrack(id, source);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::createAudioSource", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __constraintsRefId__ = (Integer) ((Map<String, Object>) __args__).get("constraints");
                org.webrtc.MediaConstraints constraints = __constraintsRefId__ != null ? (org.webrtc.MediaConstraints) getHEAP().get(__constraintsRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory ref = (org.webrtc.PeerConnectionFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory@" + refId + "::createAudioSource(" + constraints + ")");
                }
            
                // invoke native method
                org.webrtc.AudioSource __result__;
                try {
                    __result__ = ref.createAudioSource(constraints);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::createAudioTrack", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String id = (String) ((Map<String, Object>) __args__).get("id");
                // ref arg
                Integer __sourceRefId__ = (Integer) ((Map<String, Object>) __args__).get("source");
                org.webrtc.AudioSource source = __sourceRefId__ != null ? (org.webrtc.AudioSource) getHEAP().get(__sourceRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory ref = (org.webrtc.PeerConnectionFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory@" + refId + "::createAudioTrack(" + id + source + ")");
                }
            
                // invoke native method
                org.webrtc.AudioTrack __result__;
                try {
                    __result__ = ref.createAudioTrack(id, source);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::startAecDump", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int file_descriptor = (int) ((Map<String, Object>) __args__).get("file_descriptor");
                // jsonable arg
                int filesize_limit_bytes = (int) ((Map<String, Object>) __args__).get("filesize_limit_bytes");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory ref = (org.webrtc.PeerConnectionFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory@" + refId + "::startAecDump(" + file_descriptor + filesize_limit_bytes + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.startAecDump(file_descriptor, filesize_limit_bytes);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::stopAecDump", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory ref = (org.webrtc.PeerConnectionFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory@" + refId + "::stopAecDump(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.stopAecDump();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::dispose", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory ref = (org.webrtc.PeerConnectionFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory@" + refId + "::dispose(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.dispose();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::threadsCallbacks", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory ref = (org.webrtc.PeerConnectionFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory@" + refId + "::threadsCallbacks(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.threadsCallbacks();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::getNativePeerConnectionFactory", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory ref = (org.webrtc.PeerConnectionFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory@" + refId + "::getNativePeerConnectionFactory(" + "" + ")");
                }
            
                // invoke native method
                long __result__;
                try {
                    __result__ = ref.getNativePeerConnectionFactory();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                long jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::getNativeOwnedFactoryAndThreads", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnectionFactory ref = (org.webrtc.PeerConnectionFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory@" + refId + "::getNativeOwnedFactoryAndThreads(" + "" + ")");
                }
            
                // invoke native method
                long __result__;
                try {
                    __result__ = ref.getNativeOwnedFactoryAndThreads();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                long jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnectionFactory::printStackTraces", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnectionFactory::printStackTraces(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.PeerConnectionFactory.printStackTraces();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoEncoderFactory::createEncoder", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                org.webrtc.VideoCodecInfo var1 = __var1RefId__ != null ? (org.webrtc.VideoCodecInfo) getHEAP().get(__var1RefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoEncoderFactory ref = (org.webrtc.VideoEncoderFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoEncoderFactory@" + refId + "::createEncoder(" + var1 + ")");
                }
            
                // invoke native method
                org.webrtc.VideoEncoder __result__;
                try {
                    __result__ = ref.createEncoder(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.BuildInfo::getDevice", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.BuildInfo::getDevice(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = org.webrtc.voiceengine.BuildInfo.getDevice();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.BuildInfo::getDeviceModel", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.BuildInfo::getDeviceModel(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = org.webrtc.voiceengine.BuildInfo.getDeviceModel();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.BuildInfo::getProduct", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.BuildInfo::getProduct(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = org.webrtc.voiceengine.BuildInfo.getProduct();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.BuildInfo::getBrand", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.BuildInfo::getBrand(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = org.webrtc.voiceengine.BuildInfo.getBrand();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.BuildInfo::getDeviceManufacturer", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.BuildInfo::getDeviceManufacturer(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = org.webrtc.voiceengine.BuildInfo.getDeviceManufacturer();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.BuildInfo::getAndroidBuildId", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.BuildInfo::getAndroidBuildId(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = org.webrtc.voiceengine.BuildInfo.getAndroidBuildId();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.BuildInfo::getBuildType", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.BuildInfo::getBuildType(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = org.webrtc.voiceengine.BuildInfo.getBuildType();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.BuildInfo::getBuildRelease", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.BuildInfo::getBuildRelease(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = org.webrtc.voiceengine.BuildInfo.getBuildRelease();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.BuildInfo::getSdkVersion", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.BuildInfo::getSdkVersion(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = org.webrtc.voiceengine.BuildInfo.getSdkVersion();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioTrack::setAudioTrackUsageAttribute", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int usage = (int) ((Map<String, Object>) __args__).get("usage");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioTrack::setAudioTrackUsageAttribute(" + usage + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.voiceengine.WebRtcAudioTrack.setAudioTrackUsageAttribute(usage);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioTrack::setErrorCallback__org_webrtc_voiceengine_WebRtcAudioTrack_WebRtcAudioTrackErrorCallback", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioTrack::setErrorCallback(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.voiceengine.WebRtcAudioTrack.setErrorCallback(new org.webrtc.voiceengine.WebRtcAudioTrack.WebRtcAudioTrackErrorCallback() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.voiceengine.WebRtcAudioTrack::setErrorCallback__org_webrtc_voiceengine_WebRtcAudioTrack_WebRtcAudioTrackErrorCallback::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onWebRtcAudioTrackInitError(String var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onWebRtcAudioTrackInitError(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            String argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.voiceengine.WebRtcAudioTrack.WebRtcAudioTrackErrorCallback::onWebRtcAudioTrackInitError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onWebRtcAudioTrackStartError(String var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onWebRtcAudioTrackStartError(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            String argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.voiceengine.WebRtcAudioTrack.WebRtcAudioTrackErrorCallback::onWebRtcAudioTrackStartError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onWebRtcAudioTrackError(String var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onWebRtcAudioTrackError(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            String argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.voiceengine.WebRtcAudioTrack.WebRtcAudioTrackErrorCallback::onWebRtcAudioTrackError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioTrack::setErrorCallback__org_webrtc_voiceengine_WebRtcAudioTrack_ErrorCallback", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioTrack::setErrorCallback(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.voiceengine.WebRtcAudioTrack.setErrorCallback(new org.webrtc.voiceengine.WebRtcAudioTrack.ErrorCallback() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.voiceengine.WebRtcAudioTrack::setErrorCallback__org_webrtc_voiceengine_WebRtcAudioTrack_ErrorCallback::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onWebRtcAudioTrackInitError(String var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onWebRtcAudioTrackInitError(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            String argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.voiceengine.WebRtcAudioTrack.ErrorCallback::onWebRtcAudioTrackInitError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onWebRtcAudioTrackStartError(org.webrtc.voiceengine.WebRtcAudioTrack.AudioTrackStartErrorCode var1, String var2) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onWebRtcAudioTrackStartError(" + var1 + var2 + ")");
                            }
            
                            // convert to jsonable data
                            // enum arg
                            int argvar1 = var1.ordinal();
                            // jsonable arg
                            String argvar2 = var2;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.voiceengine.WebRtcAudioTrack.ErrorCallback::onWebRtcAudioTrackStartError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                            put("var2", argvar2);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onWebRtcAudioTrackError(String var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onWebRtcAudioTrackError(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            String argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.voiceengine.WebRtcAudioTrack.ErrorCallback::onWebRtcAudioTrackError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioTrack::setSpeakerMute", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean mute = (boolean) ((Map<String, Object>) __args__).get("mute");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioTrack::setSpeakerMute(" + mute + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.voiceengine.WebRtcAudioTrack.setSpeakerMute(mute);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioEffects::isAcousticEchoCancelerSupported", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioEffects::isAcousticEchoCancelerSupported(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioEffects.isAcousticEchoCancelerSupported();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioEffects::isNoiseSuppressorSupported", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioEffects::isNoiseSuppressorSupported(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioEffects.isNoiseSuppressorSupported();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioEffects::isAcousticEchoCancelerBlacklisted", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioEffects::isAcousticEchoCancelerBlacklisted(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioEffects.isAcousticEchoCancelerBlacklisted();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioEffects::isNoiseSuppressorBlacklisted", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioEffects::isNoiseSuppressorBlacklisted(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioEffects.isNoiseSuppressorBlacklisted();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioEffects::canUseAcousticEchoCanceler", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioEffects::canUseAcousticEchoCanceler(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioEffects.canUseAcousticEchoCanceler();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioEffects::canUseNoiseSuppressor", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioEffects::canUseNoiseSuppressor(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioEffects.canUseNoiseSuppressor();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioEffects::create", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioEffects::create(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.voiceengine.WebRtcAudioEffects __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioEffects.create();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioEffects::setAEC", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean enable = (boolean) ((Map<String, Object>) __args__).get("enable");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.voiceengine.WebRtcAudioEffects ref = (org.webrtc.voiceengine.WebRtcAudioEffects) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioEffects@" + refId + "::setAEC(" + enable + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.setAEC(enable);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioEffects::setNS", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean enable = (boolean) ((Map<String, Object>) __args__).get("enable");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.voiceengine.WebRtcAudioEffects ref = (org.webrtc.voiceengine.WebRtcAudioEffects) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioEffects@" + refId + "::setNS(" + enable + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.setNS(enable);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioEffects::enable", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int audioSession = (int) ((Map<String, Object>) __args__).get("audioSession");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.voiceengine.WebRtcAudioEffects ref = (org.webrtc.voiceengine.WebRtcAudioEffects) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioEffects@" + refId + "::enable(" + audioSession + ")");
                }
            
                // invoke native method
                try {
                    ref.enable(audioSession);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioEffects::release", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.voiceengine.WebRtcAudioEffects ref = (org.webrtc.voiceengine.WebRtcAudioEffects) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioEffects@" + refId + "::release(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.release();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioRecord::setErrorCallback", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioRecord::setErrorCallback(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.voiceengine.WebRtcAudioRecord.setErrorCallback(new org.webrtc.voiceengine.WebRtcAudioRecord.WebRtcAudioRecordErrorCallback() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.voiceengine.WebRtcAudioRecord::setErrorCallback::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onWebRtcAudioRecordInitError(String var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onWebRtcAudioRecordInitError(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            String argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.voiceengine.WebRtcAudioRecord.WebRtcAudioRecordErrorCallback::onWebRtcAudioRecordInitError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onWebRtcAudioRecordStartError(org.webrtc.voiceengine.WebRtcAudioRecord.AudioRecordStartErrorCode var1, String var2) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onWebRtcAudioRecordStartError(" + var1 + var2 + ")");
                            }
            
                            // convert to jsonable data
                            // enum arg
                            int argvar1 = var1.ordinal();
                            // jsonable arg
                            String argvar2 = var2;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.voiceengine.WebRtcAudioRecord.WebRtcAudioRecordErrorCallback::onWebRtcAudioRecordStartError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                            put("var2", argvar2);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onWebRtcAudioRecordError(String var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onWebRtcAudioRecordError(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            String argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.voiceengine.WebRtcAudioRecord.WebRtcAudioRecordErrorCallback::onWebRtcAudioRecordError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioRecord::setOnAudioSamplesReady", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioRecord::setOnAudioSamplesReady(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.voiceengine.WebRtcAudioRecord.setOnAudioSamplesReady(new org.webrtc.voiceengine.WebRtcAudioRecord.WebRtcAudioRecordSamplesReadyCallback() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.voiceengine.WebRtcAudioRecord::setOnAudioSamplesReady::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onWebRtcAudioRecordSamplesReady(org.webrtc.voiceengine.WebRtcAudioRecord.AudioSamples var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onWebRtcAudioRecordSamplesReady(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.voiceengine.WebRtcAudioRecord.WebRtcAudioRecordSamplesReadyCallback::onWebRtcAudioRecordSamplesReady",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioRecord::setAudioSource", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int source = (int) ((Map<String, Object>) __args__).get("source");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioRecord::setAudioSource(" + source + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.voiceengine.WebRtcAudioRecord.setAudioSource(source);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioRecord::setMicrophoneMute", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean mute = (boolean) ((Map<String, Object>) __args__).get("mute");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioRecord::setMicrophoneMute(" + mute + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.voiceengine.WebRtcAudioRecord.setMicrophoneMute(mute);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::setWebRtcBasedAcousticEchoCanceler", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean enable = (boolean) ((Map<String, Object>) __args__).get("enable");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::setWebRtcBasedAcousticEchoCanceler(" + enable + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.voiceengine.WebRtcAudioUtils.setWebRtcBasedAcousticEchoCanceler(enable);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::setWebRtcBasedNoiseSuppressor", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean enable = (boolean) ((Map<String, Object>) __args__).get("enable");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::setWebRtcBasedNoiseSuppressor(" + enable + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.voiceengine.WebRtcAudioUtils.setWebRtcBasedNoiseSuppressor(enable);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::setWebRtcBasedAutomaticGainControl", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean enable = (boolean) ((Map<String, Object>) __args__).get("enable");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::setWebRtcBasedAutomaticGainControl(" + enable + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.voiceengine.WebRtcAudioUtils.setWebRtcBasedAutomaticGainControl(enable);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::useWebRtcBasedAcousticEchoCanceler", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::useWebRtcBasedAcousticEchoCanceler(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.useWebRtcBasedAcousticEchoCanceler();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::useWebRtcBasedNoiseSuppressor", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::useWebRtcBasedNoiseSuppressor(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.useWebRtcBasedNoiseSuppressor();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::useWebRtcBasedAutomaticGainControl", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::useWebRtcBasedAutomaticGainControl(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.useWebRtcBasedAutomaticGainControl();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::isAcousticEchoCancelerSupported", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::isAcousticEchoCancelerSupported(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.isAcousticEchoCancelerSupported();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::isNoiseSuppressorSupported", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::isNoiseSuppressorSupported(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.isNoiseSuppressorSupported();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::isAutomaticGainControlSupported", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::isAutomaticGainControlSupported(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.isAutomaticGainControlSupported();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::setDefaultSampleRateHz", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int sampleRateHz = (int) ((Map<String, Object>) __args__).get("sampleRateHz");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::setDefaultSampleRateHz(" + sampleRateHz + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.voiceengine.WebRtcAudioUtils.setDefaultSampleRateHz(sampleRateHz);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::isDefaultSampleRateOverridden", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::isDefaultSampleRateOverridden(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.isDefaultSampleRateOverridden();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::getDefaultSampleRateHz", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::getDefaultSampleRateHz(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.getDefaultSampleRateHz();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::getBlackListedModelsForAecUsage", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::getBlackListedModelsForAecUsage(" + "" + ")");
                }
            
                // invoke native method
                java.util.List<String> __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.getBlackListedModelsForAecUsage();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                java.util.List<String> jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::getBlackListedModelsForNsUsage", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::getBlackListedModelsForNsUsage(" + "" + ")");
                }
            
                // invoke native method
                java.util.List<String> __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.getBlackListedModelsForNsUsage();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                java.util.List<String> jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::runningOnJellyBeanMR1OrHigher", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::runningOnJellyBeanMR1OrHigher(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.runningOnJellyBeanMR1OrHigher();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::runningOnJellyBeanMR2OrHigher", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::runningOnJellyBeanMR2OrHigher(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.runningOnJellyBeanMR2OrHigher();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::runningOnLollipopOrHigher", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::runningOnLollipopOrHigher(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.runningOnLollipopOrHigher();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::runningOnMarshmallowOrHigher", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::runningOnMarshmallowOrHigher(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.runningOnMarshmallowOrHigher();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::runningOnNougatOrHigher", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::runningOnNougatOrHigher(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.runningOnNougatOrHigher();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::runningOnOreoOrHigher", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::runningOnOreoOrHigher(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.runningOnOreoOrHigher();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::runningOnOreoMR1OrHigher", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::runningOnOreoMR1OrHigher(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.runningOnOreoMR1OrHigher();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::getThreadInfo", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::getThreadInfo(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.getThreadInfo();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::runningOnEmulator", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::runningOnEmulator(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.runningOnEmulator();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioUtils::deviceIsBlacklistedForOpenSLESUsage", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioUtils::deviceIsBlacklistedForOpenSLESUsage(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioUtils.deviceIsBlacklistedForOpenSLESUsage();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioManager::setBlacklistDeviceForOpenSLESUsage", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean enable = (boolean) ((Map<String, Object>) __args__).get("enable");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioManager::setBlacklistDeviceForOpenSLESUsage(" + enable + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.voiceengine.WebRtcAudioManager.setBlacklistDeviceForOpenSLESUsage(enable);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioManager::setStereoOutput", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean enable = (boolean) ((Map<String, Object>) __args__).get("enable");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioManager::setStereoOutput(" + enable + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.voiceengine.WebRtcAudioManager.setStereoOutput(enable);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioManager::setStereoInput", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean enable = (boolean) ((Map<String, Object>) __args__).get("enable");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioManager::setStereoInput(" + enable + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.voiceengine.WebRtcAudioManager.setStereoInput(enable);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioManager::getStereoOutput", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioManager::getStereoOutput(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioManager.getStereoOutput();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioManager::getStereoInput", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioManager::getStereoInput(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.voiceengine.WebRtcAudioManager.getStereoInput();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.voiceengine.WebRtcAudioManager::isLowLatencyInputSupported", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.voiceengine.WebRtcAudioManager ref = (org.webrtc.voiceengine.WebRtcAudioManager) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.voiceengine.WebRtcAudioManager@" + refId + "::isLowLatencyInputSupported(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.isLowLatencyInputSupported();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.Camera2Enumerator::isSupported", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __contextRefId__ = (Integer) ((Map<String, Object>) __args__).get("context");
                android.content.Context context = __contextRefId__ != null ? (android.content.Context) getHEAP().get(__contextRefId__) : null;
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.Camera2Enumerator::isSupported(" + context + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.Camera2Enumerator.isSupported(context);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection.IntervalRange::getMin", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.IntervalRange ref = (org.webrtc.PeerConnection.IntervalRange) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection.IntervalRange@" + refId + "::getMin(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getMin();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection.IntervalRange::getMax", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.IntervalRange ref = (org.webrtc.PeerConnection.IntervalRange) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection.IntervalRange@" + refId + "::getMax(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getMax();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.Metrics.HistogramInfo::addSample", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int value = (int) ((Map<String, Object>) __args__).get("value");
                // jsonable arg
                int numEvents = (int) ((Map<String, Object>) __args__).get("numEvents");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.Metrics.HistogramInfo ref = (org.webrtc.Metrics.HistogramInfo) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.Metrics.HistogramInfo@" + refId + "::addSample(" + value + numEvents + ")");
                }
            
                // invoke native method
                try {
                    ref.addSample(value, numEvents);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.YuvConverter::convert", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __inputTextureBufferRefId__ = (Integer) ((Map<String, Object>) __args__).get("inputTextureBuffer");
                org.webrtc.VideoFrame.TextureBuffer inputTextureBuffer = __inputTextureBufferRefId__ != null ? (org.webrtc.VideoFrame.TextureBuffer) getHEAP().get(__inputTextureBufferRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.YuvConverter ref = (org.webrtc.YuvConverter) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.YuvConverter@" + refId + "::convert(" + inputTextureBuffer + ")");
                }
            
                // invoke native method
                org.webrtc.VideoFrame.I420Buffer __result__;
                try {
                    __result__ = ref.convert(inputTextureBuffer);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.YuvConverter::release", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.YuvConverter ref = (org.webrtc.YuvConverter) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.YuvConverter@" + refId + "::release(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.release();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RendererCommon::getLayoutMatrix", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean mirror = (boolean) ((Map<String, Object>) __args__).get("mirror");
                // jsonable arg
                Double videoAspectRatio = (Double) ((Map<String, Object>) __args__).get("videoAspectRatio");
                // jsonable arg
                Double displayAspectRatio = (Double) ((Map<String, Object>) __args__).get("displayAspectRatio");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RendererCommon::getLayoutMatrix(" + mirror + videoAspectRatio + displayAspectRatio + ")");
                }
            
                // invoke native method
                float[] __result__;
                try {
                    __result__ = org.webrtc.RendererCommon.getLayoutMatrix(mirror, new Double(videoAspectRatio).floatValue(), new Double(displayAspectRatio).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                float[] jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RendererCommon::getDisplaySize__org_webrtc_RendererCommon_ScalingType__double__int__int", (__args__, __methodResult__) -> {
                // args
                // enum arg
                org.webrtc.RendererCommon.ScalingType scalingType = org.webrtc.RendererCommon.ScalingType.values()[(int) ((Map<String, Object>) __args__).get("scalingType")];
                // jsonable arg
                Double videoAspectRatio = (Double) ((Map<String, Object>) __args__).get("videoAspectRatio");
                // jsonable arg
                int maxDisplayWidth = (int) ((Map<String, Object>) __args__).get("maxDisplayWidth");
                // jsonable arg
                int maxDisplayHeight = (int) ((Map<String, Object>) __args__).get("maxDisplayHeight");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RendererCommon::getDisplaySize(" + scalingType + videoAspectRatio + maxDisplayWidth + maxDisplayHeight + ")");
                }
            
                // invoke native method
                android.graphics.Point __result__;
                try {
                    __result__ = org.webrtc.RendererCommon.getDisplaySize(scalingType, new Double(videoAspectRatio).floatValue(), maxDisplayWidth, maxDisplayHeight);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrame.I420Buffer::getStrideY", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrame.I420Buffer ref = (org.webrtc.VideoFrame.I420Buffer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrame.I420Buffer@" + refId + "::getStrideY(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getStrideY();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrame.I420Buffer::getStrideU", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrame.I420Buffer ref = (org.webrtc.VideoFrame.I420Buffer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrame.I420Buffer@" + refId + "::getStrideU(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getStrideU();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrame.I420Buffer::getStrideV", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrame.I420Buffer ref = (org.webrtc.VideoFrame.I420Buffer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrame.I420Buffer@" + refId + "::getStrideV(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getStrideV();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SdpObserver::onCreateSuccess", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                org.webrtc.SessionDescription var1 = __var1RefId__ != null ? (org.webrtc.SessionDescription) getHEAP().get(__var1RefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SdpObserver ref = (org.webrtc.SdpObserver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SdpObserver@" + refId + "::onCreateSuccess(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onCreateSuccess(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SdpObserver::onSetSuccess", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SdpObserver ref = (org.webrtc.SdpObserver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SdpObserver@" + refId + "::onSetSuccess(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.onSetSuccess();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SdpObserver::onCreateFailure", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SdpObserver ref = (org.webrtc.SdpObserver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SdpObserver@" + refId + "::onCreateFailure(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onCreateFailure(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SdpObserver::onSetFailure", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SdpObserver ref = (org.webrtc.SdpObserver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SdpObserver@" + refId + "::onSetFailure(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onSetFailure(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoDecoder::createFactory", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoDecoder::createFactory(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.VideoDecoderFactory __result__;
                try {
                    __result__ = org.webrtc.MediaCodecVideoDecoder.createFactory();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoDecoder::setEglContext", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __eglContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("eglContext");
                org.webrtc.EglBase.Context eglContext = __eglContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__eglContextRefId__) : null;
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoDecoder::setEglContext(" + eglContext + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.MediaCodecVideoDecoder.setEglContext(eglContext);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoDecoder::disposeEglContext", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoDecoder::disposeEglContext(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.MediaCodecVideoDecoder.disposeEglContext();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoDecoder::setErrorCallback", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoDecoder::setErrorCallback(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.MediaCodecVideoDecoder.setErrorCallback(new org.webrtc.MediaCodecVideoDecoder.MediaCodecVideoDecoderErrorCallback() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.MediaCodecVideoDecoder::setErrorCallback::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onMediaCodecVideoDecoderCriticalError(int var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onMediaCodecVideoDecoderCriticalError(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            int argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.MediaCodecVideoDecoder.MediaCodecVideoDecoderErrorCallback::onMediaCodecVideoDecoderCriticalError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoDecoder::disableVp8HwCodec", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoDecoder::disableVp8HwCodec(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.MediaCodecVideoDecoder.disableVp8HwCodec();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoDecoder::disableVp9HwCodec", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoDecoder::disableVp9HwCodec(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.MediaCodecVideoDecoder.disableVp9HwCodec();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoDecoder::disableH264HwCodec", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoDecoder::disableH264HwCodec(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.MediaCodecVideoDecoder.disableH264HwCodec();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoDecoder::disableH265HwCodec", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoDecoder::disableH265HwCodec(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.MediaCodecVideoDecoder.disableH265HwCodec();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoDecoder::isVp8HwSupported", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoDecoder::isVp8HwSupported(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.MediaCodecVideoDecoder.isVp8HwSupported();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoDecoder::isVp9HwSupported", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoDecoder::isVp9HwSupported(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.MediaCodecVideoDecoder.isVp9HwSupported();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoDecoder::isH264HwSupported", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoDecoder::isH264HwSupported(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.MediaCodecVideoDecoder.isH264HwSupported();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoDecoder::isH264HighProfileHwSupported", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoDecoder::isH264HighProfileHwSupported(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.MediaCodecVideoDecoder.isH264HighProfileHwSupported();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoDecoder::printStackTrace", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoDecoder::printStackTrace(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.MediaCodecVideoDecoder.printStackTrace();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaStreamTrack::kind", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaStreamTrack ref = (org.webrtc.MediaStreamTrack) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaStreamTrack@" + refId + "::kind(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = ref.kind();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaStreamTrack::enabled", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaStreamTrack ref = (org.webrtc.MediaStreamTrack) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaStreamTrack@" + refId + "::enabled(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.enabled();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaStreamTrack::setEnabled", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean enable = (boolean) ((Map<String, Object>) __args__).get("enable");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaStreamTrack ref = (org.webrtc.MediaStreamTrack) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaStreamTrack@" + refId + "::setEnabled(" + enable + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.setEnabled(enable);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaStreamTrack::state", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaStreamTrack ref = (org.webrtc.MediaStreamTrack) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaStreamTrack@" + refId + "::state(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.MediaStreamTrack.State __result__;
                try {
                    __result__ = ref.state();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaStreamTrack::dispose", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaStreamTrack ref = (org.webrtc.MediaStreamTrack) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaStreamTrack@" + refId + "::dispose(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.dispose();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.audio.AudioDeviceModule::getNativeAudioDeviceModulePointer", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.audio.AudioDeviceModule ref = (org.webrtc.audio.AudioDeviceModule) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.audio.AudioDeviceModule@" + refId + "::getNativeAudioDeviceModulePointer(" + "" + ")");
                }
            
                // invoke native method
                long __result__;
                try {
                    __result__ = ref.getNativeAudioDeviceModulePointer();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                long jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.audio.AudioDeviceModule::release", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.audio.AudioDeviceModule ref = (org.webrtc.audio.AudioDeviceModule) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.audio.AudioDeviceModule@" + refId + "::release(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.release();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.audio.AudioDeviceModule::setSpeakerMute", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.audio.AudioDeviceModule ref = (org.webrtc.audio.AudioDeviceModule) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.audio.AudioDeviceModule@" + refId + "::setSpeakerMute(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setSpeakerMute(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.audio.AudioDeviceModule::setMicrophoneMute", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.audio.AudioDeviceModule ref = (org.webrtc.audio.AudioDeviceModule) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.audio.AudioDeviceModule@" + refId + "::setMicrophoneMute(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.setMicrophoneMute(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.audio.JavaAudioDeviceModule.AudioSamples::getAudioFormat", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.audio.JavaAudioDeviceModule.AudioSamples ref = (org.webrtc.audio.JavaAudioDeviceModule.AudioSamples) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.audio.JavaAudioDeviceModule.AudioSamples@" + refId + "::getAudioFormat(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getAudioFormat();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.audio.JavaAudioDeviceModule.AudioSamples::getChannelCount", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.audio.JavaAudioDeviceModule.AudioSamples ref = (org.webrtc.audio.JavaAudioDeviceModule.AudioSamples) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.audio.JavaAudioDeviceModule.AudioSamples@" + refId + "::getChannelCount(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getChannelCount();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.audio.JavaAudioDeviceModule.AudioSamples::getSampleRate", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.audio.JavaAudioDeviceModule.AudioSamples ref = (org.webrtc.audio.JavaAudioDeviceModule.AudioSamples) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.audio.JavaAudioDeviceModule.AudioSamples@" + refId + "::getSampleRate(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getSampleRate();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.audio.JavaAudioDeviceModule.AudioSamples::getData", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.audio.JavaAudioDeviceModule.AudioSamples ref = (org.webrtc.audio.JavaAudioDeviceModule.AudioSamples) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.audio.JavaAudioDeviceModule.AudioSamples@" + refId + "::getData(" + "" + ")");
                }
            
                // invoke native method
                byte[] __result__;
                try {
                    __result__ = ref.getData();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                byte[] jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.audio.JavaAudioDeviceModule::isBuiltInAcousticEchoCancelerSupported", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.audio.JavaAudioDeviceModule::isBuiltInAcousticEchoCancelerSupported(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.audio.JavaAudioDeviceModule.isBuiltInAcousticEchoCancelerSupported();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.audio.JavaAudioDeviceModule::isBuiltInNoiseSuppressorSupported", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.audio.JavaAudioDeviceModule::isBuiltInNoiseSuppressorSupported(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.audio.JavaAudioDeviceModule.isBuiltInNoiseSuppressorSupported();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RTCStats::getTimestampUs", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RTCStats ref = (org.webrtc.RTCStats) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RTCStats@" + refId + "::getTimestampUs(" + "" + ")");
                }
            
                // invoke native method
                double __result__;
                try {
                    __result__ = ref.getTimestampUs();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                double jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RTCStats::getType", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RTCStats ref = (org.webrtc.RTCStats) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RTCStats@" + refId + "::getType(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = ref.getType();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RTCStats::getId", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RTCStats ref = (org.webrtc.RTCStats) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RTCStats@" + refId + "::getId(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = ref.getId();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RTCStats::getMembers", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RTCStats ref = (org.webrtc.RTCStats) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RTCStats@" + refId + "::getMembers(" + "" + ")");
                }
            
                // invoke native method
                java.util.Map<String,java.lang.Object> __result__;
                try {
                    __result__ = ref.getMembers();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                java.util.Map<String,java.lang.Object> jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoSource::adaptOutputFormat", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int width = (int) ((Map<String, Object>) __args__).get("width");
                // jsonable arg
                int height = (int) ((Map<String, Object>) __args__).get("height");
                // jsonable arg
                int fps = (int) ((Map<String, Object>) __args__).get("fps");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoSource ref = (org.webrtc.VideoSource) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoSource@" + refId + "::adaptOutputFormat(" + width + height + fps + ")");
                }
            
                // invoke native method
                try {
                    ref.adaptOutputFormat(width, height, fps);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoCapturer::initialize", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                org.webrtc.SurfaceTextureHelper var1 = __var1RefId__ != null ? (org.webrtc.SurfaceTextureHelper) getHEAP().get(__var1RefId__) : null;
                // ref arg
                Integer __var2RefId__ = (Integer) ((Map<String, Object>) __args__).get("var2");
                android.content.Context var2 = __var2RefId__ != null ? (android.content.Context) getHEAP().get(__var2RefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoCapturer ref = (org.webrtc.VideoCapturer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoCapturer@" + refId + "::initialize(" + var1 + var2 + ")");
                }
            
                // invoke native method
                try {
                    ref.initialize(var1, var2, new org.webrtc.CapturerObserver() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.VideoCapturer::initialize::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onCapturerStarted(boolean var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onCapturerStarted(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            boolean argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.CapturerObserver::onCapturerStarted",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onCapturerStopped() {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onCapturerStopped(" + "" + ")");
                            }
            
                            // convert to jsonable data
            
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.CapturerObserver::onCapturerStopped",
                                        new HashMap<String, Object>() {{
                    
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onFrameCaptured(org.webrtc.VideoFrame var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFrameCaptured(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.CapturerObserver::onFrameCaptured",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoCapturer::startCapture", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) __args__).get("var3");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoCapturer ref = (org.webrtc.VideoCapturer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoCapturer@" + refId + "::startCapture(" + var1 + var2 + var3 + ")");
                }
            
                // invoke native method
                try {
                    ref.startCapture(var1, var2, var3);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoCapturer::stopCapture", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoCapturer ref = (org.webrtc.VideoCapturer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoCapturer@" + refId + "::stopCapture(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.stopCapture();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoCapturer::changeCaptureFormat", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) __args__).get("var3");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoCapturer ref = (org.webrtc.VideoCapturer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoCapturer@" + refId + "::changeCaptureFormat(" + var1 + var2 + var3 + ")");
                }
            
                // invoke native method
                try {
                    ref.changeCaptureFormat(var1, var2, var3);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoCapturer::dispose", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoCapturer ref = (org.webrtc.VideoCapturer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoCapturer@" + refId + "::dispose(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.dispose();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoCapturer::isScreencast", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoCapturer ref = (org.webrtc.VideoCapturer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoCapturer@" + refId + "::isScreencast(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.isScreencast();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpReceiver::track", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpReceiver ref = (org.webrtc.RtpReceiver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpReceiver@" + refId + "::track(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.MediaStreamTrack __result__;
                try {
                    __result__ = ref.track();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpReceiver::setParameters", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __parametersRefId__ = (Integer) ((Map<String, Object>) __args__).get("parameters");
                org.webrtc.RtpParameters parameters = __parametersRefId__ != null ? (org.webrtc.RtpParameters) getHEAP().get(__parametersRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpReceiver ref = (org.webrtc.RtpReceiver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpReceiver@" + refId + "::setParameters(" + parameters + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.setParameters(parameters);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpReceiver::getParameters", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpReceiver ref = (org.webrtc.RtpReceiver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpReceiver@" + refId + "::getParameters(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.RtpParameters __result__;
                try {
                    __result__ = ref.getParameters();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpReceiver::dispose", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpReceiver ref = (org.webrtc.RtpReceiver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpReceiver@" + refId + "::dispose(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.dispose();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpReceiver::SetObserver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpReceiver ref = (org.webrtc.RtpReceiver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpReceiver@" + refId + "::SetObserver(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.SetObserver(new org.webrtc.RtpReceiver.Observer() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.RtpReceiver::SetObserver::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onFirstPacketReceived(org.webrtc.MediaStreamTrack.MediaType var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFirstPacketReceived(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // enum arg
                            int argvar1 = var1.ordinal();
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.RtpReceiver.Observer::onFirstPacketReceived",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.JavaI420Buffer::allocate", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int width = (int) ((Map<String, Object>) __args__).get("width");
                // jsonable arg
                int height = (int) ((Map<String, Object>) __args__).get("height");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.JavaI420Buffer::allocate(" + width + height + ")");
                }
            
                // invoke native method
                org.webrtc.JavaI420Buffer __result__;
                try {
                    __result__ = org.webrtc.JavaI420Buffer.allocate(width, height);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.JavaI420Buffer::cropAndScaleI420", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __bufferRefId__ = (Integer) ((Map<String, Object>) __args__).get("buffer");
                org.webrtc.VideoFrame.I420Buffer buffer = __bufferRefId__ != null ? (org.webrtc.VideoFrame.I420Buffer) getHEAP().get(__bufferRefId__) : null;
                // jsonable arg
                int cropX = (int) ((Map<String, Object>) __args__).get("cropX");
                // jsonable arg
                int cropY = (int) ((Map<String, Object>) __args__).get("cropY");
                // jsonable arg
                int cropWidth = (int) ((Map<String, Object>) __args__).get("cropWidth");
                // jsonable arg
                int cropHeight = (int) ((Map<String, Object>) __args__).get("cropHeight");
                // jsonable arg
                int scaleWidth = (int) ((Map<String, Object>) __args__).get("scaleWidth");
                // jsonable arg
                int scaleHeight = (int) ((Map<String, Object>) __args__).get("scaleHeight");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.JavaI420Buffer::cropAndScaleI420(" + buffer + cropX + cropY + cropWidth + cropHeight + scaleWidth + scaleHeight + ")");
                }
            
                // invoke native method
                org.webrtc.VideoFrame.Buffer __result__;
                try {
                    __result__ = org.webrtc.JavaI420Buffer.cropAndScaleI420(buffer, cropX, cropY, cropWidth, cropHeight, scaleWidth, scaleHeight);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFileRenderer::release", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFileRenderer ref = (org.webrtc.VideoFileRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFileRenderer@" + refId + "::release(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.release();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.ContextUtils::initialize", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __applicationContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("applicationContext");
                android.content.Context applicationContext = __applicationContextRefId__ != null ? (android.content.Context) getHEAP().get(__applicationContextRefId__) : null;
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.ContextUtils::initialize(" + applicationContext + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.ContextUtils.initialize(applicationContext);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.ContextUtils::getApplicationContext", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.ContextUtils::getApplicationContext(" + "" + ")");
                }
            
                // invoke native method
                android.content.Context __result__;
                try {
                    __result__ = org.webrtc.ContextUtils.getApplicationContext();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.EglRenderer::init", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __sharedContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("sharedContext");
                org.webrtc.EglBase.Context sharedContext = __sharedContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__sharedContextRefId__) : null;
                // jsonable arg
                int[] configAttributes = (int[]) ((Map<String, Object>) __args__).get("configAttributes");
                // ref arg
                Integer __drawerRefId__ = (Integer) ((Map<String, Object>) __args__).get("drawer");
                org.webrtc.RendererCommon.GlDrawer drawer = __drawerRefId__ != null ? (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(__drawerRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.EglRenderer ref = (org.webrtc.EglRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.EglRenderer@" + refId + "::init(" + sharedContext + configAttributes + drawer + ")");
                }
            
                // invoke native method
                try {
                    ref.init(sharedContext, configAttributes, drawer);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.EglRenderer::release", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.EglRenderer ref = (org.webrtc.EglRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.EglRenderer@" + refId + "::release(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.release();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.EglRenderer::printStackTrace", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.EglRenderer ref = (org.webrtc.EglRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.EglRenderer@" + refId + "::printStackTrace(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.printStackTrace();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.EglRenderer::setMirror", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean mirror = (boolean) ((Map<String, Object>) __args__).get("mirror");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.EglRenderer ref = (org.webrtc.EglRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.EglRenderer@" + refId + "::setMirror(" + mirror + ")");
                }
            
                // invoke native method
                try {
                    ref.setMirror(mirror);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.EglRenderer::setLayoutAspectRatio", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                Double layoutAspectRatio = (Double) ((Map<String, Object>) __args__).get("layoutAspectRatio");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.EglRenderer ref = (org.webrtc.EglRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.EglRenderer@" + refId + "::setLayoutAspectRatio(" + layoutAspectRatio + ")");
                }
            
                // invoke native method
                try {
                    ref.setLayoutAspectRatio(new Double(layoutAspectRatio).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.EglRenderer::setFpsReduction", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                Double fps = (Double) ((Map<String, Object>) __args__).get("fps");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.EglRenderer ref = (org.webrtc.EglRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.EglRenderer@" + refId + "::setFpsReduction(" + fps + ")");
                }
            
                // invoke native method
                try {
                    ref.setFpsReduction(new Double(fps).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.EglRenderer::disableFpsReduction", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.EglRenderer ref = (org.webrtc.EglRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.EglRenderer@" + refId + "::disableFpsReduction(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.disableFpsReduction();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.EglRenderer::pauseVideo", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.EglRenderer ref = (org.webrtc.EglRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.EglRenderer@" + refId + "::pauseVideo(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.pauseVideo();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.EglRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                Double scale = (Double) ((Map<String, Object>) __args__).get("scale");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.EglRenderer ref = (org.webrtc.EglRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.EglRenderer@" + refId + "::addFrameListener(" + scale + ")");
                }
            
                // invoke native method
                try {
                    ref.addFrameListener(new org.webrtc.EglRenderer.FrameListener() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.EglRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onFrame(android.graphics.Bitmap var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFrame(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.EglRenderer.FrameListener::onFrame",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                }, new Double(scale).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.EglRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                Double scale = (Double) ((Map<String, Object>) __args__).get("scale");
                // ref arg
                Integer __drawerParamRefId__ = (Integer) ((Map<String, Object>) __args__).get("drawerParam");
                org.webrtc.RendererCommon.GlDrawer drawerParam = __drawerParamRefId__ != null ? (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(__drawerParamRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.EglRenderer ref = (org.webrtc.EglRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.EglRenderer@" + refId + "::addFrameListener(" + scale + drawerParam + ")");
                }
            
                // invoke native method
                try {
                    ref.addFrameListener(new org.webrtc.EglRenderer.FrameListener() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.EglRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onFrame(android.graphics.Bitmap var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFrame(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.EglRenderer.FrameListener::onFrame",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                }, new Double(scale).floatValue(), drawerParam);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.EglRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer__bool", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                Double scale = (Double) ((Map<String, Object>) __args__).get("scale");
                // ref arg
                Integer __drawerParamRefId__ = (Integer) ((Map<String, Object>) __args__).get("drawerParam");
                org.webrtc.RendererCommon.GlDrawer drawerParam = __drawerParamRefId__ != null ? (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(__drawerParamRefId__) : null;
                // jsonable arg
                boolean applyFpsReduction = (boolean) ((Map<String, Object>) __args__).get("applyFpsReduction");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.EglRenderer ref = (org.webrtc.EglRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.EglRenderer@" + refId + "::addFrameListener(" + scale + drawerParam + applyFpsReduction + ")");
                }
            
                // invoke native method
                try {
                    ref.addFrameListener(new org.webrtc.EglRenderer.FrameListener() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.EglRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer__bool::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onFrame(android.graphics.Bitmap var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFrame(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.EglRenderer.FrameListener::onFrame",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                }, new Double(scale).floatValue(), drawerParam, applyFpsReduction);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.EglRenderer::removeFrameListener", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.EglRenderer ref = (org.webrtc.EglRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.EglRenderer@" + refId + "::removeFrameListener(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.removeFrameListener(new org.webrtc.EglRenderer.FrameListener() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.EglRenderer::removeFrameListener::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onFrame(android.graphics.Bitmap var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFrame(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.EglRenderer.FrameListener::onFrame",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.EglRenderer::clearImage", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.EglRenderer ref = (org.webrtc.EglRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.EglRenderer@" + refId + "::clearImage(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.clearImage();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.EglRenderer::clearImage__double__double__double__double", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                Double r = (Double) ((Map<String, Object>) __args__).get("r");
                // jsonable arg
                Double g = (Double) ((Map<String, Object>) __args__).get("g");
                // jsonable arg
                Double b = (Double) ((Map<String, Object>) __args__).get("b");
                // jsonable arg
                Double a = (Double) ((Map<String, Object>) __args__).get("a");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.EglRenderer ref = (org.webrtc.EglRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.EglRenderer@" + refId + "::clearImage(" + r + g + b + a + ")");
                }
            
                // invoke native method
                try {
                    ref.clearImage(new Double(r).floatValue(), new Double(g).floatValue(), new Double(b).floatValue(), new Double(a).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrameDrawer::drawFrame__org_webrtc_VideoFrame__org_webrtc_RendererCommon_GlDrawer", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __frameRefId__ = (Integer) ((Map<String, Object>) __args__).get("frame");
                org.webrtc.VideoFrame frame = __frameRefId__ != null ? (org.webrtc.VideoFrame) getHEAP().get(__frameRefId__) : null;
                // ref arg
                Integer __drawerRefId__ = (Integer) ((Map<String, Object>) __args__).get("drawer");
                org.webrtc.RendererCommon.GlDrawer drawer = __drawerRefId__ != null ? (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(__drawerRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrameDrawer ref = (org.webrtc.VideoFrameDrawer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrameDrawer@" + refId + "::drawFrame(" + frame + drawer + ")");
                }
            
                // invoke native method
                try {
                    ref.drawFrame(frame, drawer);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrameDrawer::release", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrameDrawer ref = (org.webrtc.VideoFrameDrawer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrameDrawer@" + refId + "::release(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.release();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoSink::onFrame", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                org.webrtc.VideoFrame var1 = __var1RefId__ != null ? (org.webrtc.VideoFrame) getHEAP().get(__var1RefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoSink ref = (org.webrtc.VideoSink) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoSink@" + refId + "::onFrame(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onFrame(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.CameraEnumerator::getDeviceNames", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.CameraEnumerator ref = (org.webrtc.CameraEnumerator) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.CameraEnumerator@" + refId + "::getDeviceNames(" + "" + ")");
                }
            
                // invoke native method
                String[] __result__;
                try {
                    __result__ = ref.getDeviceNames();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<String> jsonableResult = new ArrayList<String>(java.util.Arrays.asList(__result__));
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.CameraEnumerator::isFrontFacing", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.CameraEnumerator ref = (org.webrtc.CameraEnumerator) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.CameraEnumerator@" + refId + "::isFrontFacing(" + var1 + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.isFrontFacing(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.CameraEnumerator::isBackFacing", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.CameraEnumerator ref = (org.webrtc.CameraEnumerator) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.CameraEnumerator@" + refId + "::isBackFacing(" + var1 + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.isBackFacing(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.CameraEnumerator::getSupportedFormats", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.CameraEnumerator ref = (org.webrtc.CameraEnumerator) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.CameraEnumerator@" + refId + "::getSupportedFormats(" + var1 + ")");
                }
            
                // invoke native method
                java.util.List<org.webrtc.CameraEnumerationAndroid.CaptureFormat> __result__;
                try {
                    __result__ = ref.getSupportedFormats(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = new ArrayList<>();
                    for (org.webrtc.CameraEnumerationAndroid.CaptureFormat item : __result__) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.CameraEnumerator::createCapturer", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.CameraEnumerator ref = (org.webrtc.CameraEnumerator) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.CameraEnumerator@" + refId + "::createCapturer(" + var1 + ")");
                }
            
                // invoke native method
                org.webrtc.CameraVideoCapturer __result__;
                try {
                    __result__ = ref.createCapturer(var1, new org.webrtc.CameraVideoCapturer.CameraEventsHandler() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.CameraEnumerator::createCapturer::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onCameraError(String var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onCameraError(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            String argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.CameraVideoCapturer.CameraEventsHandler::onCameraError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onCameraDisconnected() {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onCameraDisconnected(" + "" + ")");
                            }
            
                            // convert to jsonable data
            
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.CameraVideoCapturer.CameraEventsHandler::onCameraDisconnected",
                                        new HashMap<String, Object>() {{
                    
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onCameraFreezed(String var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onCameraFreezed(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            String argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.CameraVideoCapturer.CameraEventsHandler::onCameraFreezed",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onCameraOpening(String var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onCameraOpening(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            String argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.CameraVideoCapturer.CameraEventsHandler::onCameraOpening",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onFirstFrameAvailable() {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFirstFrameAvailable(" + "" + ")");
                            }
            
                            // convert to jsonable data
            
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.CameraVideoCapturer.CameraEventsHandler::onFirstFrameAvailable",
                                        new HashMap<String, Object>() {{
                    
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onCameraClosed() {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onCameraClosed(" + "" + ")");
                            }
            
                            // convert to jsonable data
            
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.CameraVideoCapturer.CameraEventsHandler::onCameraClosed",
                                        new HashMap<String, Object>() {{
                    
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrame.TextureBuffer.Type::getGlTarget", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrame.TextureBuffer.Type ref = (org.webrtc.VideoFrame.TextureBuffer.Type) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrame.TextureBuffer.Type@" + refId + "::getGlTarget(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getGlTarget();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder.H264Profile::getValue", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaCodecVideoEncoder.H264Profile ref = (org.webrtc.MediaCodecVideoEncoder.H264Profile) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder.H264Profile@" + refId + "::getValue(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getValue();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpTransceiver::getMediaType", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpTransceiver ref = (org.webrtc.RtpTransceiver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpTransceiver@" + refId + "::getMediaType(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.MediaStreamTrack.MediaType __result__;
                try {
                    __result__ = ref.getMediaType();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpTransceiver::getMid", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpTransceiver ref = (org.webrtc.RtpTransceiver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpTransceiver@" + refId + "::getMid(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = ref.getMid();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpTransceiver::getSender", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpTransceiver ref = (org.webrtc.RtpTransceiver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpTransceiver@" + refId + "::getSender(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.RtpSender __result__;
                try {
                    __result__ = ref.getSender();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpTransceiver::getReceiver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpTransceiver ref = (org.webrtc.RtpTransceiver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpTransceiver@" + refId + "::getReceiver(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.RtpReceiver __result__;
                try {
                    __result__ = ref.getReceiver();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpTransceiver::isStopped", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpTransceiver ref = (org.webrtc.RtpTransceiver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpTransceiver@" + refId + "::isStopped(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.isStopped();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpTransceiver::getDirection", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpTransceiver ref = (org.webrtc.RtpTransceiver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpTransceiver@" + refId + "::getDirection(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.RtpTransceiver.RtpTransceiverDirection __result__;
                try {
                    __result__ = ref.getDirection();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpTransceiver::getCurrentDirection", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpTransceiver ref = (org.webrtc.RtpTransceiver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpTransceiver@" + refId + "::getCurrentDirection(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.RtpTransceiver.RtpTransceiverDirection __result__;
                try {
                    __result__ = ref.getCurrentDirection();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpTransceiver::setDirection", (__args__, __methodResult__) -> {
                // args
                // enum arg
                org.webrtc.RtpTransceiver.RtpTransceiverDirection rtpTransceiverDirection = org.webrtc.RtpTransceiver.RtpTransceiverDirection.values()[(int) ((Map<String, Object>) __args__).get("rtpTransceiverDirection")];
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpTransceiver ref = (org.webrtc.RtpTransceiver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpTransceiver@" + refId + "::setDirection(" + rtpTransceiverDirection + ")");
                }
            
                // invoke native method
                try {
                    ref.setDirection(rtpTransceiverDirection);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpTransceiver::stop", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpTransceiver ref = (org.webrtc.RtpTransceiver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpTransceiver@" + refId + "::stop(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.stop();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpTransceiver::dispose", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpTransceiver ref = (org.webrtc.RtpTransceiver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpTransceiver@" + refId + "::dispose(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.dispose();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RendererCommon.VideoLayoutMeasure::setScalingType__org_webrtc_RendererCommon_ScalingType", (__args__, __methodResult__) -> {
                // args
                // enum arg
                org.webrtc.RendererCommon.ScalingType scalingType = org.webrtc.RendererCommon.ScalingType.values()[(int) ((Map<String, Object>) __args__).get("scalingType")];
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RendererCommon.VideoLayoutMeasure ref = (org.webrtc.RendererCommon.VideoLayoutMeasure) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RendererCommon.VideoLayoutMeasure@" + refId + "::setScalingType(" + scalingType + ")");
                }
            
                // invoke native method
                try {
                    ref.setScalingType(scalingType);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RendererCommon.VideoLayoutMeasure::setScalingType__org_webrtc_RendererCommon_ScalingType__org_webrtc_RendererCommon_ScalingType", (__args__, __methodResult__) -> {
                // args
                // enum arg
                org.webrtc.RendererCommon.ScalingType scalingTypeMatchOrientation = org.webrtc.RendererCommon.ScalingType.values()[(int) ((Map<String, Object>) __args__).get("scalingTypeMatchOrientation")];
                // enum arg
                org.webrtc.RendererCommon.ScalingType scalingTypeMismatchOrientation = org.webrtc.RendererCommon.ScalingType.values()[(int) ((Map<String, Object>) __args__).get("scalingTypeMismatchOrientation")];
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RendererCommon.VideoLayoutMeasure ref = (org.webrtc.RendererCommon.VideoLayoutMeasure) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RendererCommon.VideoLayoutMeasure@" + refId + "::setScalingType(" + scalingTypeMatchOrientation + scalingTypeMismatchOrientation + ")");
                }
            
                // invoke native method
                try {
                    ref.setScalingType(scalingTypeMatchOrientation, scalingTypeMismatchOrientation);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RendererCommon.VideoLayoutMeasure::measure", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int widthSpec = (int) ((Map<String, Object>) __args__).get("widthSpec");
                // jsonable arg
                int heightSpec = (int) ((Map<String, Object>) __args__).get("heightSpec");
                // jsonable arg
                int frameWidth = (int) ((Map<String, Object>) __args__).get("frameWidth");
                // jsonable arg
                int frameHeight = (int) ((Map<String, Object>) __args__).get("frameHeight");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RendererCommon.VideoLayoutMeasure ref = (org.webrtc.RendererCommon.VideoLayoutMeasure) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RendererCommon.VideoLayoutMeasure@" + refId + "::measure(" + widthSpec + heightSpec + frameWidth + frameHeight + ")");
                }
            
                // invoke native method
                android.graphics.Point __result__;
                try {
                    __result__ = ref.measure(widthSpec, heightSpec, frameWidth, frameHeight);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.NetworkMonitorAutoDetect::supportNetworkCallback", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.NetworkMonitorAutoDetect ref = (org.webrtc.NetworkMonitorAutoDetect) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.NetworkMonitorAutoDetect@" + refId + "::supportNetworkCallback(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.supportNetworkCallback();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.NetworkMonitorAutoDetect::destroy", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.NetworkMonitorAutoDetect ref = (org.webrtc.NetworkMonitorAutoDetect) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.NetworkMonitorAutoDetect@" + refId + "::destroy(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.destroy();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.NetworkMonitorAutoDetect::getDefaultNetId", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.NetworkMonitorAutoDetect ref = (org.webrtc.NetworkMonitorAutoDetect) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.NetworkMonitorAutoDetect@" + refId + "::getDefaultNetId(" + "" + ")");
                }
            
                // invoke native method
                long __result__;
                try {
                    __result__ = ref.getDefaultNetId();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                long jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.NetworkMonitorAutoDetect::onReceive", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __contextRefId__ = (Integer) ((Map<String, Object>) __args__).get("context");
                android.content.Context context = __contextRefId__ != null ? (android.content.Context) getHEAP().get(__contextRefId__) : null;
                // ref arg
                Integer __intentRefId__ = (Integer) ((Map<String, Object>) __args__).get("intent");
                android.content.Intent intent = __intentRefId__ != null ? (android.content.Intent) getHEAP().get(__intentRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.NetworkMonitorAutoDetect ref = (org.webrtc.NetworkMonitorAutoDetect) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.NetworkMonitorAutoDetect@" + refId + "::onReceive(" + context + intent + ")");
                }
            
                // invoke native method
                try {
                    ref.onReceive(context, intent);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
        }};
    }
}
