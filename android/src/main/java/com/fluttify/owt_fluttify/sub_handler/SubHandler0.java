//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package com.fluttify.owt_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import com.fluttify.owt_fluttify.OwtFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler0 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // getter
            put("org.webrtc.Size::get_width", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.Size ref = (org.webrtc.Size) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.width;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.Size::get_height", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.Size ref = (org.webrtc.Size) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.height;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.StatsReport::get_id", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.StatsReport ref = (org.webrtc.StatsReport) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.id;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.StatsReport::get_type", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.StatsReport ref = (org.webrtc.StatsReport) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.type;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.StatsReport::get_timestamp", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.StatsReport ref = (org.webrtc.StatsReport) getHEAP().get((int) __args__.get("refId"));
            
               double __result__ = ref.timestamp;
            
               double jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.MediaCodecVideoEncoder.EncoderProperties::get_codecName", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.MediaCodecVideoEncoder.EncoderProperties ref = (org.webrtc.MediaCodecVideoEncoder.EncoderProperties) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.codecName;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.MediaCodecVideoEncoder.EncoderProperties::get_colorFormat", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.MediaCodecVideoEncoder.EncoderProperties ref = (org.webrtc.MediaCodecVideoEncoder.EncoderProperties) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.colorFormat;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.MediaCodecVideoEncoder.EncoderProperties::get_bitrateAdjustmentType", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.MediaCodecVideoEncoder.EncoderProperties ref = (org.webrtc.MediaCodecVideoEncoder.EncoderProperties) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.MediaCodecVideoEncoder.BitrateAdjustmentType __result__ = ref.bitrateAdjustmentType;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoEncoder.Settings::get_numberOfCores", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoEncoder.Settings ref = (org.webrtc.VideoEncoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.numberOfCores;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoEncoder.Settings::get_width", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoEncoder.Settings ref = (org.webrtc.VideoEncoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.width;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoEncoder.Settings::get_height", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoEncoder.Settings ref = (org.webrtc.VideoEncoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.height;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoEncoder.Settings::get_startBitrate", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoEncoder.Settings ref = (org.webrtc.VideoEncoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.startBitrate;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoEncoder.Settings::get_maxFramerate", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoEncoder.Settings ref = (org.webrtc.VideoEncoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.maxFramerate;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoEncoder.Settings::get_numberOfSimulcastStreams", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoEncoder.Settings ref = (org.webrtc.VideoEncoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.numberOfSimulcastStreams;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoEncoder.Settings::get_automaticResizeOn", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoEncoder.Settings ref = (org.webrtc.VideoEncoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.automaticResizeOn;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat::get_width", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.CameraEnumerationAndroid.CaptureFormat ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.width;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat::get_height", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.CameraEnumerationAndroid.CaptureFormat ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.height;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat::get_framerate", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.CameraEnumerationAndroid.CaptureFormat ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange __result__ = ref.framerate;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = System.identityHashCode(__result__);
                   getHEAP().put(jsonableResult, __result__);
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat::get_imageFormat", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.CameraEnumerationAndroid.CaptureFormat ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.imageFormat;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoDecoder.Settings::get_numberOfCores", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoDecoder.Settings ref = (org.webrtc.VideoDecoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.numberOfCores;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoDecoder.Settings::get_width", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoDecoder.Settings ref = (org.webrtc.VideoDecoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.width;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoDecoder.Settings::get_height", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoDecoder.Settings ref = (org.webrtc.VideoDecoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.height;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.Logging.TraceLevel::get_level", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.Logging.TraceLevel ref = (org.webrtc.Logging.TraceLevel) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.level;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.MediaStream::get_audioTracks", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.MediaStream ref = (org.webrtc.MediaStream) getHEAP().get((int) __args__.get("refId"));
            
               java.util.List<org.webrtc.AudioTrack> __result__ = ref.audioTracks;
            
               List<Integer> jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = new ArrayList<>();
                   for (org.webrtc.AudioTrack item : __result__) {
                       getHEAP().put(System.identityHashCode(item), item);
                       jsonableResult.add(System.identityHashCode(item));
                   }
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.MediaStream::get_videoTracks", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.MediaStream ref = (org.webrtc.MediaStream) getHEAP().get((int) __args__.get("refId"));
            
               java.util.List<org.webrtc.VideoTrack> __result__ = ref.videoTracks;
            
               List<Integer> jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = new ArrayList<>();
                   for (org.webrtc.VideoTrack item : __result__) {
                       getHEAP().put(System.identityHashCode(item), item);
                       jsonableResult.add(System.identityHashCode(item));
                   }
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.MediaStream::get_preservedVideoTracks", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.MediaStream ref = (org.webrtc.MediaStream) getHEAP().get((int) __args__.get("refId"));
            
               java.util.List<org.webrtc.VideoTrack> __result__ = ref.preservedVideoTracks;
            
               List<Integer> jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = new ArrayList<>();
                   for (org.webrtc.VideoTrack item : __result__) {
                       getHEAP().put(System.identityHashCode(item), item);
                       jsonableResult.add(System.identityHashCode(item));
                   }
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.SessionDescription::get_type", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.SessionDescription ref = (org.webrtc.SessionDescription) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.SessionDescription.Type __result__ = ref.type;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.SessionDescription::get_description", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.SessionDescription ref = (org.webrtc.SessionDescription) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.description;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoEncoder.ScalingSettings::get_on", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoEncoder.ScalingSettings ref = (org.webrtc.VideoEncoder.ScalingSettings) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.on;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoEncoder.ScalingSettings::get_low", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoEncoder.ScalingSettings ref = (org.webrtc.VideoEncoder.ScalingSettings) getHEAP().get((int) __args__.get("refId"));
            
               Integer __result__ = ref.low;
            
               Integer jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoEncoder.ScalingSettings::get_high", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoEncoder.ScalingSettings ref = (org.webrtc.VideoEncoder.ScalingSettings) getHEAP().get((int) __args__.get("refId"));
            
               Integer __result__ = ref.high;
            
               Integer jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoEncoder.ScalingSettings::get_OFF", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoEncoder.ScalingSettings ref = (org.webrtc.VideoEncoder.ScalingSettings) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.VideoEncoder.ScalingSettings __result__ = ref.OFF;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = System.identityHashCode(__result__);
                   getHEAP().put(jsonableResult, __result__);
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.NetworkMonitorAutoDetect.NetworkInformation::get_name", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.NetworkMonitorAutoDetect.NetworkInformation ref = (org.webrtc.NetworkMonitorAutoDetect.NetworkInformation) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.name;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.NetworkMonitorAutoDetect.NetworkInformation::get_type", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.NetworkMonitorAutoDetect.NetworkInformation ref = (org.webrtc.NetworkMonitorAutoDetect.NetworkInformation) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.NetworkMonitorAutoDetect.ConnectionType __result__ = ref.type;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.NetworkMonitorAutoDetect.NetworkInformation::get_underlyingTypeForVpn", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.NetworkMonitorAutoDetect.NetworkInformation ref = (org.webrtc.NetworkMonitorAutoDetect.NetworkInformation) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.NetworkMonitorAutoDetect.ConnectionType __result__ = ref.underlyingTypeForVpn;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.NetworkMonitorAutoDetect.NetworkInformation::get_handle", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.NetworkMonitorAutoDetect.NetworkInformation ref = (org.webrtc.NetworkMonitorAutoDetect.NetworkInformation) getHEAP().get((int) __args__.get("refId"));
            
               long __result__ = ref.handle;
            
               long jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnectionFactory.Options::get_networkIgnoreMask", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.networkIgnoreMask;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnectionFactory.Options::get_disableEncryption", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.disableEncryption;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnectionFactory.Options::get_disableNetworkMonitor", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.disableNetworkMonitor;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnectionFactory.Options::get_enableAes128Sha1_32CryptoCipher", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.enableAes128Sha1_32CryptoCipher;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnectionFactory.Options::get_enableGcmCryptoSuites", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.enableGcmCryptoSuites;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.RtpParameters::get_transactionId", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.RtpParameters ref = (org.webrtc.RtpParameters) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.transactionId;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoCodecInfo::get_name", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoCodecInfo ref = (org.webrtc.VideoCodecInfo) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.name;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoCodecInfo::get_params", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoCodecInfo ref = (org.webrtc.VideoCodecInfo) getHEAP().get((int) __args__.get("refId"));
            
               java.util.Map<String,String> __result__ = ref.params;
            
               java.util.Map<String,String> jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoCodecInfo::get_payload", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoCodecInfo ref = (org.webrtc.VideoCodecInfo) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.payload;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.Metrics.HistogramInfo::get_min", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.Metrics.HistogramInfo ref = (org.webrtc.Metrics.HistogramInfo) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.min;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.Metrics.HistogramInfo::get_max", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.Metrics.HistogramInfo ref = (org.webrtc.Metrics.HistogramInfo) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.max;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.Metrics.HistogramInfo::get_bucketCount", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.Metrics.HistogramInfo ref = (org.webrtc.Metrics.HistogramInfo) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.bucketCount;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.DataChannel.Init::get_ordered", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.ordered;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.DataChannel.Init::get_maxRetransmitTimeMs", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.maxRetransmitTimeMs;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.DataChannel.Init::get_maxRetransmits", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.maxRetransmits;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.DataChannel.Init::get_protocol", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.protocol;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.DataChannel.Init::get_negotiated", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.negotiated;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.DataChannel.Init::get_id", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.DataChannel.Init ref = (org.webrtc.DataChannel.Init) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.id;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.IceServer::get_uri", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.IceServer ref = (org.webrtc.PeerConnection.IceServer) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.uri;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.IceServer::get_urls", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.IceServer ref = (org.webrtc.PeerConnection.IceServer) getHEAP().get((int) __args__.get("refId"));
            
               java.util.List<String> __result__ = ref.urls;
            
               java.util.List<String> jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.IceServer::get_username", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.IceServer ref = (org.webrtc.PeerConnection.IceServer) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.username;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.IceServer::get_password", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.IceServer ref = (org.webrtc.PeerConnection.IceServer) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.password;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.IceServer::get_tlsCertPolicy", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.IceServer ref = (org.webrtc.PeerConnection.IceServer) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.PeerConnection.TlsCertPolicy __result__ = ref.tlsCertPolicy;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.IceServer::get_hostname", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.IceServer ref = (org.webrtc.PeerConnection.IceServer) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.hostname;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.IceServer::get_tlsAlpnProtocols", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.IceServer ref = (org.webrtc.PeerConnection.IceServer) getHEAP().get((int) __args__.get("refId"));
            
               java.util.List<String> __result__ = ref.tlsAlpnProtocols;
            
               java.util.List<String> jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.IceServer::get_tlsEllipticCurves", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.IceServer ref = (org.webrtc.PeerConnection.IceServer) getHEAP().get((int) __args__.get("refId"));
            
               java.util.List<String> __result__ = ref.tlsEllipticCurves;
            
               java.util.List<String> jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoDecoder.DecodeInfo::get_isMissingFrames", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoDecoder.DecodeInfo ref = (org.webrtc.VideoDecoder.DecodeInfo) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.isMissingFrames;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.VideoDecoder.DecodeInfo::get_renderTimeMs", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.VideoDecoder.DecodeInfo ref = (org.webrtc.VideoDecoder.DecodeInfo) getHEAP().get((int) __args__.get("refId"));
            
               long __result__ = ref.renderTimeMs;
            
               long jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.EncodedImage::get_encodedWidth", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.EncodedImage ref = (org.webrtc.EncodedImage) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.encodedWidth;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.EncodedImage::get_encodedHeight", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.EncodedImage ref = (org.webrtc.EncodedImage) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.encodedHeight;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.EncodedImage::get_captureTimeMs", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.EncodedImage ref = (org.webrtc.EncodedImage) getHEAP().get((int) __args__.get("refId"));
            
               long __result__ = ref.captureTimeMs;
            
               long jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.EncodedImage::get_captureTimeNs", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.EncodedImage ref = (org.webrtc.EncodedImage) getHEAP().get((int) __args__.get("refId"));
            
               long __result__ = ref.captureTimeNs;
            
               long jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.EncodedImage::get_frameType", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.EncodedImage ref = (org.webrtc.EncodedImage) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.EncodedImage.FrameType __result__ = ref.frameType;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.EncodedImage::get_rotation", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.EncodedImage ref = (org.webrtc.EncodedImage) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.rotation;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.EncodedImage::get_completeFrame", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.EncodedImage ref = (org.webrtc.EncodedImage) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.completeFrame;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.EncodedImage::get_qp", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.EncodedImage ref = (org.webrtc.EncodedImage) getHEAP().get((int) __args__.get("refId"));
            
               Integer __result__ = ref.qp;
            
               Integer jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange::get_min", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.min;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange::get_max", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.max;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.NetworkMonitorAutoDetect.IPAddress::get_address", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.NetworkMonitorAutoDetect.IPAddress ref = (org.webrtc.NetworkMonitorAutoDetect.IPAddress) getHEAP().get((int) __args__.get("refId"));
            
               byte[] __result__ = ref.address;
            
               byte[] jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.IceCandidate::get_sdpMid", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.IceCandidate ref = (org.webrtc.IceCandidate) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.sdpMid;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.IceCandidate::get_sdpMLineIndex", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.IceCandidate ref = (org.webrtc.IceCandidate) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.sdpMLineIndex;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.IceCandidate::get_sdp", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.IceCandidate ref = (org.webrtc.IceCandidate) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.sdp;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.IceCandidate::get_serverUrl", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.IceCandidate ref = (org.webrtc.IceCandidate) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.serverUrl;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceTransportsType", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.PeerConnection.IceTransportsType __result__ = ref.iceTransportsType;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceServers", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               java.util.List<org.webrtc.PeerConnection.IceServer> __result__ = ref.iceServers;
            
               List<Integer> jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = new ArrayList<>();
                   for (org.webrtc.PeerConnection.IceServer item : __result__) {
                       getHEAP().put(System.identityHashCode(item), item);
                       jsonableResult.add(System.identityHashCode(item));
                   }
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_bundlePolicy", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.PeerConnection.BundlePolicy __result__ = ref.bundlePolicy;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_rtcpMuxPolicy", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.PeerConnection.RtcpMuxPolicy __result__ = ref.rtcpMuxPolicy;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_tcpCandidatePolicy", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.PeerConnection.TcpCandidatePolicy __result__ = ref.tcpCandidatePolicy;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_candidateNetworkPolicy", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.PeerConnection.CandidateNetworkPolicy __result__ = ref.candidateNetworkPolicy;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_audioJitterBufferMaxPackets", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.audioJitterBufferMaxPackets;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_audioJitterBufferFastAccelerate", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.audioJitterBufferFastAccelerate;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceConnectionReceivingTimeout", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.iceConnectionReceivingTimeout;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceBackupCandidatePairPingInterval", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.iceBackupCandidatePairPingInterval;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_keyType", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.PeerConnection.KeyType __result__ = ref.keyType;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_continualGatheringPolicy", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.PeerConnection.ContinualGatheringPolicy __result__ = ref.continualGatheringPolicy;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceCandidatePoolSize", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.iceCandidatePoolSize;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_pruneTurnPorts", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.pruneTurnPorts;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_presumeWritableWhenFullyRelayed", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.presumeWritableWhenFullyRelayed;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceCheckIntervalStrongConnectivityMs", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               Integer __result__ = ref.iceCheckIntervalStrongConnectivityMs;
            
               Integer jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceCheckIntervalWeakConnectivityMs", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               Integer __result__ = ref.iceCheckIntervalWeakConnectivityMs;
            
               Integer jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceCheckMinInterval", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               Integer __result__ = ref.iceCheckMinInterval;
            
               Integer jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceUnwritableTimeMs", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               Integer __result__ = ref.iceUnwritableTimeMs;
            
               Integer jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceUnwritableMinChecks", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               Integer __result__ = ref.iceUnwritableMinChecks;
            
               Integer jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_stunCandidateKeepaliveIntervalMs", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               Integer __result__ = ref.stunCandidateKeepaliveIntervalMs;
            
               Integer jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_disableIPv6OnWifi", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.disableIPv6OnWifi;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_maxIPv6Networks", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.maxIPv6Networks;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_iceRegatherIntervalRange", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.PeerConnection.IntervalRange __result__ = ref.iceRegatherIntervalRange;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = System.identityHashCode(__result__);
                   getHEAP().put(jsonableResult, __result__);
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_disableIpv6", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.disableIpv6;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_enableDscp", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.enableDscp;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_enableCpuOveruseDetection", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.enableCpuOveruseDetection;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_enableRtpDataChannel", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.enableRtpDataChannel;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_suspendBelowMinBitrate", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.suspendBelowMinBitrate;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_screencastMinBitrate", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               Integer __result__ = ref.screencastMinBitrate;
            
               Integer jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_combinedAudioVideoBwe", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               Boolean __result__ = ref.combinedAudioVideoBwe;
            
               Boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_enableDtlsSrtp", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               Boolean __result__ = ref.enableDtlsSrtp;
            
               Boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_networkPreference", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.PeerConnection.AdapterType __result__ = ref.networkPreference;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_sdpSemantics", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.PeerConnection.SdpSemantics __result__ = ref.sdpSemantics;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_turnCustomizer", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.TurnCustomizer __result__ = ref.turnCustomizer;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = System.identityHashCode(__result__);
                   getHEAP().put(jsonableResult, __result__);
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.PeerConnection.RTCConfiguration::get_activeResetSrtpParams", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.activeResetSrtpParams;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.DataChannel.Buffer::get_binary", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.DataChannel.Buffer ref = (org.webrtc.DataChannel.Buffer) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.binary;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.MediaConstraints::get_mandatory", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.MediaConstraints ref = (org.webrtc.MediaConstraints) getHEAP().get((int) __args__.get("refId"));
            
               java.util.List<org.webrtc.MediaConstraints.KeyValuePair> __result__ = ref.mandatory;
            
               List<Integer> jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = new ArrayList<>();
                   for (org.webrtc.MediaConstraints.KeyValuePair item : __result__) {
                       getHEAP().put(System.identityHashCode(item), item);
                       jsonableResult.add(System.identityHashCode(item));
                   }
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.MediaConstraints::get_optional", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.MediaConstraints ref = (org.webrtc.MediaConstraints) getHEAP().get((int) __args__.get("refId"));
            
               java.util.List<org.webrtc.MediaConstraints.KeyValuePair> __result__ = ref.optional;
            
               List<Integer> jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = new ArrayList<>();
                   for (org.webrtc.MediaConstraints.KeyValuePair item : __result__) {
                       getHEAP().put(System.identityHashCode(item), item);
                       jsonableResult.add(System.identityHashCode(item));
                   }
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.StatsReport.Value::get_name", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.StatsReport.Value ref = (org.webrtc.StatsReport.Value) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.name;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.StatsReport.Value::get_value", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               org.webrtc.StatsReport.Value ref = (org.webrtc.StatsReport.Value) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.value;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.conference.Participant::get_id", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.conference.Participant ref = (owt.conference.Participant) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.id;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.conference.Participant::get_role", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.conference.Participant ref = (owt.conference.Participant) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.role;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.conference.Participant::get_userId", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.conference.Participant ref = (owt.conference.Participant) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.userId;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.conference.Subscription.VideoUpdateOptions::get_resolutionHeight", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.resolutionHeight;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.conference.Subscription.VideoUpdateOptions::get_resolutionWidth", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.resolutionWidth;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.conference.Subscription.VideoUpdateOptions::get_fps", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.fps;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.conference.Subscription.VideoUpdateOptions::get_keyframeInterval", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.keyframeInterval;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.conference.Subscription.VideoUpdateOptions::get_bitrateMultiplier", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get((int) __args__.get("refId"));
            
               double __result__ = ref.bitrateMultiplier;
            
               double jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.conference.RemoteStream::get_extraSubscriptionCapability", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.conference.RemoteStream ref = (owt.conference.RemoteStream) getHEAP().get((int) __args__.get("refId"));
            
               owt.conference.SubscriptionCapabilities __result__ = ref.extraSubscriptionCapability;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = System.identityHashCode(__result__);
                   getHEAP().put(jsonableResult, __result__);
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.conference.RemoteStream::get_publicationSettings", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.conference.RemoteStream ref = (owt.conference.RemoteStream) getHEAP().get((int) __args__.get("refId"));
            
               owt.conference.PublicationSettings __result__ = ref.publicationSettings;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = System.identityHashCode(__result__);
                   getHEAP().put(jsonableResult, __result__);
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.conference.Subscription::get_id", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.conference.Subscription ref = (owt.conference.Subscription) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.id;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.conference.BuildConfig::get_DEBUG", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.conference.BuildConfig ref = (owt.conference.BuildConfig) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.DEBUG;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.conference.RemoteMixedStream::get_view", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.conference.RemoteMixedStream ref = (owt.conference.RemoteMixedStream) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.view;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.p2p.BuildConfig::get_DEBUG", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.p2p.BuildConfig ref = (owt.p2p.BuildConfig) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.DEBUG;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.p2p.OwtP2PError::get_value", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.p2p.OwtP2PError ref = (owt.p2p.OwtP2PError) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.value;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.MediaConstraints.AudioTrackConstraints::get_echoCancellation", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.MediaConstraints.AudioTrackConstraints ref = (owt.base.MediaConstraints.AudioTrackConstraints) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.echoCancellation;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.MediaConstraints.AudioTrackConstraints::get_extendedFilterEchoCancellation", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.MediaConstraints.AudioTrackConstraints ref = (owt.base.MediaConstraints.AudioTrackConstraints) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.extendedFilterEchoCancellation;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.MediaConstraints.AudioTrackConstraints::get_delayAgnosticEchoCancellation", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.MediaConstraints.AudioTrackConstraints ref = (owt.base.MediaConstraints.AudioTrackConstraints) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.delayAgnosticEchoCancellation;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.Stream.StreamSourceInfo.AudioSourceInfo::get_type", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.Stream.StreamSourceInfo.AudioSourceInfo ref = (owt.base.Stream.StreamSourceInfo.AudioSourceInfo) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.type;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.ClientConfiguration::get_rtcConfiguration", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.ClientConfiguration ref = (owt.base.ClientConfiguration) getHEAP().get((int) __args__.get("refId"));
            
               org.webrtc.PeerConnection.RTCConfiguration __result__ = ref.rtcConfiguration;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = System.identityHashCode(__result__);
                   getHEAP().put(jsonableResult, __result__);
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.AudioCodecParameters::get_name", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.AudioCodecParameters ref = (owt.base.AudioCodecParameters) getHEAP().get((int) __args__.get("refId"));
            
               owt.base.MediaCodecs.AudioCodec __result__ = ref.name;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.AudioCodecParameters::get_channelNum", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.AudioCodecParameters ref = (owt.base.AudioCodecParameters) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.channelNum;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.AudioCodecParameters::get_sampleRate", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.AudioCodecParameters ref = (owt.base.AudioCodecParameters) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.sampleRate;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.PeerConnectionChannel::get_key", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.PeerConnectionChannel ref = (owt.base.PeerConnectionChannel) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.key;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.AudioEncodingParameters::get_maxBitrate", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.AudioEncodingParameters ref = (owt.base.AudioEncodingParameters) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.maxBitrate;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.AudioEncodingParameters::get_codec", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.AudioEncodingParameters ref = (owt.base.AudioEncodingParameters) getHEAP().get((int) __args__.get("refId"));
            
               owt.base.AudioCodecParameters __result__ = ref.codec;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = System.identityHashCode(__result__);
                   getHEAP().put(jsonableResult, __result__);
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.Stream.StreamSourceInfo::get_videoSourceInfo", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.Stream.StreamSourceInfo ref = (owt.base.Stream.StreamSourceInfo) getHEAP().get((int) __args__.get("refId"));
            
               owt.base.Stream.StreamSourceInfo.VideoSourceInfo __result__ = ref.videoSourceInfo;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.Stream.StreamSourceInfo::get_audioSourceInfo", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.Stream.StreamSourceInfo ref = (owt.base.Stream.StreamSourceInfo) getHEAP().get((int) __args__.get("refId"));
            
               owt.base.Stream.StreamSourceInfo.AudioSourceInfo __result__ = ref.audioSourceInfo;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.VideoCodecParameters::get_name", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.VideoCodecParameters ref = (owt.base.VideoCodecParameters) getHEAP().get((int) __args__.get("refId"));
            
               owt.base.MediaCodecs.VideoCodec __result__ = ref.name;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.VideoCodecParameters::get_profile", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.VideoCodecParameters ref = (owt.base.VideoCodecParameters) getHEAP().get((int) __args__.get("refId"));
            
               owt.base.MediaCodecs.H264Profile __result__ = ref.profile;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = __result__.ordinal();
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.LocalStream::get_resolutionWidth", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.LocalStream ref = (owt.base.LocalStream) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.resolutionWidth;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.LocalStream::get_resolutionHeight", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.LocalStream ref = (owt.base.LocalStream) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.resolutionHeight;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.LocalStream::get_frameRate", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.LocalStream ref = (owt.base.LocalStream) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.frameRate;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.Stream.StreamSourceInfo.VideoSourceInfo::get_type", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.Stream.StreamSourceInfo.VideoSourceInfo ref = (owt.base.Stream.StreamSourceInfo.VideoSourceInfo) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.type;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.MediaConstraints.TrackKind::get_kind", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.MediaConstraints.TrackKind ref = (owt.base.MediaConstraints.TrackKind) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.kind;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.VideoEncodingParameters::get_maxBitrate", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.VideoEncodingParameters ref = (owt.base.VideoEncodingParameters) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.maxBitrate;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.VideoEncodingParameters::get_codec", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.VideoEncodingParameters ref = (owt.base.VideoEncodingParameters) getHEAP().get((int) __args__.get("refId"));
            
               owt.base.VideoCodecParameters __result__ = ref.codec;
            
               Integer jsonableResult = null;
               if (__result__ != null) {
                   jsonableResult = System.identityHashCode(__result__);
                   getHEAP().put(jsonableResult, __result__);
               }
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.Const::get_userAgent", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.Const ref = (owt.base.Const) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.userAgent;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.BuildConfig::get_DEBUG", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.BuildConfig ref = (owt.base.BuildConfig) getHEAP().get((int) __args__.get("refId"));
            
               boolean __result__ = ref.DEBUG;
            
               boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.OwtError::get_errorCode", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.OwtError ref = (owt.base.OwtError) getHEAP().get((int) __args__.get("refId"));
            
               int __result__ = ref.errorCode;
            
               int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("owt.base.OwtError::get_errorMessage", (__rawArgs__, __methodResult__) -> {
               Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;
            
               // ref object
               owt.base.OwtError ref = (owt.base.OwtError) getHEAP().get((int) __args__.get("refId"));
            
               String __result__ = ref.errorMessage;
            
               String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // getter
            put("org.webrtc.Size::get_width_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.Size ref = (org.webrtc.Size) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.width;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.Size::get_height_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.Size ref = (org.webrtc.Size) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.height;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.StatsReport::get_id_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.StatsReport ref = (org.webrtc.StatsReport) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.id;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.StatsReport::get_type_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.StatsReport ref = (org.webrtc.StatsReport) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.type;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.StatsReport::get_timestamp_batch", (__argsBatch__, __methodResult__) -> {
                List<Double> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.StatsReport ref = (org.webrtc.StatsReport) getHEAP().get((int) __args__.get("refId"));
            
                    double __result__ = ref.timestamp;
            
                    double jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.MediaCodecVideoEncoder.EncoderProperties::get_codecName_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.MediaCodecVideoEncoder.EncoderProperties ref = (org.webrtc.MediaCodecVideoEncoder.EncoderProperties) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.codecName;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.MediaCodecVideoEncoder.EncoderProperties::get_colorFormat_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.MediaCodecVideoEncoder.EncoderProperties ref = (org.webrtc.MediaCodecVideoEncoder.EncoderProperties) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.colorFormat;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.MediaCodecVideoEncoder.EncoderProperties::get_bitrateAdjustmentType_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.MediaCodecVideoEncoder.EncoderProperties ref = (org.webrtc.MediaCodecVideoEncoder.EncoderProperties) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.MediaCodecVideoEncoder.BitrateAdjustmentType __result__ = ref.bitrateAdjustmentType;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoEncoder.Settings::get_numberOfCores_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoEncoder.Settings ref = (org.webrtc.VideoEncoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.numberOfCores;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoEncoder.Settings::get_width_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoEncoder.Settings ref = (org.webrtc.VideoEncoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.width;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoEncoder.Settings::get_height_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoEncoder.Settings ref = (org.webrtc.VideoEncoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.height;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoEncoder.Settings::get_startBitrate_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoEncoder.Settings ref = (org.webrtc.VideoEncoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.startBitrate;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoEncoder.Settings::get_maxFramerate_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoEncoder.Settings ref = (org.webrtc.VideoEncoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.maxFramerate;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoEncoder.Settings::get_numberOfSimulcastStreams_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoEncoder.Settings ref = (org.webrtc.VideoEncoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.numberOfSimulcastStreams;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoEncoder.Settings::get_automaticResizeOn_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoEncoder.Settings ref = (org.webrtc.VideoEncoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.automaticResizeOn;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat::get_width_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.CameraEnumerationAndroid.CaptureFormat ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.width;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat::get_height_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.CameraEnumerationAndroid.CaptureFormat ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.height;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat::get_framerate_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.CameraEnumerationAndroid.CaptureFormat ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange __result__ = ref.framerate;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat::get_imageFormat_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.CameraEnumerationAndroid.CaptureFormat ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.imageFormat;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoDecoder.Settings::get_numberOfCores_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoDecoder.Settings ref = (org.webrtc.VideoDecoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.numberOfCores;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoDecoder.Settings::get_width_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoDecoder.Settings ref = (org.webrtc.VideoDecoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.width;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoDecoder.Settings::get_height_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoDecoder.Settings ref = (org.webrtc.VideoDecoder.Settings) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.height;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.Logging.TraceLevel::get_level_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.Logging.TraceLevel ref = (org.webrtc.Logging.TraceLevel) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.level;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.MediaStream::get_audioTracks_batch", (__argsBatch__, __methodResult__) -> {
                List<List<Integer>> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.MediaStream ref = (org.webrtc.MediaStream) getHEAP().get((int) __args__.get("refId"));
            
                    java.util.List<org.webrtc.AudioTrack> __result__ = ref.audioTracks;
            
                    List<Integer> jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = new ArrayList<>();
                for (org.webrtc.AudioTrack item : __result__) {
                    getHEAP().put(System.identityHashCode(item), item);
                    jsonableResult.add(System.identityHashCode(item));
                }
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.MediaStream::get_videoTracks_batch", (__argsBatch__, __methodResult__) -> {
                List<List<Integer>> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.MediaStream ref = (org.webrtc.MediaStream) getHEAP().get((int) __args__.get("refId"));
            
                    java.util.List<org.webrtc.VideoTrack> __result__ = ref.videoTracks;
            
                    List<Integer> jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = new ArrayList<>();
                for (org.webrtc.VideoTrack item : __result__) {
                    getHEAP().put(System.identityHashCode(item), item);
                    jsonableResult.add(System.identityHashCode(item));
                }
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.MediaStream::get_preservedVideoTracks_batch", (__argsBatch__, __methodResult__) -> {
                List<List<Integer>> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.MediaStream ref = (org.webrtc.MediaStream) getHEAP().get((int) __args__.get("refId"));
            
                    java.util.List<org.webrtc.VideoTrack> __result__ = ref.preservedVideoTracks;
            
                    List<Integer> jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = new ArrayList<>();
                for (org.webrtc.VideoTrack item : __result__) {
                    getHEAP().put(System.identityHashCode(item), item);
                    jsonableResult.add(System.identityHashCode(item));
                }
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.SessionDescription::get_type_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.SessionDescription ref = (org.webrtc.SessionDescription) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.SessionDescription.Type __result__ = ref.type;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.SessionDescription::get_description_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.SessionDescription ref = (org.webrtc.SessionDescription) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.description;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoEncoder.ScalingSettings::get_on_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoEncoder.ScalingSettings ref = (org.webrtc.VideoEncoder.ScalingSettings) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.on;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoEncoder.ScalingSettings::get_low_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoEncoder.ScalingSettings ref = (org.webrtc.VideoEncoder.ScalingSettings) getHEAP().get((int) __args__.get("refId"));
            
                    Integer __result__ = ref.low;
            
                    Integer jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoEncoder.ScalingSettings::get_high_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoEncoder.ScalingSettings ref = (org.webrtc.VideoEncoder.ScalingSettings) getHEAP().get((int) __args__.get("refId"));
            
                    Integer __result__ = ref.high;
            
                    Integer jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.VideoEncoder.ScalingSettings::get_OFF_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.VideoEncoder.ScalingSettings ref = (org.webrtc.VideoEncoder.ScalingSettings) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.VideoEncoder.ScalingSettings __result__ = ref.OFF;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.NetworkMonitorAutoDetect.NetworkInformation::get_name_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.NetworkMonitorAutoDetect.NetworkInformation ref = (org.webrtc.NetworkMonitorAutoDetect.NetworkInformation) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.name;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.NetworkMonitorAutoDetect.NetworkInformation::get_type_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.NetworkMonitorAutoDetect.NetworkInformation ref = (org.webrtc.NetworkMonitorAutoDetect.NetworkInformation) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.NetworkMonitorAutoDetect.ConnectionType __result__ = ref.type;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.NetworkMonitorAutoDetect.NetworkInformation::get_underlyingTypeForVpn_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.NetworkMonitorAutoDetect.NetworkInformation ref = (org.webrtc.NetworkMonitorAutoDetect.NetworkInformation) getHEAP().get((int) __args__.get("refId"));
            
                    org.webrtc.NetworkMonitorAutoDetect.ConnectionType __result__ = ref.underlyingTypeForVpn;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = __result__.ordinal();
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.NetworkMonitorAutoDetect.NetworkInformation::get_handle_batch", (__argsBatch__, __methodResult__) -> {
                List<Long> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.NetworkMonitorAutoDetect.NetworkInformation ref = (org.webrtc.NetworkMonitorAutoDetect.NetworkInformation) getHEAP().get((int) __args__.get("refId"));
            
                    long __result__ = ref.handle;
            
                    long jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnectionFactory.Options::get_networkIgnoreMask_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.networkIgnoreMask;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnectionFactory.Options::get_disableEncryption_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.disableEncryption;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("org.webrtc.PeerConnectionFactory.Options::get_disableNetworkMonitor_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    org.webrtc.PeerConnectionFactory.Options ref = (org.webrtc.PeerConnectionFactory.Options) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.disableNetworkMonitor;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
        }};
    }
}
