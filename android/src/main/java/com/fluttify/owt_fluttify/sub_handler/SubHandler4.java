//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package com.fluttify.owt_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import com.fluttify.owt_fluttify.OwtFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler4 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // method
            put("org.webrtc.ScreenCapturerAndroid::getNumCapturedFrames", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.ScreenCapturerAndroid ref = (org.webrtc.ScreenCapturerAndroid) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.ScreenCapturerAndroid@" + refId + "::getNumCapturedFrames(" + "" + ")");
                }
            
                // invoke native method
                long __result__;
                try {
                    __result__ = ref.getNumCapturedFrames();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                long jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaConstraints.KeyValuePair::getKey", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaConstraints.KeyValuePair ref = (org.webrtc.MediaConstraints.KeyValuePair) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaConstraints.KeyValuePair@" + refId + "::getKey(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = ref.getKey();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaConstraints.KeyValuePair::getValue", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaConstraints.KeyValuePair ref = (org.webrtc.MediaConstraints.KeyValuePair) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaConstraints.KeyValuePair@" + refId + "::getValue(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = ref.getValue();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.CameraVideoCapturer::switchCamera", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.CameraVideoCapturer ref = (org.webrtc.CameraVideoCapturer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.CameraVideoCapturer@" + refId + "::switchCamera(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.switchCamera(new org.webrtc.CameraVideoCapturer.CameraSwitchHandler() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.CameraVideoCapturer::switchCamera::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onCameraSwitchDone(boolean var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onCameraSwitchDone(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            boolean argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.CameraVideoCapturer.CameraSwitchHandler::onCameraSwitchDone",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onCameraSwitchError(String var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onCameraSwitchError(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            String argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.CameraVideoCapturer.CameraSwitchHandler::onCameraSwitchError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.CameraVideoCapturer::removeMediaRecorderFromCamera", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.CameraVideoCapturer ref = (org.webrtc.CameraVideoCapturer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.CameraVideoCapturer@" + refId + "::removeMediaRecorderFromCamera(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.removeMediaRecorderFromCamera(new org.webrtc.CameraVideoCapturer.MediaRecorderHandler() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.CameraVideoCapturer::removeMediaRecorderFromCamera::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onMediaRecorderSuccess() {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onMediaRecorderSuccess(" + "" + ")");
                            }
            
                            // convert to jsonable data
            
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.CameraVideoCapturer.MediaRecorderHandler::onMediaRecorderSuccess",
                                        new HashMap<String, Object>() {{
                    
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onMediaRecorderError(String var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onMediaRecorderError(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            String argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.CameraVideoCapturer.MediaRecorderHandler::onMediaRecorderError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoEncoder.BitrateAllocation::getSum", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoEncoder.BitrateAllocation ref = (org.webrtc.VideoEncoder.BitrateAllocation) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoEncoder.BitrateAllocation@" + refId + "::getSum(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getSum();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection.Observer::onSignalingChange", (__args__, __methodResult__) -> {
                // args
                // enum arg
                org.webrtc.PeerConnection.SignalingState var1 = org.webrtc.PeerConnection.SignalingState.values()[(int) ((Map<String, Object>) __args__).get("var1")];
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.Observer ref = (org.webrtc.PeerConnection.Observer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection.Observer@" + refId + "::onSignalingChange(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onSignalingChange(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection.Observer::onIceConnectionChange", (__args__, __methodResult__) -> {
                // args
                // enum arg
                org.webrtc.PeerConnection.IceConnectionState var1 = org.webrtc.PeerConnection.IceConnectionState.values()[(int) ((Map<String, Object>) __args__).get("var1")];
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.Observer ref = (org.webrtc.PeerConnection.Observer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection.Observer@" + refId + "::onIceConnectionChange(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onIceConnectionChange(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection.Observer::onIceConnectionReceivingChange", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.Observer ref = (org.webrtc.PeerConnection.Observer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection.Observer@" + refId + "::onIceConnectionReceivingChange(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onIceConnectionReceivingChange(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection.Observer::onIceGatheringChange", (__args__, __methodResult__) -> {
                // args
                // enum arg
                org.webrtc.PeerConnection.IceGatheringState var1 = org.webrtc.PeerConnection.IceGatheringState.values()[(int) ((Map<String, Object>) __args__).get("var1")];
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.Observer ref = (org.webrtc.PeerConnection.Observer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection.Observer@" + refId + "::onIceGatheringChange(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onIceGatheringChange(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection.Observer::onIceCandidate", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                org.webrtc.IceCandidate var1 = __var1RefId__ != null ? (org.webrtc.IceCandidate) getHEAP().get(__var1RefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.Observer ref = (org.webrtc.PeerConnection.Observer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection.Observer@" + refId + "::onIceCandidate(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onIceCandidate(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection.Observer::onAddStream", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                org.webrtc.MediaStream var1 = __var1RefId__ != null ? (org.webrtc.MediaStream) getHEAP().get(__var1RefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.Observer ref = (org.webrtc.PeerConnection.Observer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection.Observer@" + refId + "::onAddStream(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onAddStream(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection.Observer::onRemoveStream", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                org.webrtc.MediaStream var1 = __var1RefId__ != null ? (org.webrtc.MediaStream) getHEAP().get(__var1RefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.Observer ref = (org.webrtc.PeerConnection.Observer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection.Observer@" + refId + "::onRemoveStream(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onRemoveStream(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection.Observer::onDataChannel", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                org.webrtc.DataChannel var1 = __var1RefId__ != null ? (org.webrtc.DataChannel) getHEAP().get(__var1RefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.Observer ref = (org.webrtc.PeerConnection.Observer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection.Observer@" + refId + "::onDataChannel(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onDataChannel(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection.Observer::onRenegotiationNeeded", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.Observer ref = (org.webrtc.PeerConnection.Observer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection.Observer@" + refId + "::onRenegotiationNeeded(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.onRenegotiationNeeded();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection.Observer::onTrack", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __transceiverRefId__ = (Integer) ((Map<String, Object>) __args__).get("transceiver");
                org.webrtc.RtpTransceiver transceiver = __transceiverRefId__ != null ? (org.webrtc.RtpTransceiver) getHEAP().get(__transceiverRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection.Observer ref = (org.webrtc.PeerConnection.Observer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection.Observer@" + refId + "::onTrack(" + transceiver + ")");
                }
            
                // invoke native method
                try {
                    ref.onTrack(transceiver);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.ThreadUtils::checkIsOnMainThread", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.ThreadUtils::checkIsOnMainThread(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.ThreadUtils.checkIsOnMainThread();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.ThreadUtils::executeUninterruptibly", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.ThreadUtils::executeUninterruptibly(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.ThreadUtils.executeUninterruptibly(new org.webrtc.ThreadUtils.BlockingOperation() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.ThreadUtils::executeUninterruptibly::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void run() {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: run(" + "" + ")");
                            }
            
                            // convert to jsonable data
            
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.ThreadUtils.BlockingOperation::run",
                                        new HashMap<String, Object>() {{
                    
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.ThreadUtils.ThreadChecker::checkIsOnValidThread", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.ThreadUtils.ThreadChecker ref = (org.webrtc.ThreadUtils.ThreadChecker) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.ThreadUtils.ThreadChecker@" + refId + "::checkIsOnValidThread(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.checkIsOnValidThread();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.ThreadUtils.ThreadChecker::detachThread", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.ThreadUtils.ThreadChecker ref = (org.webrtc.ThreadUtils.ThreadChecker) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.ThreadUtils.ThreadChecker@" + refId + "::detachThread(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.detachThread();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DtmfSender::canInsertDtmf", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DtmfSender ref = (org.webrtc.DtmfSender) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DtmfSender@" + refId + "::canInsertDtmf(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.canInsertDtmf();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DtmfSender::insertDtmf", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String tones = (String) ((Map<String, Object>) __args__).get("tones");
                // jsonable arg
                int duration = (int) ((Map<String, Object>) __args__).get("duration");
                // jsonable arg
                int interToneGap = (int) ((Map<String, Object>) __args__).get("interToneGap");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DtmfSender ref = (org.webrtc.DtmfSender) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DtmfSender@" + refId + "::insertDtmf(" + tones + duration + interToneGap + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.insertDtmf(tones, duration, interToneGap);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DtmfSender::tones", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DtmfSender ref = (org.webrtc.DtmfSender) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DtmfSender@" + refId + "::tones(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = ref.tones();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DtmfSender::duration", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DtmfSender ref = (org.webrtc.DtmfSender) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DtmfSender@" + refId + "::duration(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.duration();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DtmfSender::interToneGap", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DtmfSender ref = (org.webrtc.DtmfSender) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DtmfSender@" + refId + "::interToneGap(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.interToneGap();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DtmfSender::dispose", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DtmfSender ref = (org.webrtc.DtmfSender) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DtmfSender@" + refId + "::dispose(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.dispose();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.Logging::enableLogThreads", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.Logging::enableLogThreads(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.Logging.enableLogThreads();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.Logging::enableLogTimeStamps", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.Logging::enableLogTimeStamps(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.Logging.enableLogTimeStamps();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.Logging::enableLogToDebugOutput", (__args__, __methodResult__) -> {
                // args
                // enum arg
                org.webrtc.Logging.Severity severity = org.webrtc.Logging.Severity.values()[(int) ((Map<String, Object>) __args__).get("severity")];
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.Logging::enableLogToDebugOutput(" + severity + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.Logging.enableLogToDebugOutput(severity);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.Logging::log", (__args__, __methodResult__) -> {
                // args
                // enum arg
                org.webrtc.Logging.Severity severity = org.webrtc.Logging.Severity.values()[(int) ((Map<String, Object>) __args__).get("severity")];
                // jsonable arg
                String tag = (String) ((Map<String, Object>) __args__).get("tag");
                // jsonable arg
                String message = (String) ((Map<String, Object>) __args__).get("message");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.Logging::log(" + severity + tag + message + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.Logging.log(severity, tag, message);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.AudioTrack::setVolume", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                double volume = (double) ((Map<String, Object>) __args__).get("volume");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.AudioTrack ref = (org.webrtc.AudioTrack) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.AudioTrack@" + refId + "::setVolume(" + volume + ")");
                }
            
                // invoke native method
                try {
                    ref.setVolume(volume);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DataChannel.Observer::onBufferedAmountChange", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                long var1 = (long) (int) ((Map<String, Object>) __args__).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel.Observer ref = (org.webrtc.DataChannel.Observer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DataChannel.Observer@" + refId + "::onBufferedAmountChange(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onBufferedAmountChange(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DataChannel.Observer::onStateChange", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel.Observer ref = (org.webrtc.DataChannel.Observer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DataChannel.Observer@" + refId + "::onStateChange(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.onStateChange();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DataChannel.Observer::onMessage", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                org.webrtc.DataChannel.Buffer var1 = __var1RefId__ != null ? (org.webrtc.DataChannel.Buffer) getHEAP().get(__var1RefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel.Observer ref = (org.webrtc.DataChannel.Observer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DataChannel.Observer@" + refId + "::onMessage(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onMessage(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.Metrics::enable", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.Metrics::enable(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.Metrics.enable();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.Metrics::getAndReset", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.Metrics::getAndReset(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.Metrics __result__;
                try {
                    __result__ = org.webrtc.Metrics.getAndReset();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoDecoder::createNativeVideoDecoder", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoDecoder ref = (org.webrtc.VideoDecoder) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoDecoder@" + refId + "::createNativeVideoDecoder(" + "" + ")");
                }
            
                // invoke native method
                long __result__;
                try {
                    __result__ = ref.createNativeVideoDecoder();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                long jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoDecoder::initDecode", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                org.webrtc.VideoDecoder.Settings var1 = __var1RefId__ != null ? (org.webrtc.VideoDecoder.Settings) getHEAP().get(__var1RefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoDecoder ref = (org.webrtc.VideoDecoder) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoDecoder@" + refId + "::initDecode(" + var1 + ")");
                }
            
                // invoke native method
                org.webrtc.VideoCodecStatus __result__;
                try {
                    __result__ = ref.initDecode(var1, new org.webrtc.VideoDecoder.Callback() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.VideoDecoder::initDecode::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onDecodedFrame(org.webrtc.VideoFrame var1, Integer var2, Integer var3) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onDecodedFrame(" + var1 + var2 + var3 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
                            // jsonable arg
                            Integer argvar2 = var2;
                            // jsonable arg
                            Integer argvar3 = var3;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.VideoDecoder.Callback::onDecodedFrame",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                            put("var2", argvar2);
                                            put("var3", argvar3);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoDecoder::release", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoDecoder ref = (org.webrtc.VideoDecoder) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoDecoder@" + refId + "::release(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.VideoCodecStatus __result__;
                try {
                    __result__ = ref.release();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoDecoder::decode", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __var1RefId__ = (Integer) ((Map<String, Object>) __args__).get("var1");
                org.webrtc.EncodedImage var1 = __var1RefId__ != null ? (org.webrtc.EncodedImage) getHEAP().get(__var1RefId__) : null;
                // ref arg
                Integer __var2RefId__ = (Integer) ((Map<String, Object>) __args__).get("var2");
                org.webrtc.VideoDecoder.DecodeInfo var2 = __var2RefId__ != null ? (org.webrtc.VideoDecoder.DecodeInfo) getHEAP().get(__var2RefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoDecoder ref = (org.webrtc.VideoDecoder) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoDecoder@" + refId + "::decode(" + var1 + var2 + ")");
                }
            
                // invoke native method
                org.webrtc.VideoCodecStatus __result__;
                try {
                    __result__ = ref.decode(var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoDecoder::getPrefersLateDecoding", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoDecoder ref = (org.webrtc.VideoDecoder) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoDecoder@" + refId + "::getPrefersLateDecoding(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.getPrefersLateDecoding();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoDecoder::getImplementationName", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoDecoder ref = (org.webrtc.VideoDecoder) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoDecoder@" + refId + "::getImplementationName(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = ref.getImplementationName();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.TurnCustomizer::dispose", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.TurnCustomizer ref = (org.webrtc.TurnCustomizer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.TurnCustomizer@" + refId + "::dispose(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.dispose();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.Participant::addObserver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Participant ref = (owt.conference.Participant) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.Participant@" + refId + "::addObserver(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.addObserver(new owt.conference.Participant.ParticipantObserver() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.conference.Participant::addObserver::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onLeft() {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onLeft(" + "" + ")");
                            }
            
                            // convert to jsonable data
            
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Participant.ParticipantObserver::onLeft",
                                        new HashMap<String, Object>() {{
                    
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.Participant::removeObserver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Participant ref = (owt.conference.Participant) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.Participant@" + refId + "::removeObserver(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.removeObserver(new owt.conference.Participant.ParticipantObserver() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.conference.Participant::removeObserver::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onLeft() {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onLeft(" + "" + ")");
                            }
            
                            // convert to jsonable data
            
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Participant.ParticipantObserver::onLeft",
                                        new HashMap<String, Object>() {{
                    
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.Publication::addObserver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Publication ref = (owt.conference.Publication) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.Publication@" + refId + "::addObserver(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.addObserver(new owt.conference.Publication.PublicationObserver() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.conference.Publication::addObserver::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onEnded() {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onEnded(" + "" + ")");
                            }
            
                            // convert to jsonable data
            
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Publication.PublicationObserver::onEnded",
                                        new HashMap<String, Object>() {{
                    
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onError(owt.base.OwtError var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onError(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Publication.PublicationObserver::onError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onMute(owt.base.MediaConstraints.TrackKind var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onMute(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // enum arg
                            int argvar1 = var1.ordinal();
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Publication.PublicationObserver::onMute",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onUnmute(owt.base.MediaConstraints.TrackKind var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onUnmute(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // enum arg
                            int argvar1 = var1.ordinal();
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Publication.PublicationObserver::onUnmute",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.Publication::removeObserver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Publication ref = (owt.conference.Publication) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.Publication@" + refId + "::removeObserver(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.removeObserver(new owt.conference.Publication.PublicationObserver() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.conference.Publication::removeObserver::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onEnded() {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onEnded(" + "" + ")");
                            }
            
                            // convert to jsonable data
            
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Publication.PublicationObserver::onEnded",
                                        new HashMap<String, Object>() {{
                    
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onError(owt.base.OwtError var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onError(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Publication.PublicationObserver::onError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onMute(owt.base.MediaConstraints.TrackKind var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onMute(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // enum arg
                            int argvar1 = var1.ordinal();
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Publication.PublicationObserver::onMute",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onUnmute(owt.base.MediaConstraints.TrackKind var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onUnmute(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // enum arg
                            int argvar1 = var1.ordinal();
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Publication.PublicationObserver::onUnmute",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.Publication::mute", (__args__, __methodResult__) -> {
                // args
                // enum arg
                owt.base.MediaConstraints.TrackKind trackKind = owt.base.MediaConstraints.TrackKind.values()[(int) ((Map<String, Object>) __args__).get("trackKind")];
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Publication ref = (owt.conference.Publication) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.Publication@" + refId + "::mute(" + trackKind + ")");
                }
            
                // invoke native method
                try {
                    ref.mute(trackKind, new owt.base.ActionCallback<java.lang.Void>() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.conference.Publication::mute::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onSuccess(java.lang.Void var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onSuccess(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.base.ActionCallback::onSuccess",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onFailure(owt.base.OwtError var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFailure(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.base.ActionCallback::onFailure",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.Publication::unmute", (__args__, __methodResult__) -> {
                // args
                // enum arg
                owt.base.MediaConstraints.TrackKind trackKind = owt.base.MediaConstraints.TrackKind.values()[(int) ((Map<String, Object>) __args__).get("trackKind")];
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Publication ref = (owt.conference.Publication) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.Publication@" + refId + "::unmute(" + trackKind + ")");
                }
            
                // invoke native method
                try {
                    ref.unmute(trackKind, new owt.base.ActionCallback<java.lang.Void>() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.conference.Publication::unmute::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onSuccess(java.lang.Void var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onSuccess(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.base.ActionCallback::onSuccess",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onFailure(owt.base.OwtError var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFailure(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.base.ActionCallback::onFailure",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.Publication::stop", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Publication ref = (owt.conference.Publication) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.Publication@" + refId + "::stop(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.stop();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.ConferenceInfo::self", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.ConferenceInfo ref = (owt.conference.ConferenceInfo) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.ConferenceInfo@" + refId + "::self(" + "" + ")");
                }
            
                // invoke native method
                owt.conference.Participant __result__;
                try {
                    __result__ = ref.self();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.ConferenceInfo::getParticipants", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.ConferenceInfo ref = (owt.conference.ConferenceInfo) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.ConferenceInfo@" + refId + "::getParticipants(" + "" + ")");
                }
            
                // invoke native method
                java.util.List<owt.conference.Participant> __result__;
                try {
                    __result__ = ref.getParticipants();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = new ArrayList<>();
                    for (owt.conference.Participant item : __result__) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.ConferenceInfo::getRemoteStreams", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.ConferenceInfo ref = (owt.conference.ConferenceInfo) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.ConferenceInfo@" + refId + "::getRemoteStreams(" + "" + ")");
                }
            
                // invoke native method
                java.util.List<owt.conference.RemoteStream> __result__;
                try {
                    __result__ = ref.getRemoteStreams();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = new ArrayList<>();
                    for (owt.conference.RemoteStream item : __result__) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.RemoteMixedStream.RemoteMixedStreamObserver::onActiveAudioInputChange", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.RemoteMixedStream.RemoteMixedStreamObserver ref = (owt.conference.RemoteMixedStream.RemoteMixedStreamObserver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.RemoteMixedStream.RemoteMixedStreamObserver@" + refId + "::onActiveAudioInputChange(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onActiveAudioInputChange(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.Subscription::mute", (__args__, __methodResult__) -> {
                // args
                // enum arg
                owt.base.MediaConstraints.TrackKind trackKind = owt.base.MediaConstraints.TrackKind.values()[(int) ((Map<String, Object>) __args__).get("trackKind")];
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Subscription ref = (owt.conference.Subscription) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.Subscription@" + refId + "::mute(" + trackKind + ")");
                }
            
                // invoke native method
                try {
                    ref.mute(trackKind, new owt.base.ActionCallback<java.lang.Void>() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.conference.Subscription::mute::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onSuccess(java.lang.Void var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onSuccess(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.base.ActionCallback::onSuccess",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onFailure(owt.base.OwtError var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFailure(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.base.ActionCallback::onFailure",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.Subscription::unmute", (__args__, __methodResult__) -> {
                // args
                // enum arg
                owt.base.MediaConstraints.TrackKind trackKind = owt.base.MediaConstraints.TrackKind.values()[(int) ((Map<String, Object>) __args__).get("trackKind")];
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Subscription ref = (owt.conference.Subscription) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.Subscription@" + refId + "::unmute(" + trackKind + ")");
                }
            
                // invoke native method
                try {
                    ref.unmute(trackKind, new owt.base.ActionCallback<java.lang.Void>() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.conference.Subscription::unmute::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onSuccess(java.lang.Void var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onSuccess(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.base.ActionCallback::onSuccess",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onFailure(owt.base.OwtError var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFailure(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.base.ActionCallback::onFailure",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.Subscription::applyOptions", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __updateOptionsRefId__ = (Integer) ((Map<String, Object>) __args__).get("updateOptions");
                owt.conference.Subscription.VideoUpdateOptions updateOptions = __updateOptionsRefId__ != null ? (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get(__updateOptionsRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Subscription ref = (owt.conference.Subscription) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.Subscription@" + refId + "::applyOptions(" + updateOptions + ")");
                }
            
                // invoke native method
                try {
                    ref.applyOptions(updateOptions, new owt.base.ActionCallback<java.lang.Void>() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.conference.Subscription::applyOptions::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onSuccess(java.lang.Void var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onSuccess(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.base.ActionCallback::onSuccess",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onFailure(owt.base.OwtError var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFailure(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.base.ActionCallback::onFailure",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.Subscription::stop", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Subscription ref = (owt.conference.Subscription) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.Subscription@" + refId + "::stop(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.stop();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.Subscription::addObserver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Subscription ref = (owt.conference.Subscription) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.Subscription@" + refId + "::addObserver(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.addObserver(new owt.conference.Subscription.SubscriptionObserver() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.conference.Subscription::addObserver::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onEnded() {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onEnded(" + "" + ")");
                            }
            
                            // convert to jsonable data
            
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Subscription.SubscriptionObserver::onEnded",
                                        new HashMap<String, Object>() {{
                    
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onError(owt.base.OwtError var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onError(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Subscription.SubscriptionObserver::onError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onMute(owt.base.MediaConstraints.TrackKind var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onMute(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // enum arg
                            int argvar1 = var1.ordinal();
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Subscription.SubscriptionObserver::onMute",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onUnmute(owt.base.MediaConstraints.TrackKind var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onUnmute(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // enum arg
                            int argvar1 = var1.ordinal();
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Subscription.SubscriptionObserver::onUnmute",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.Subscription::removeObserver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.Subscription ref = (owt.conference.Subscription) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.Subscription@" + refId + "::removeObserver(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.removeObserver(new owt.conference.Subscription.SubscriptionObserver() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.conference.Subscription::removeObserver::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onEnded() {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onEnded(" + "" + ")");
                            }
            
                            // convert to jsonable data
            
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Subscription.SubscriptionObserver::onEnded",
                                        new HashMap<String, Object>() {{
                    
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onError(owt.base.OwtError var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onError(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Subscription.SubscriptionObserver::onError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onMute(owt.base.MediaConstraints.TrackKind var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onMute(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // enum arg
                            int argvar1 = var1.ordinal();
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Subscription.SubscriptionObserver::onMute",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onUnmute(owt.base.MediaConstraints.TrackKind var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onUnmute(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // enum arg
                            int argvar1 = var1.ordinal();
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.conference.Subscription.SubscriptionObserver::onUnmute",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.conference.RemoteMixedStream::activeAudioInput", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.conference.RemoteMixedStream ref = (owt.conference.RemoteMixedStream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.conference.RemoteMixedStream@" + refId + "::activeAudioInput(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = ref.activeAudioInput();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.p2p.Publication::addObserver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.p2p.Publication ref = (owt.p2p.Publication) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.p2p.Publication@" + refId + "::addObserver(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.addObserver(new owt.p2p.Publication.PublicationObserver() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.p2p.Publication::addObserver::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onEnded() {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onEnded(" + "" + ")");
                            }
            
                            // convert to jsonable data
            
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.p2p.Publication.PublicationObserver::onEnded",
                                        new HashMap<String, Object>() {{
                    
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.p2p.Publication::removeObserver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.p2p.Publication ref = (owt.p2p.Publication) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.p2p.Publication@" + refId + "::removeObserver(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.removeObserver(new owt.p2p.Publication.PublicationObserver() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.p2p.Publication::removeObserver::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onEnded() {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onEnded(" + "" + ")");
                            }
            
                            // convert to jsonable data
            
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.p2p.Publication.PublicationObserver::onEnded",
                                        new HashMap<String, Object>() {{
                    
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.p2p.Publication::stop", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.p2p.Publication ref = (owt.p2p.Publication) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.p2p.Publication@" + refId + "::stop(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.stop();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.p2p.SignalingChannelInterface.SignalingChannelObserver::onMessage", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) __args__).get("var2");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.p2p.SignalingChannelInterface.SignalingChannelObserver ref = (owt.p2p.SignalingChannelInterface.SignalingChannelObserver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.p2p.SignalingChannelInterface.SignalingChannelObserver@" + refId + "::onMessage(" + var1 + var2 + ")");
                }
            
                // invoke native method
                try {
                    ref.onMessage(var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.p2p.SignalingChannelInterface.SignalingChannelObserver::onServerDisconnected", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.p2p.SignalingChannelInterface.SignalingChannelObserver ref = (owt.p2p.SignalingChannelInterface.SignalingChannelObserver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.p2p.SignalingChannelInterface.SignalingChannelObserver@" + refId + "::onServerDisconnected(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.onServerDisconnected();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.p2p.P2PClient::addObserver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.p2p.P2PClient ref = (owt.p2p.P2PClient) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.p2p.P2PClient@" + refId + "::addObserver(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.addObserver(new owt.p2p.P2PClient.P2PClientObserver() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.p2p.P2PClient::addObserver::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onServerDisconnected() {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onServerDisconnected(" + "" + ")");
                            }
            
                            // convert to jsonable data
            
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.p2p.P2PClient.P2PClientObserver::onServerDisconnected",
                                        new HashMap<String, Object>() {{
                    
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onStreamAdded(owt.p2p.RemoteStream var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onStreamAdded(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.p2p.P2PClient.P2PClientObserver::onStreamAdded",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onDataReceived(String var1, String var2) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onDataReceived(" + var1 + var2 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            String argvar1 = var1;
                            // jsonable arg
                            String argvar2 = var2;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.p2p.P2PClient.P2PClientObserver::onDataReceived",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                            put("var2", argvar2);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.p2p.P2PClient::removeObserver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.p2p.P2PClient ref = (owt.p2p.P2PClient) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.p2p.P2PClient@" + refId + "::removeObserver(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.removeObserver(new owt.p2p.P2PClient.P2PClientObserver() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.p2p.P2PClient::removeObserver::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onServerDisconnected() {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onServerDisconnected(" + "" + ")");
                            }
            
                            // convert to jsonable data
            
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.p2p.P2PClient.P2PClientObserver::onServerDisconnected",
                                        new HashMap<String, Object>() {{
                    
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onStreamAdded(owt.p2p.RemoteStream var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onStreamAdded(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.p2p.P2PClient.P2PClientObserver::onStreamAdded",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onDataReceived(String var1, String var2) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onDataReceived(" + var1 + var2 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            String argvar1 = var1;
                            // jsonable arg
                            String argvar2 = var2;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.p2p.P2PClient.P2PClientObserver::onDataReceived",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                            put("var2", argvar2);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.p2p.P2PClient::addAllowedRemotePeer", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String peerId = (String) ((Map<String, Object>) __args__).get("peerId");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.p2p.P2PClient ref = (owt.p2p.P2PClient) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.p2p.P2PClient@" + refId + "::addAllowedRemotePeer(" + peerId + ")");
                }
            
                // invoke native method
                try {
                    ref.addAllowedRemotePeer(peerId);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.p2p.P2PClient::removeAllowedRemotePeer", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String peerId = (String) ((Map<String, Object>) __args__).get("peerId");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.p2p.P2PClient ref = (owt.p2p.P2PClient) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.p2p.P2PClient@" + refId + "::removeAllowedRemotePeer(" + peerId + ")");
                }
            
                // invoke native method
                try {
                    ref.removeAllowedRemotePeer(peerId);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.p2p.P2PClient::connect", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String token = (String) ((Map<String, Object>) __args__).get("token");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.p2p.P2PClient ref = (owt.p2p.P2PClient) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.p2p.P2PClient@" + refId + "::connect(" + token + ")");
                }
            
                // invoke native method
                try {
                    ref.connect(token, new owt.base.ActionCallback<String>() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.p2p.P2PClient::connect::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onSuccess(String var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onSuccess(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            String argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.base.ActionCallback::onSuccess",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onFailure(owt.base.OwtError var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFailure(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.base.ActionCallback::onFailure",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.p2p.P2PClient::disconnect", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.p2p.P2PClient ref = (owt.p2p.P2PClient) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.p2p.P2PClient@" + refId + "::disconnect(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.disconnect();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.p2p.P2PClient::publish", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String peerId = (String) ((Map<String, Object>) __args__).get("peerId");
                // ref arg
                Integer __localStreamRefId__ = (Integer) ((Map<String, Object>) __args__).get("localStream");
                owt.base.LocalStream localStream = __localStreamRefId__ != null ? (owt.base.LocalStream) getHEAP().get(__localStreamRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.p2p.P2PClient ref = (owt.p2p.P2PClient) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.p2p.P2PClient@" + refId + "::publish(" + peerId + localStream + ")");
                }
            
                // invoke native method
                try {
                    ref.publish(peerId, localStream, new owt.base.ActionCallback<owt.p2p.Publication>() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.p2p.P2PClient::publish::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onSuccess(owt.p2p.Publication var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onSuccess(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.base.ActionCallback::onSuccess",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onFailure(owt.base.OwtError var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFailure(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.base.ActionCallback::onFailure",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.p2p.P2PClient::stop", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String peerId = (String) ((Map<String, Object>) __args__).get("peerId");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.p2p.P2PClient ref = (owt.p2p.P2PClient) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.p2p.P2PClient@" + refId + "::stop(" + peerId + ")");
                }
            
                // invoke native method
                try {
                    ref.stop(peerId);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.p2p.P2PClient::send", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String peerId = (String) ((Map<String, Object>) __args__).get("peerId");
                // jsonable arg
                String message = (String) ((Map<String, Object>) __args__).get("message");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.p2p.P2PClient ref = (owt.p2p.P2PClient) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.p2p.P2PClient@" + refId + "::send(" + peerId + message + ")");
                }
            
                // invoke native method
                try {
                    ref.send(peerId, message, new owt.base.ActionCallback<java.lang.Void>() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "owt.p2p.P2PClient::send::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onSuccess(java.lang.Void var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onSuccess(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.base.ActionCallback::onSuccess",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                        @Override
                        public void onFailure(owt.base.OwtError var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFailure(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::owt.base.ActionCallback::onFailure",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.p2p.OwtP2PError::get", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int value = (int) ((Map<String, Object>) __args__).get("value");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.p2p.OwtP2PError::get(" + value + ")");
                }
            
                // invoke native method
                owt.p2p.OwtP2PError __result__;
                try {
                    __result__ = owt.p2p.OwtP2PError.get(value);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.Stream.StreamSourceInfo.AudioSourceInfo::get", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String info = (String) ((Map<String, Object>) __args__).get("info");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.Stream.StreamSourceInfo.AudioSourceInfo::get(" + info + ")");
                }
            
                // invoke native method
                owt.base.Stream.StreamSourceInfo.AudioSourceInfo __result__;
                try {
                    __result__ = owt.base.Stream.StreamSourceInfo.AudioSourceInfo.get(info);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.Publication::stop", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.Publication ref = (owt.base.Publication) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.Publication@" + refId + "::stop(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.stop();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.RemoteStream.StreamObserver::onEnded", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.RemoteStream.StreamObserver ref = (owt.base.RemoteStream.StreamObserver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.RemoteStream.StreamObserver@" + refId + "::onEnded(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.onEnded();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.RemoteStream.StreamObserver::onUpdated", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.RemoteStream.StreamObserver ref = (owt.base.RemoteStream.StreamObserver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.RemoteStream.StreamObserver@" + refId + "::onUpdated(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.onUpdated();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.MediaCodecs.AudioCodec::get", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String codecName = (String) ((Map<String, Object>) __args__).get("codecName");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.MediaCodecs.AudioCodec::get(" + codecName + ")");
                }
            
                // invoke native method
                owt.base.MediaCodecs.AudioCodec __result__;
                try {
                    __result__ = owt.base.MediaCodecs.AudioCodec.get(codecName);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.PeerConnectionChannel::disposed", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.PeerConnectionChannel ref = (owt.base.PeerConnectionChannel) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.PeerConnectionChannel@" + refId + "::disposed(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.disposed();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.Stream::hasVideo", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.Stream ref = (owt.base.Stream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.Stream@" + refId + "::hasVideo(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.hasVideo();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.Stream::hasAudio", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.Stream ref = (owt.base.Stream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.Stream@" + refId + "::hasAudio(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.hasAudio();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.Stream::getStreamSourceInfo", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.Stream ref = (owt.base.Stream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.Stream@" + refId + "::getStreamSourceInfo(" + "" + ")");
                }
            
                // invoke native method
                owt.base.Stream.StreamSourceInfo __result__;
                try {
                    __result__ = ref.getStreamSourceInfo();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.Stream::getAttributes", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.Stream ref = (owt.base.Stream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.Stream@" + refId + "::getAttributes(" + "" + ")");
                }
            
                // invoke native method
                java.util.HashMap<String,String> __result__;
                try {
                    __result__ = ref.getAttributes();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                java.util.HashMap<String,String> jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.Stream::setAttributes", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                java.util.HashMap<String,String> attributes = (java.util.HashMap<String,String>) ((Map<String, Object>) __args__).get("attributes");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.Stream ref = (owt.base.Stream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.Stream@" + refId + "::setAttributes(" + attributes + ")");
                }
            
                // invoke native method
                try {
                    ref.setAttributes(attributes);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.Stream::disableVideo", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.Stream ref = (owt.base.Stream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.Stream@" + refId + "::disableVideo(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.disableVideo();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.Stream::enableVideo", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.Stream ref = (owt.base.Stream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.Stream@" + refId + "::enableVideo(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.enableVideo();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.Stream::disableAudio", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.Stream ref = (owt.base.Stream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.Stream@" + refId + "::disableAudio(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.disableAudio();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.Stream::enableAudio", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.Stream ref = (owt.base.Stream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.Stream@" + refId + "::enableAudio(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.enableAudio();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.Stream::attach", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __videoSinkRefId__ = (Integer) ((Map<String, Object>) __args__).get("videoSink");
                org.webrtc.VideoSink videoSink = __videoSinkRefId__ != null ? (org.webrtc.VideoSink) getHEAP().get(__videoSinkRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.Stream ref = (owt.base.Stream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.Stream@" + refId + "::attach(" + videoSink + ")");
                }
            
                // invoke native method
                try {
                    ref.attach(videoSink);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.Stream::detach", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __videoSinkRefId__ = (Integer) ((Map<String, Object>) __args__).get("videoSink");
                org.webrtc.VideoSink videoSink = __videoSinkRefId__ != null ? (org.webrtc.VideoSink) getHEAP().get(__videoSinkRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.Stream ref = (owt.base.Stream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.Stream@" + refId + "::detach(" + videoSink + ")");
                }
            
                // invoke native method
                try {
                    ref.detach(videoSink);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.Stream::videoTrackId", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.Stream ref = (owt.base.Stream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.Stream@" + refId + "::videoTrackId(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = ref.videoTrackId();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.Stream::audioTrackId", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.Stream ref = (owt.base.Stream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.Stream@" + refId + "::audioTrackId(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = ref.audioTrackId();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.VideoCapturer::getWidth", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.VideoCapturer ref = (owt.base.VideoCapturer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.VideoCapturer@" + refId + "::getWidth(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getWidth();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.VideoCapturer::getHeight", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.VideoCapturer ref = (owt.base.VideoCapturer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.VideoCapturer@" + refId + "::getHeight(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getHeight();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.VideoCapturer::getFps", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.VideoCapturer ref = (owt.base.VideoCapturer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.VideoCapturer@" + refId + "::getFps(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getFps();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.VideoCapturer::getVideoSource", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.VideoCapturer ref = (owt.base.VideoCapturer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.VideoCapturer@" + refId + "::getVideoSource(" + "" + ")");
                }
            
                // invoke native method
                owt.base.Stream.StreamSourceInfo.VideoSourceInfo __result__;
                try {
                    __result__ = ref.getVideoSource();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.PeerConnectionChannel.PeerConnectionChannelObserver::onIceCandidate", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
                // ref arg
                Integer __var2RefId__ = (Integer) ((Map<String, Object>) __args__).get("var2");
                org.webrtc.IceCandidate var2 = __var2RefId__ != null ? (org.webrtc.IceCandidate) getHEAP().get(__var2RefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.PeerConnectionChannel.PeerConnectionChannelObserver ref = (owt.base.PeerConnectionChannel.PeerConnectionChannelObserver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.PeerConnectionChannel.PeerConnectionChannelObserver@" + refId + "::onIceCandidate(" + var1 + var2 + ")");
                }
            
                // invoke native method
                try {
                    ref.onIceCandidate(var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.PeerConnectionChannel.PeerConnectionChannelObserver::onLocalDescription", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
                // ref arg
                Integer __var2RefId__ = (Integer) ((Map<String, Object>) __args__).get("var2");
                org.webrtc.SessionDescription var2 = __var2RefId__ != null ? (org.webrtc.SessionDescription) getHEAP().get(__var2RefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.PeerConnectionChannel.PeerConnectionChannelObserver ref = (owt.base.PeerConnectionChannel.PeerConnectionChannelObserver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.PeerConnectionChannel.PeerConnectionChannelObserver@" + refId + "::onLocalDescription(" + var1 + var2 + ")");
                }
            
                // invoke native method
                try {
                    ref.onLocalDescription(var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.PeerConnectionChannel.PeerConnectionChannelObserver::onError", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                boolean var3 = (boolean) ((Map<String, Object>) __args__).get("var3");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.PeerConnectionChannel.PeerConnectionChannelObserver ref = (owt.base.PeerConnectionChannel.PeerConnectionChannelObserver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.PeerConnectionChannel.PeerConnectionChannelObserver@" + refId + "::onError(" + var1 + var2 + var3 + ")");
                }
            
                // invoke native method
                try {
                    ref.onError(var1, var2, var3);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.PeerConnectionChannel.PeerConnectionChannelObserver::onEnded", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.PeerConnectionChannel.PeerConnectionChannelObserver ref = (owt.base.PeerConnectionChannel.PeerConnectionChannelObserver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.PeerConnectionChannel.PeerConnectionChannelObserver@" + refId + "::onEnded(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onEnded(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.PeerConnectionChannel.PeerConnectionChannelObserver::onAddStream", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
                // ref arg
                Integer __var2RefId__ = (Integer) ((Map<String, Object>) __args__).get("var2");
                owt.base.RemoteStream var2 = __var2RefId__ != null ? (owt.base.RemoteStream) getHEAP().get(__var2RefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.PeerConnectionChannel.PeerConnectionChannelObserver ref = (owt.base.PeerConnectionChannel.PeerConnectionChannelObserver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.PeerConnectionChannel.PeerConnectionChannelObserver@" + refId + "::onAddStream(" + var1 + var2 + ")");
                }
            
                // invoke native method
                try {
                    ref.onAddStream(var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.PeerConnectionChannel.PeerConnectionChannelObserver::onDataChannelMessage", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) __args__).get("var2");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.PeerConnectionChannel.PeerConnectionChannelObserver ref = (owt.base.PeerConnectionChannel.PeerConnectionChannelObserver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.PeerConnectionChannel.PeerConnectionChannelObserver@" + refId + "::onDataChannelMessage(" + var1 + var2 + ")");
                }
            
                // invoke native method
                try {
                    ref.onDataChannelMessage(var1, var2);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.PeerConnectionChannel.PeerConnectionChannelObserver::onRenegotiationRequest", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.PeerConnectionChannel.PeerConnectionChannelObserver ref = (owt.base.PeerConnectionChannel.PeerConnectionChannelObserver) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.PeerConnectionChannel.PeerConnectionChannelObserver@" + refId + "::onRenegotiationRequest(" + var1 + ")");
                }
            
                // invoke native method
                try {
                    ref.onRenegotiationRequest(var1);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.CheckCondition::DCHECK__Object", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                java.lang.Object obj = (java.lang.Object) ((Map<String, Object>) __args__).get("obj");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.CheckCondition::DCHECK(" + obj + ")");
                }
            
                // invoke native method
                try {
                    owt.base.CheckCondition.DCHECK(obj);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.CheckCondition::RCHECK__Object", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                java.lang.Object object = (java.lang.Object) ((Map<String, Object>) __args__).get("object");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.CheckCondition::RCHECK(" + object + ")");
                }
            
                // invoke native method
                try {
                    owt.base.CheckCondition.RCHECK(object);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.CheckCondition::DCHECK__bool", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean condition = (boolean) ((Map<String, Object>) __args__).get("condition");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.CheckCondition::DCHECK(" + condition + ")");
                }
            
                // invoke native method
                try {
                    owt.base.CheckCondition.DCHECK(condition);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.CheckCondition::RCHECK__bool", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean condition = (boolean) ((Map<String, Object>) __args__).get("condition");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.CheckCondition::RCHECK(" + condition + ")");
                }
            
                // invoke native method
                try {
                    owt.base.CheckCondition.RCHECK(condition);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.LocalStream::dispose", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.LocalStream ref = (owt.base.LocalStream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.LocalStream@" + refId + "::dispose(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.dispose();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.RemoteStream::origin", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.RemoteStream ref = (owt.base.RemoteStream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.RemoteStream@" + refId + "::origin(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = ref.origin();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.RemoteStream::addObserver", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __observerRefId__ = (Integer) ((Map<String, Object>) __args__).get("observer");
                owt.base.RemoteStream.StreamObserver observer = __observerRefId__ != null ? (owt.base.RemoteStream.StreamObserver) getHEAP().get(__observerRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.RemoteStream ref = (owt.base.RemoteStream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.RemoteStream@" + refId + "::addObserver(" + observer + ")");
                }
            
                // invoke native method
                try {
                    ref.addObserver(observer);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.RemoteStream::removeObserver", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __observerRefId__ = (Integer) ((Map<String, Object>) __args__).get("observer");
                owt.base.RemoteStream.StreamObserver observer = __observerRefId__ != null ? (owt.base.RemoteStream.StreamObserver) getHEAP().get(__observerRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.RemoteStream ref = (owt.base.RemoteStream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.RemoteStream@" + refId + "::removeObserver(" + observer + ")");
                }
            
                // invoke native method
                try {
                    ref.removeObserver(observer);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.Stream.StreamSourceInfo.VideoSourceInfo::get", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String type = (String) ((Map<String, Object>) __args__).get("type");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.Stream.StreamSourceInfo.VideoSourceInfo::get(" + type + ")");
                }
            
                // invoke native method
                owt.base.Stream.StreamSourceInfo.VideoSourceInfo __result__;
                try {
                    __result__ = owt.base.Stream.StreamSourceInfo.VideoSourceInfo.get(type);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.ContextInitialization::create", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.ContextInitialization::create(" + "" + ")");
                }
            
                // invoke native method
                owt.base.ContextInitialization __result__;
                try {
                    __result__ = owt.base.ContextInitialization.create();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.ContextInitialization::addIgnoreNetworkType", (__args__, __methodResult__) -> {
                // args
                // enum arg
                owt.base.ContextInitialization.NetworkType ignoreNetworkType = owt.base.ContextInitialization.NetworkType.values()[(int) ((Map<String, Object>) __args__).get("ignoreNetworkType")];
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.ContextInitialization ref = (owt.base.ContextInitialization) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.ContextInitialization@" + refId + "::addIgnoreNetworkType(" + ignoreNetworkType + ")");
                }
            
                // invoke native method
                owt.base.ContextInitialization __result__;
                try {
                    __result__ = ref.addIgnoreNetworkType(ignoreNetworkType);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.ContextInitialization::setApplicationContext", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __ctxRefId__ = (Integer) ((Map<String, Object>) __args__).get("ctx");
                android.content.Context ctx = __ctxRefId__ != null ? (android.content.Context) getHEAP().get(__ctxRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.ContextInitialization ref = (owt.base.ContextInitialization) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.ContextInitialization@" + refId + "::setApplicationContext(" + ctx + ")");
                }
            
                // invoke native method
                owt.base.ContextInitialization __result__;
                try {
                    __result__ = ref.setApplicationContext(ctx);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.ContextInitialization::setVideoHardwareAccelerationOptions", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __localEglContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("localEglContext");
                org.webrtc.EglBase.Context localEglContext = __localEglContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__localEglContextRefId__) : null;
                // ref arg
                Integer __remoteEglContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("remoteEglContext");
                org.webrtc.EglBase.Context remoteEglContext = __remoteEglContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__remoteEglContextRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.ContextInitialization ref = (owt.base.ContextInitialization) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.ContextInitialization@" + refId + "::setVideoHardwareAccelerationOptions(" + localEglContext + remoteEglContext + ")");
                }
            
                // invoke native method
                owt.base.ContextInitialization __result__;
                try {
                    __result__ = ref.setVideoHardwareAccelerationOptions(localEglContext, remoteEglContext);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.ContextInitialization::addFieldTrials", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String fieldTrial = (String) ((Map<String, Object>) __args__).get("fieldTrial");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.ContextInitialization ref = (owt.base.ContextInitialization) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.ContextInitialization@" + refId + "::addFieldTrials(" + fieldTrial + ")");
                }
            
                // invoke native method
                owt.base.ContextInitialization __result__;
                try {
                    __result__ = ref.addFieldTrials(fieldTrial);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.ContextInitialization::setCustomizedVideoEncoderFactory", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __encoderFactoryRefId__ = (Integer) ((Map<String, Object>) __args__).get("encoderFactory");
                org.webrtc.VideoEncoderFactory encoderFactory = __encoderFactoryRefId__ != null ? (org.webrtc.VideoEncoderFactory) getHEAP().get(__encoderFactoryRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.ContextInitialization ref = (owt.base.ContextInitialization) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.ContextInitialization@" + refId + "::setCustomizedVideoEncoderFactory(" + encoderFactory + ")");
                }
            
                // invoke native method
                owt.base.ContextInitialization __result__;
                try {
                    __result__ = ref.setCustomizedVideoEncoderFactory(encoderFactory);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.ContextInitialization::setCustomizedVideoDecoderFactory", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __decoderFactoryRefId__ = (Integer) ((Map<String, Object>) __args__).get("decoderFactory");
                org.webrtc.VideoDecoderFactory decoderFactory = __decoderFactoryRefId__ != null ? (org.webrtc.VideoDecoderFactory) getHEAP().get(__decoderFactoryRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.ContextInitialization ref = (owt.base.ContextInitialization) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.ContextInitialization@" + refId + "::setCustomizedVideoDecoderFactory(" + decoderFactory + ")");
                }
            
                // invoke native method
                owt.base.ContextInitialization __result__;
                try {
                    __result__ = ref.setCustomizedVideoDecoderFactory(decoderFactory);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.ContextInitialization::setCustomizedAudioDeviceModule", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __admRefId__ = (Integer) ((Map<String, Object>) __args__).get("adm");
                org.webrtc.audio.AudioDeviceModule adm = __admRefId__ != null ? (org.webrtc.audio.AudioDeviceModule) getHEAP().get(__admRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.ContextInitialization ref = (owt.base.ContextInitialization) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.ContextInitialization@" + refId + "::setCustomizedAudioDeviceModule(" + adm + ")");
                }
            
                // invoke native method
                owt.base.ContextInitialization __result__;
                try {
                    __result__ = ref.setCustomizedAudioDeviceModule(adm);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.ContextInitialization::initialize", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                owt.base.ContextInitialization ref = (owt.base.ContextInitialization) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.ContextInitialization@" + refId + "::initialize(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.initialize();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("owt.base.MediaCodecs.VideoCodec::get", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String codecName = (String) ((Map<String, Object>) __args__).get("codecName");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: owt.base.MediaCodecs.VideoCodec::get(" + codecName + ")");
                }
            
                // invoke native method
                owt.base.MediaCodecs.VideoCodec __result__;
                try {
                    __result__ = owt.base.MediaCodecs.VideoCodec.get(codecName);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.GlUtil::checkNoGLES2Error_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    String msg = (String) ((Map<String, Object>) __args__).get("msg");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        org.webrtc.GlUtil.checkNoGLES2Error(msg);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.GlUtil::generateTexture_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int target = (int) ((Map<String, Object>) __args__).get("target");
            
                    // ref
            
            
                    // invoke native method
                    int __result__;
                    try {
                        __result__ = org.webrtc.GlUtil.generateTexture(target);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaSource::state_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.MediaSource ref = (org.webrtc.MediaSource) getHEAP().get(refId);
            
                    // invoke native method
                    org.webrtc.MediaSource.State __result__;
                    try {
                        __result__ = ref.state();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaSource::dispose_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.MediaSource ref = (org.webrtc.MediaSource) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.dispose();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::createFactory_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    org.webrtc.VideoEncoderFactory __result__;
                    try {
                        __result__ = org.webrtc.MediaCodecVideoEncoder.createFactory();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::setEglContext_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __eglContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("eglContext");
                    org.webrtc.EglBase.Context eglContext = __eglContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__eglContextRefId__) : null;
            
                    // ref
            
            
                    // invoke native method
                    try {
                        org.webrtc.MediaCodecVideoEncoder.setEglContext(eglContext);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::disposeEglContext_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        org.webrtc.MediaCodecVideoEncoder.disposeEglContext();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::disableVp8HwCodec_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        org.webrtc.MediaCodecVideoEncoder.disableVp8HwCodec();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::disableVp9HwCodec_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        org.webrtc.MediaCodecVideoEncoder.disableVp9HwCodec();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::disableH264HwCodec_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        org.webrtc.MediaCodecVideoEncoder.disableH264HwCodec();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::isVp8HwSupported_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    boolean __result__;
                    try {
                        __result__ = org.webrtc.MediaCodecVideoEncoder.isVp8HwSupported();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::vp8HwEncoderProperties_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    org.webrtc.MediaCodecVideoEncoder.EncoderProperties __result__;
                    try {
                        __result__ = org.webrtc.MediaCodecVideoEncoder.vp8HwEncoderProperties();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::isVp9HwSupported_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    boolean __result__;
                    try {
                        __result__ = org.webrtc.MediaCodecVideoEncoder.isVp9HwSupported();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::isH264HwSupported_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    boolean __result__;
                    try {
                        __result__ = org.webrtc.MediaCodecVideoEncoder.isH264HwSupported();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::isH264HighProfileHwSupported_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    boolean __result__;
                    try {
                        __result__ = org.webrtc.MediaCodecVideoEncoder.isH264HighProfileHwSupported();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::isVp8HwSupportedUsingTextures_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    boolean __result__;
                    try {
                        __result__ = org.webrtc.MediaCodecVideoEncoder.isVp8HwSupportedUsingTextures();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::isVp9HwSupportedUsingTextures_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    boolean __result__;
                    try {
                        __result__ = org.webrtc.MediaCodecVideoEncoder.isVp9HwSupportedUsingTextures();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::isH264HwSupportedUsingTextures_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    boolean __result__;
                    try {
                        __result__ = org.webrtc.MediaCodecVideoEncoder.isH264HwSupportedUsingTextures();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::printStackTrace_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        org.webrtc.MediaCodecVideoEncoder.printStackTrace();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.CallSessionFileRotatingLogSink::getLogData_batch", (__argsBatch__, __methodResult__) -> {
                List<byte[]> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    String dirPath = (String) ((Map<String, Object>) __args__).get("dirPath");
            
                    // ref
            
            
                    // invoke native method
                    byte[] __result__;
                    try {
                        __result__ = org.webrtc.CallSessionFileRotatingLogSink.getLogData(dirPath);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.CallSessionFileRotatingLogSink::dispose_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.CallSessionFileRotatingLogSink ref = (org.webrtc.CallSessionFileRotatingLogSink) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.dispose();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.VideoCodecStatus::getNumber_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.VideoCodecStatus ref = (org.webrtc.VideoCodecStatus) getHEAP().get(refId);
            
                    // invoke native method
                    int __result__;
                    try {
                        __result__ = ref.getNumber();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.VideoFrame.TextureBuffer::getType_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.VideoFrame.TextureBuffer ref = (org.webrtc.VideoFrame.TextureBuffer) getHEAP().get(refId);
            
                    // invoke native method
                    org.webrtc.VideoFrame.TextureBuffer.Type __result__;
                    try {
                        __result__ = ref.getType();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.VideoFrame.TextureBuffer::getTextureId_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.VideoFrame.TextureBuffer ref = (org.webrtc.VideoFrame.TextureBuffer) getHEAP().get(refId);
            
                    // invoke native method
                    int __result__;
                    try {
                        __result__ = ref.getTextureId();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.RendererCommon.RendererEvents::onFirstFrameRendered_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.RendererCommon.RendererEvents ref = (org.webrtc.RendererCommon.RendererEvents) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onFirstFrameRendered();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.RendererCommon.RendererEvents::onFrameResolutionChanged_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) __args__).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) __args__).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.RendererCommon.RendererEvents ref = (org.webrtc.RendererCommon.RendererEvents) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onFrameResolutionChanged(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.FileVideoCapturer::tick_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.FileVideoCapturer ref = (org.webrtc.FileVideoCapturer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.tick();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.RendererCommon.GlDrawer::drawOes_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                    // jsonable arg
                    float[] var2 = (float[]) ((Map<String, Object>) __args__).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) __args__).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) __args__).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) __args__).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) __args__).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) __args__).get("var7");
                    // jsonable arg
                    int var8 = (int) ((Map<String, Object>) __args__).get("var8");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.RendererCommon.GlDrawer ref = (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.drawOes(var1, var2, var3, var4, var5, var6, var7, var8);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.RendererCommon.GlDrawer::drawRgb_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                    // jsonable arg
                    float[] var2 = (float[]) ((Map<String, Object>) __args__).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) __args__).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) __args__).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) __args__).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) __args__).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) __args__).get("var7");
                    // jsonable arg
                    int var8 = (int) ((Map<String, Object>) __args__).get("var8");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.RendererCommon.GlDrawer ref = (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.drawRgb(var1, var2, var3, var4, var5, var6, var7, var8);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.RendererCommon.GlDrawer::drawYuv_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int[] var1 = (int[]) ((Map<String, Object>) __args__).get("var1");
                    // jsonable arg
                    float[] var2 = (float[]) ((Map<String, Object>) __args__).get("var2");
                    // jsonable arg
                    int var3 = (int) ((Map<String, Object>) __args__).get("var3");
                    // jsonable arg
                    int var4 = (int) ((Map<String, Object>) __args__).get("var4");
                    // jsonable arg
                    int var5 = (int) ((Map<String, Object>) __args__).get("var5");
                    // jsonable arg
                    int var6 = (int) ((Map<String, Object>) __args__).get("var6");
                    // jsonable arg
                    int var7 = (int) ((Map<String, Object>) __args__).get("var7");
                    // jsonable arg
                    int var8 = (int) ((Map<String, Object>) __args__).get("var8");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.RendererCommon.GlDrawer ref = (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.drawYuv(var1, var2, var3, var4, var5, var6, var7, var8);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.RendererCommon.GlDrawer::release_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.RendererCommon.GlDrawer ref = (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.release();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::init__org_webrtc_EglBase_Context__org_webrtc_RendererCommon_RendererEvents_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __sharedContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("sharedContext");
                    org.webrtc.EglBase.Context sharedContext = __sharedContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__sharedContextRefId__) : null;
                    // ref arg
                    Integer __rendererEventsRefId__ = (Integer) ((Map<String, Object>) __args__).get("rendererEvents");
                    org.webrtc.RendererCommon.RendererEvents rendererEvents = __rendererEventsRefId__ != null ? (org.webrtc.RendererCommon.RendererEvents) getHEAP().get(__rendererEventsRefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.init(sharedContext, rendererEvents);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::init__org_webrtc_EglBase_Context__org_webrtc_RendererCommon_RendererEvents__Int32List__org_webrtc_RendererCommon_GlDrawer_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __sharedContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("sharedContext");
                    org.webrtc.EglBase.Context sharedContext = __sharedContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__sharedContextRefId__) : null;
                    // ref arg
                    Integer __rendererEventsRefId__ = (Integer) ((Map<String, Object>) __args__).get("rendererEvents");
                    org.webrtc.RendererCommon.RendererEvents rendererEvents = __rendererEventsRefId__ != null ? (org.webrtc.RendererCommon.RendererEvents) getHEAP().get(__rendererEventsRefId__) : null;
                    // jsonable arg
                    int[] configAttributes = (int[]) ((Map<String, Object>) __args__).get("configAttributes");
                    // ref arg
                    Integer __drawerRefId__ = (Integer) ((Map<String, Object>) __args__).get("drawer");
                    org.webrtc.RendererCommon.GlDrawer drawer = __drawerRefId__ != null ? (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(__drawerRefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.init(sharedContext, rendererEvents, configAttributes, drawer);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::release_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.release();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::setEnableHardwareScaler_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean enabled = (boolean) ((Map<String, Object>) __args__).get("enabled");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setEnableHardwareScaler(enabled);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::setMirror_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    boolean mirror = (boolean) ((Map<String, Object>) __args__).get("mirror");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setMirror(mirror);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::setScalingType__org_webrtc_RendererCommon_ScalingType_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // enum arg
                    org.webrtc.RendererCommon.ScalingType scalingType = org.webrtc.RendererCommon.ScalingType.values()[(int) ((Map<String, Object>) __args__).get("scalingType")];
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setScalingType(scalingType);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::setScalingType__org_webrtc_RendererCommon_ScalingType__org_webrtc_RendererCommon_ScalingType_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // enum arg
                    org.webrtc.RendererCommon.ScalingType scalingTypeMatchOrientation = org.webrtc.RendererCommon.ScalingType.values()[(int) ((Map<String, Object>) __args__).get("scalingTypeMatchOrientation")];
                    // enum arg
                    org.webrtc.RendererCommon.ScalingType scalingTypeMismatchOrientation = org.webrtc.RendererCommon.ScalingType.values()[(int) ((Map<String, Object>) __args__).get("scalingTypeMismatchOrientation")];
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setScalingType(scalingTypeMatchOrientation, scalingTypeMismatchOrientation);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::setFpsReduction_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    Double fps = (Double) ((Map<String, Object>) __args__).get("fps");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setFpsReduction(new Double(fps).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::disableFpsReduction_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.disableFpsReduction();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::pauseVideo_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.pauseVideo();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::clearImage_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.clearImage();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.CameraVideoCapturer.CameraStatistics::addFrame_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.CameraVideoCapturer.CameraStatistics ref = (org.webrtc.CameraVideoCapturer.CameraStatistics) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.addFrame();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.CameraVideoCapturer.CameraStatistics::release_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.CameraVideoCapturer.CameraStatistics ref = (org.webrtc.CameraVideoCapturer.CameraStatistics) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.release();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.EglBase.Context::getNativeEglContext_batch", (__argsBatch__, __methodResult__) -> {
                List<Long> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.EglBase.Context ref = (org.webrtc.EglBase.Context) getHEAP().get(refId);
            
                    // invoke native method
                    long __result__;
                    try {
                        __result__ = ref.getNativeEglContext();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.RtpSender::setTrack_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __trackRefId__ = (Integer) ((Map<String, Object>) __args__).get("track");
                    org.webrtc.MediaStreamTrack track = __trackRefId__ != null ? (org.webrtc.MediaStreamTrack) getHEAP().get(__trackRefId__) : null;
                    // jsonable arg
                    boolean takeOwnership = (boolean) ((Map<String, Object>) __args__).get("takeOwnership");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.RtpSender ref = (org.webrtc.RtpSender) getHEAP().get(refId);
            
                    // invoke native method
                    boolean __result__;
                    try {
                        __result__ = ref.setTrack(track, takeOwnership);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.RtpSender::track_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.RtpSender ref = (org.webrtc.RtpSender) getHEAP().get(refId);
            
                    // invoke native method
                    org.webrtc.MediaStreamTrack __result__;
                    try {
                        __result__ = ref.track();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.RtpSender::setParameters_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __parametersRefId__ = (Integer) ((Map<String, Object>) __args__).get("parameters");
                    org.webrtc.RtpParameters parameters = __parametersRefId__ != null ? (org.webrtc.RtpParameters) getHEAP().get(__parametersRefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.RtpSender ref = (org.webrtc.RtpSender) getHEAP().get(refId);
            
                    // invoke native method
                    boolean __result__;
                    try {
                        __result__ = ref.setParameters(parameters);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.RtpSender::getParameters_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.RtpSender ref = (org.webrtc.RtpSender) getHEAP().get(refId);
            
                    // invoke native method
                    org.webrtc.RtpParameters __result__;
                    try {
                        __result__ = ref.getParameters();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.RtpSender::dtmf_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.RtpSender ref = (org.webrtc.RtpSender) getHEAP().get(refId);
            
                    // invoke native method
                    org.webrtc.DtmfSender __result__;
                    try {
                        __result__ = ref.dtmf();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.RtpSender::dispose_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.RtpSender ref = (org.webrtc.RtpSender) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.dispose();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.VideoFrame::getBuffer_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.VideoFrame ref = (org.webrtc.VideoFrame) getHEAP().get(refId);
            
                    // invoke native method
                    org.webrtc.VideoFrame.Buffer __result__;
                    try {
                        __result__ = ref.getBuffer();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.VideoFrame::getRotation_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.VideoFrame ref = (org.webrtc.VideoFrame) getHEAP().get(refId);
            
                    // invoke native method
                    int __result__;
                    try {
                        __result__ = ref.getRotation();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.VideoFrame::getTimestampNs_batch", (__argsBatch__, __methodResult__) -> {
                List<Long> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.VideoFrame ref = (org.webrtc.VideoFrame) getHEAP().get(refId);
            
                    // invoke native method
                    long __result__;
                    try {
                        __result__ = ref.getTimestampNs();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.VideoFrame::getRotatedWidth_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.VideoFrame ref = (org.webrtc.VideoFrame) getHEAP().get(refId);
            
                    // invoke native method
                    int __result__;
                    try {
                        __result__ = ref.getRotatedWidth();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.VideoFrame::getRotatedHeight_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.VideoFrame ref = (org.webrtc.VideoFrame) getHEAP().get(refId);
            
                    // invoke native method
                    int __result__;
                    try {
                        __result__ = ref.getRotatedHeight();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.CameraEnumerationAndroid::getClosestSupportedFramerateRange_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // list arg
                    List<Integer> supportedFrameratesRefIdList = (List<Integer>) ((Map<String, Object>) __args__).get("supportedFramerates");
                    java.util.List<org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange> supportedFramerates = new ArrayList<>();
                    for (int refId : supportedFrameratesRefIdList) {
                        ((ArrayList<org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange>) supportedFramerates).add((org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange) getHEAP().get(refId));
                    }
                    // jsonable arg
                    int requestedFps = (int) ((Map<String, Object>) __args__).get("requestedFps");
            
                    // ref
            
            
                    // invoke native method
                    org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange __result__;
                    try {
                        __result__ = org.webrtc.CameraEnumerationAndroid.getClosestSupportedFramerateRange((ArrayList) supportedFramerates, requestedFps);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.CameraEnumerationAndroid::getClosestSupportedSize_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // list arg
                    List<Integer> supportedSizesRefIdList = (List<Integer>) ((Map<String, Object>) __args__).get("supportedSizes");
                    java.util.List<org.webrtc.Size> supportedSizes = new ArrayList<>();
                    for (int refId : supportedSizesRefIdList) {
                        ((ArrayList<org.webrtc.Size>) supportedSizes).add((org.webrtc.Size) getHEAP().get(refId));
                    }
                    // jsonable arg
                    int requestedWidth = (int) ((Map<String, Object>) __args__).get("requestedWidth");
                    // jsonable arg
                    int requestedHeight = (int) ((Map<String, Object>) __args__).get("requestedHeight");
            
                    // ref
            
            
                    // invoke native method
                    org.webrtc.Size __result__;
                    try {
                        __result__ = org.webrtc.CameraEnumerationAndroid.getClosestSupportedSize((ArrayList) supportedSizes, requestedWidth, requestedHeight);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.GlShader::getAttribLocation_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    String label = (String) ((Map<String, Object>) __args__).get("label");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.GlShader ref = (org.webrtc.GlShader) getHEAP().get(refId);
            
                    // invoke native method
                    int __result__;
                    try {
                        __result__ = ref.getAttribLocation(label);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.GlShader::getUniformLocation_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    String label = (String) ((Map<String, Object>) __args__).get("label");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.GlShader ref = (org.webrtc.GlShader) getHEAP().get(refId);
            
                    // invoke native method
                    int __result__;
                    try {
                        __result__ = ref.getUniformLocation(label);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.GlShader::useProgram_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.GlShader ref = (org.webrtc.GlShader) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.useProgram();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.GlShader::release_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.GlShader ref = (org.webrtc.GlShader) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.release();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.DataChannel::registerObserver_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __observerRefId__ = (Integer) ((Map<String, Object>) __args__).get("observer");
                    org.webrtc.DataChannel.Observer observer = __observerRefId__ != null ? (org.webrtc.DataChannel.Observer) getHEAP().get(__observerRefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.DataChannel ref = (org.webrtc.DataChannel) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.registerObserver(observer);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.DataChannel::unregisterObserver_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.DataChannel ref = (org.webrtc.DataChannel) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.unregisterObserver();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.DataChannel::label_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.DataChannel ref = (org.webrtc.DataChannel) getHEAP().get(refId);
            
                    // invoke native method
                    String __result__;
                    try {
                        __result__ = ref.label();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.DataChannel::state_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.DataChannel ref = (org.webrtc.DataChannel) getHEAP().get(refId);
            
                    // invoke native method
                    org.webrtc.DataChannel.State __result__;
                    try {
                        __result__ = ref.state();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.DataChannel::bufferedAmount_batch", (__argsBatch__, __methodResult__) -> {
                List<Long> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.DataChannel ref = (org.webrtc.DataChannel) getHEAP().get(refId);
            
                    // invoke native method
                    long __result__;
                    try {
                        __result__ = ref.bufferedAmount();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.DataChannel::close_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.DataChannel ref = (org.webrtc.DataChannel) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.close();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.DataChannel::send_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __bufferRefId__ = (Integer) ((Map<String, Object>) __args__).get("buffer");
                    org.webrtc.DataChannel.Buffer buffer = __bufferRefId__ != null ? (org.webrtc.DataChannel.Buffer) getHEAP().get(__bufferRefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.DataChannel ref = (org.webrtc.DataChannel) getHEAP().get(refId);
            
                    // invoke native method
                    boolean __result__;
                    try {
                        __result__ = ref.send(buffer);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.DataChannel::dispose_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.DataChannel ref = (org.webrtc.DataChannel) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.dispose();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.SessionDescription.Type::canonicalForm_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.SessionDescription.Type ref = (org.webrtc.SessionDescription.Type) getHEAP().get(refId);
            
                    // invoke native method
                    String __result__;
                    try {
                        __result__ = ref.canonicalForm();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.SessionDescription.Type::fromCanonicalForm_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    String canonical = (String) ((Map<String, Object>) __args__).get("canonical");
            
                    // ref
            
            
                    // invoke native method
                    org.webrtc.SessionDescription.Type __result__;
                    try {
                        __result__ = org.webrtc.SessionDescription.Type.fromCanonicalForm(canonical);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.NetworkMonitor::init_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __contextRefId__ = (Integer) ((Map<String, Object>) __args__).get("context");
                    android.content.Context context = __contextRefId__ != null ? (android.content.Context) getHEAP().get(__contextRefId__) : null;
            
                    // ref
            
            
                    // invoke native method
                    try {
                        org.webrtc.NetworkMonitor.init(context);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.NetworkMonitor::getInstance_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    org.webrtc.NetworkMonitor __result__;
                    try {
                        __result__ = org.webrtc.NetworkMonitor.getInstance();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("org.webrtc.NetworkMonitor::startMonitoring__android_content_Context_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    Integer __applicationContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("applicationContext");
                    android.content.Context applicationContext = __applicationContextRefId__ != null ? (android.content.Context) getHEAP().get(__applicationContextRefId__) : null;
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.NetworkMonitor ref = (org.webrtc.NetworkMonitor) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.startMonitoring(applicationContext);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
        }};
    }
}
