//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package com.fluttify.owt_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import com.fluttify.owt_fluttify.OwtFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler2 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceTransportsType_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // enum arg
                    org.webrtc.PeerConnection.IceTransportsType iceTransportsType = org.webrtc.PeerConnection.IceTransportsType.values()[(int) ((Map<String, Object>) __args__).get("iceTransportsType")];
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.iceTransportsType = iceTransportsType;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceServers_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // list arg
                    List<Integer> iceServersRefIdList = (List<Integer>) ((Map<String, Object>) __args__).get("iceServers");
                    java.util.List<org.webrtc.PeerConnection.IceServer> iceServers = new ArrayList<>();
                    for (int refId : iceServersRefIdList) {
                        ((ArrayList<org.webrtc.PeerConnection.IceServer>) iceServers).add((org.webrtc.PeerConnection.IceServer) getHEAP().get(refId));
                    }
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.iceServers = (ArrayList) iceServers;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_bundlePolicy_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // enum arg
                    org.webrtc.PeerConnection.BundlePolicy bundlePolicy = org.webrtc.PeerConnection.BundlePolicy.values()[(int) ((Map<String, Object>) __args__).get("bundlePolicy")];
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.bundlePolicy = bundlePolicy;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_rtcpMuxPolicy_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // enum arg
                    org.webrtc.PeerConnection.RtcpMuxPolicy rtcpMuxPolicy = org.webrtc.PeerConnection.RtcpMuxPolicy.values()[(int) ((Map<String, Object>) __args__).get("rtcpMuxPolicy")];
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.rtcpMuxPolicy = rtcpMuxPolicy;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_tcpCandidatePolicy_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // enum arg
                    org.webrtc.PeerConnection.TcpCandidatePolicy tcpCandidatePolicy = org.webrtc.PeerConnection.TcpCandidatePolicy.values()[(int) ((Map<String, Object>) __args__).get("tcpCandidatePolicy")];
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.tcpCandidatePolicy = tcpCandidatePolicy;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_candidateNetworkPolicy_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // enum arg
                    org.webrtc.PeerConnection.CandidateNetworkPolicy candidateNetworkPolicy = org.webrtc.PeerConnection.CandidateNetworkPolicy.values()[(int) ((Map<String, Object>) __args__).get("candidateNetworkPolicy")];
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.candidateNetworkPolicy = candidateNetworkPolicy;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_audioJitterBufferMaxPackets_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int audioJitterBufferMaxPackets = (int) ((Map<String, Object>) __args__).get("audioJitterBufferMaxPackets");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.audioJitterBufferMaxPackets = audioJitterBufferMaxPackets;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_audioJitterBufferFastAccelerate_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean audioJitterBufferFastAccelerate = (boolean) ((Map<String, Object>) __args__).get("audioJitterBufferFastAccelerate");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.audioJitterBufferFastAccelerate = audioJitterBufferFastAccelerate;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceConnectionReceivingTimeout_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int iceConnectionReceivingTimeout = (int) ((Map<String, Object>) __args__).get("iceConnectionReceivingTimeout");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.iceConnectionReceivingTimeout = iceConnectionReceivingTimeout;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceBackupCandidatePairPingInterval_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int iceBackupCandidatePairPingInterval = (int) ((Map<String, Object>) __args__).get("iceBackupCandidatePairPingInterval");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.iceBackupCandidatePairPingInterval = iceBackupCandidatePairPingInterval;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_keyType_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // enum arg
                    org.webrtc.PeerConnection.KeyType keyType = org.webrtc.PeerConnection.KeyType.values()[(int) ((Map<String, Object>) __args__).get("keyType")];
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.keyType = keyType;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_continualGatheringPolicy_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // enum arg
                    org.webrtc.PeerConnection.ContinualGatheringPolicy continualGatheringPolicy = org.webrtc.PeerConnection.ContinualGatheringPolicy.values()[(int) ((Map<String, Object>) __args__).get("continualGatheringPolicy")];
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.continualGatheringPolicy = continualGatheringPolicy;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceCandidatePoolSize_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int iceCandidatePoolSize = (int) ((Map<String, Object>) __args__).get("iceCandidatePoolSize");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.iceCandidatePoolSize = iceCandidatePoolSize;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_pruneTurnPorts_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean pruneTurnPorts = (boolean) ((Map<String, Object>) __args__).get("pruneTurnPorts");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.pruneTurnPorts = pruneTurnPorts;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_presumeWritableWhenFullyRelayed_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean presumeWritableWhenFullyRelayed = (boolean) ((Map<String, Object>) __args__).get("presumeWritableWhenFullyRelayed");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.presumeWritableWhenFullyRelayed = presumeWritableWhenFullyRelayed;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceCheckIntervalStrongConnectivityMs_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    Integer iceCheckIntervalStrongConnectivityMs = (Integer) ((Map<String, Object>) __args__).get("iceCheckIntervalStrongConnectivityMs");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.iceCheckIntervalStrongConnectivityMs = iceCheckIntervalStrongConnectivityMs;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceCheckIntervalWeakConnectivityMs_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    Integer iceCheckIntervalWeakConnectivityMs = (Integer) ((Map<String, Object>) __args__).get("iceCheckIntervalWeakConnectivityMs");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.iceCheckIntervalWeakConnectivityMs = iceCheckIntervalWeakConnectivityMs;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceCheckMinInterval_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    Integer iceCheckMinInterval = (Integer) ((Map<String, Object>) __args__).get("iceCheckMinInterval");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.iceCheckMinInterval = iceCheckMinInterval;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceUnwritableTimeMs_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    Integer iceUnwritableTimeMs = (Integer) ((Map<String, Object>) __args__).get("iceUnwritableTimeMs");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.iceUnwritableTimeMs = iceUnwritableTimeMs;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceUnwritableMinChecks_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    Integer iceUnwritableMinChecks = (Integer) ((Map<String, Object>) __args__).get("iceUnwritableMinChecks");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.iceUnwritableMinChecks = iceUnwritableMinChecks;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_stunCandidateKeepaliveIntervalMs_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    Integer stunCandidateKeepaliveIntervalMs = (Integer) ((Map<String, Object>) __args__).get("stunCandidateKeepaliveIntervalMs");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.stunCandidateKeepaliveIntervalMs = stunCandidateKeepaliveIntervalMs;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_disableIPv6OnWifi_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean disableIPv6OnWifi = (boolean) ((Map<String, Object>) __args__).get("disableIPv6OnWifi");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.disableIPv6OnWifi = disableIPv6OnWifi;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_maxIPv6Networks_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int maxIPv6Networks = (int) ((Map<String, Object>) __args__).get("maxIPv6Networks");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.maxIPv6Networks = maxIPv6Networks;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_iceRegatherIntervalRange_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref arg
                    Integer __iceRegatherIntervalRangeRefId__ = (Integer) ((Map<String, Object>) __args__).get("iceRegatherIntervalRange");
                    org.webrtc.PeerConnection.IntervalRange iceRegatherIntervalRange = __iceRegatherIntervalRangeRefId__ != null ? (org.webrtc.PeerConnection.IntervalRange) getHEAP().get(__iceRegatherIntervalRangeRefId__) : null;
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.iceRegatherIntervalRange = iceRegatherIntervalRange;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_disableIpv6_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean disableIpv6 = (boolean) ((Map<String, Object>) __args__).get("disableIpv6");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.disableIpv6 = disableIpv6;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_enableDscp_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean enableDscp = (boolean) ((Map<String, Object>) __args__).get("enableDscp");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.enableDscp = enableDscp;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_enableCpuOveruseDetection_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean enableCpuOveruseDetection = (boolean) ((Map<String, Object>) __args__).get("enableCpuOveruseDetection");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.enableCpuOveruseDetection = enableCpuOveruseDetection;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_enableRtpDataChannel_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean enableRtpDataChannel = (boolean) ((Map<String, Object>) __args__).get("enableRtpDataChannel");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.enableRtpDataChannel = enableRtpDataChannel;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_suspendBelowMinBitrate_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean suspendBelowMinBitrate = (boolean) ((Map<String, Object>) __args__).get("suspendBelowMinBitrate");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.suspendBelowMinBitrate = suspendBelowMinBitrate;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_screencastMinBitrate_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    Integer screencastMinBitrate = (Integer) ((Map<String, Object>) __args__).get("screencastMinBitrate");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.screencastMinBitrate = screencastMinBitrate;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_combinedAudioVideoBwe_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    Boolean combinedAudioVideoBwe = (Boolean) ((Map<String, Object>) __args__).get("combinedAudioVideoBwe");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.combinedAudioVideoBwe = combinedAudioVideoBwe;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_enableDtlsSrtp_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    Boolean enableDtlsSrtp = (Boolean) ((Map<String, Object>) __args__).get("enableDtlsSrtp");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.enableDtlsSrtp = enableDtlsSrtp;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_networkPreference_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // enum arg
                    org.webrtc.PeerConnection.AdapterType networkPreference = org.webrtc.PeerConnection.AdapterType.values()[(int) ((Map<String, Object>) __args__).get("networkPreference")];
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.networkPreference = networkPreference;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_sdpSemantics_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // enum arg
                    org.webrtc.PeerConnection.SdpSemantics sdpSemantics = org.webrtc.PeerConnection.SdpSemantics.values()[(int) ((Map<String, Object>) __args__).get("sdpSemantics")];
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.sdpSemantics = sdpSemantics;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_turnCustomizer_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref arg
                    Integer __turnCustomizerRefId__ = (Integer) ((Map<String, Object>) __args__).get("turnCustomizer");
                    org.webrtc.TurnCustomizer turnCustomizer = __turnCustomizerRefId__ != null ? (org.webrtc.TurnCustomizer) getHEAP().get(__turnCustomizerRefId__) : null;
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.turnCustomizer = turnCustomizer;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("org.webrtc.PeerConnection.RTCConfiguration::set_activeResetSrtpParams_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean activeResetSrtpParams = (boolean) ((Map<String, Object>) __args__).get("activeResetSrtpParams");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    org.webrtc.PeerConnection.RTCConfiguration ref = (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(refId);
            
                    ref.activeResetSrtpParams = activeResetSrtpParams;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("owt.conference.Subscription.VideoUpdateOptions::set_resolutionHeight_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int resolutionHeight = (int) ((Map<String, Object>) __args__).get("resolutionHeight");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get(refId);
            
                    ref.resolutionHeight = resolutionHeight;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("owt.conference.Subscription.VideoUpdateOptions::set_resolutionWidth_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int resolutionWidth = (int) ((Map<String, Object>) __args__).get("resolutionWidth");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get(refId);
            
                    ref.resolutionWidth = resolutionWidth;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("owt.conference.Subscription.VideoUpdateOptions::set_fps_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int fps = (int) ((Map<String, Object>) __args__).get("fps");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get(refId);
            
                    ref.fps = fps;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("owt.conference.Subscription.VideoUpdateOptions::set_keyframeInterval_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    int keyframeInterval = (int) ((Map<String, Object>) __args__).get("keyframeInterval");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get(refId);
            
                    ref.keyframeInterval = keyframeInterval;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("owt.conference.Subscription.VideoUpdateOptions::set_bitrateMultiplier_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    double bitrateMultiplier = (double) ((Map<String, Object>) __args__).get("bitrateMultiplier");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    owt.conference.Subscription.VideoUpdateOptions ref = (owt.conference.Subscription.VideoUpdateOptions) getHEAP().get(refId);
            
                    ref.bitrateMultiplier = bitrateMultiplier;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("owt.conference.RemoteStream::set_extraSubscriptionCapability_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref arg
                    Integer __extraSubscriptionCapabilityRefId__ = (Integer) ((Map<String, Object>) __args__).get("extraSubscriptionCapability");
                    owt.conference.SubscriptionCapabilities extraSubscriptionCapability = __extraSubscriptionCapabilityRefId__ != null ? (owt.conference.SubscriptionCapabilities) getHEAP().get(__extraSubscriptionCapabilityRefId__) : null;
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    owt.conference.RemoteStream ref = (owt.conference.RemoteStream) getHEAP().get(refId);
            
                    ref.extraSubscriptionCapability = extraSubscriptionCapability;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("owt.conference.RemoteStream::set_publicationSettings_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref arg
                    Integer __publicationSettingsRefId__ = (Integer) ((Map<String, Object>) __args__).get("publicationSettings");
                    owt.conference.PublicationSettings publicationSettings = __publicationSettingsRefId__ != null ? (owt.conference.PublicationSettings) getHEAP().get(__publicationSettingsRefId__) : null;
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    owt.conference.RemoteStream ref = (owt.conference.RemoteStream) getHEAP().get(refId);
            
                    ref.publicationSettings = publicationSettings;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("owt.base.MediaConstraints.AudioTrackConstraints::set_echoCancellation_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean echoCancellation = (boolean) ((Map<String, Object>) __args__).get("echoCancellation");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    owt.base.MediaConstraints.AudioTrackConstraints ref = (owt.base.MediaConstraints.AudioTrackConstraints) getHEAP().get(refId);
            
                    ref.echoCancellation = echoCancellation;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("owt.base.MediaConstraints.AudioTrackConstraints::set_extendedFilterEchoCancellation_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean extendedFilterEchoCancellation = (boolean) ((Map<String, Object>) __args__).get("extendedFilterEchoCancellation");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    owt.base.MediaConstraints.AudioTrackConstraints ref = (owt.base.MediaConstraints.AudioTrackConstraints) getHEAP().get(refId);
            
                    ref.extendedFilterEchoCancellation = extendedFilterEchoCancellation;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("owt.base.MediaConstraints.AudioTrackConstraints::set_delayAgnosticEchoCancellation_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // jsonable arg
                    boolean delayAgnosticEchoCancellation = (boolean) ((Map<String, Object>) __args__).get("delayAgnosticEchoCancellation");
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    owt.base.MediaConstraints.AudioTrackConstraints ref = (owt.base.MediaConstraints.AudioTrackConstraints) getHEAP().get(refId);
            
                    ref.delayAgnosticEchoCancellation = delayAgnosticEchoCancellation;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("owt.base.Stream.StreamSourceInfo::set_videoSourceInfo_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // enum arg
                    owt.base.Stream.StreamSourceInfo.VideoSourceInfo videoSourceInfo = owt.base.Stream.StreamSourceInfo.VideoSourceInfo.values()[(int) ((Map<String, Object>) __args__).get("videoSourceInfo")];
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    owt.base.Stream.StreamSourceInfo ref = (owt.base.Stream.StreamSourceInfo) getHEAP().get(refId);
            
                    ref.videoSourceInfo = videoSourceInfo;
                }
            
                __methodResult__.success("success");
            });
            // setter batch
            put("owt.base.Stream.StreamSourceInfo::set_audioSourceInfo_batch", (__argsBatch__, __methodResult__) -> {
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // enum arg
                    owt.base.Stream.StreamSourceInfo.AudioSourceInfo audioSourceInfo = owt.base.Stream.StreamSourceInfo.AudioSourceInfo.values()[(int) ((Map<String, Object>) __args__).get("audioSourceInfo")];
            
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    owt.base.Stream.StreamSourceInfo ref = (owt.base.Stream.StreamSourceInfo) getHEAP().get(refId);
            
                    ref.audioSourceInfo = audioSourceInfo;
                }
            
                __methodResult__.success("success");
            });
            // method
            put("org.webrtc.GlUtil::checkNoGLES2Error", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String msg = (String) ((Map<String, Object>) __args__).get("msg");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.GlUtil::checkNoGLES2Error(" + msg + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.GlUtil.checkNoGLES2Error(msg);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.GlUtil::generateTexture", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int target = (int) ((Map<String, Object>) __args__).get("target");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.GlUtil::generateTexture(" + target + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = org.webrtc.GlUtil.generateTexture(target);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaSource::state", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaSource ref = (org.webrtc.MediaSource) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaSource@" + refId + "::state(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.MediaSource.State __result__;
                try {
                    __result__ = ref.state();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaSource::dispose", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaSource ref = (org.webrtc.MediaSource) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaSource@" + refId + "::dispose(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.dispose();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::createFactory", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder::createFactory(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.VideoEncoderFactory __result__;
                try {
                    __result__ = org.webrtc.MediaCodecVideoEncoder.createFactory();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::setEglContext", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __eglContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("eglContext");
                org.webrtc.EglBase.Context eglContext = __eglContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__eglContextRefId__) : null;
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder::setEglContext(" + eglContext + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.MediaCodecVideoEncoder.setEglContext(eglContext);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::disposeEglContext", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder::disposeEglContext(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.MediaCodecVideoEncoder.disposeEglContext();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::setErrorCallback", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder::setErrorCallback(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.MediaCodecVideoEncoder.setErrorCallback(new org.webrtc.MediaCodecVideoEncoder.MediaCodecVideoEncoderErrorCallback() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.MediaCodecVideoEncoder::setErrorCallback::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onMediaCodecVideoEncoderCriticalError(int var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onMediaCodecVideoEncoderCriticalError(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // jsonable arg
                            int argvar1 = var1;
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.MediaCodecVideoEncoder.MediaCodecVideoEncoderErrorCallback::onMediaCodecVideoEncoderCriticalError",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::disableVp8HwCodec", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder::disableVp8HwCodec(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.MediaCodecVideoEncoder.disableVp8HwCodec();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::disableVp9HwCodec", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder::disableVp9HwCodec(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.MediaCodecVideoEncoder.disableVp9HwCodec();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::disableH264HwCodec", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder::disableH264HwCodec(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.MediaCodecVideoEncoder.disableH264HwCodec();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::isVp8HwSupported", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder::isVp8HwSupported(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.MediaCodecVideoEncoder.isVp8HwSupported();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::vp8HwEncoderProperties", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder::vp8HwEncoderProperties(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.MediaCodecVideoEncoder.EncoderProperties __result__;
                try {
                    __result__ = org.webrtc.MediaCodecVideoEncoder.vp8HwEncoderProperties();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::isVp9HwSupported", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder::isVp9HwSupported(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.MediaCodecVideoEncoder.isVp9HwSupported();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::isH264HwSupported", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder::isH264HwSupported(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.MediaCodecVideoEncoder.isH264HwSupported();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::isH264HighProfileHwSupported", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder::isH264HighProfileHwSupported(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.MediaCodecVideoEncoder.isH264HighProfileHwSupported();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::isVp8HwSupportedUsingTextures", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder::isVp8HwSupportedUsingTextures(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.MediaCodecVideoEncoder.isVp8HwSupportedUsingTextures();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::isVp9HwSupportedUsingTextures", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder::isVp9HwSupportedUsingTextures(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.MediaCodecVideoEncoder.isVp9HwSupportedUsingTextures();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::isH264HwSupportedUsingTextures", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder::isH264HwSupportedUsingTextures(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.MediaCodecVideoEncoder.isH264HwSupportedUsingTextures();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaCodecVideoEncoder::printStackTrace", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaCodecVideoEncoder::printStackTrace(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.MediaCodecVideoEncoder.printStackTrace();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.CallSessionFileRotatingLogSink::getLogData", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String dirPath = (String) ((Map<String, Object>) __args__).get("dirPath");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.CallSessionFileRotatingLogSink::getLogData(" + dirPath + ")");
                }
            
                // invoke native method
                byte[] __result__;
                try {
                    __result__ = org.webrtc.CallSessionFileRotatingLogSink.getLogData(dirPath);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                byte[] jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.CallSessionFileRotatingLogSink::dispose", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.CallSessionFileRotatingLogSink ref = (org.webrtc.CallSessionFileRotatingLogSink) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.CallSessionFileRotatingLogSink@" + refId + "::dispose(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.dispose();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoCodecStatus::getNumber", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoCodecStatus ref = (org.webrtc.VideoCodecStatus) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoCodecStatus@" + refId + "::getNumber(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getNumber();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrame.TextureBuffer::getType", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrame.TextureBuffer ref = (org.webrtc.VideoFrame.TextureBuffer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrame.TextureBuffer@" + refId + "::getType(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.VideoFrame.TextureBuffer.Type __result__;
                try {
                    __result__ = ref.getType();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrame.TextureBuffer::getTextureId", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrame.TextureBuffer ref = (org.webrtc.VideoFrame.TextureBuffer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrame.TextureBuffer@" + refId + "::getTextureId(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getTextureId();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RendererCommon.RendererEvents::onFirstFrameRendered", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RendererCommon.RendererEvents ref = (org.webrtc.RendererCommon.RendererEvents) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RendererCommon.RendererEvents@" + refId + "::onFirstFrameRendered(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.onFirstFrameRendered();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RendererCommon.RendererEvents::onFrameResolutionChanged", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) __args__).get("var3");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RendererCommon.RendererEvents ref = (org.webrtc.RendererCommon.RendererEvents) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RendererCommon.RendererEvents@" + refId + "::onFrameResolutionChanged(" + var1 + var2 + var3 + ")");
                }
            
                // invoke native method
                try {
                    ref.onFrameResolutionChanged(var1, var2, var3);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.FileVideoCapturer::tick", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.FileVideoCapturer ref = (org.webrtc.FileVideoCapturer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.FileVideoCapturer@" + refId + "::tick(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.tick();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RendererCommon.GlDrawer::drawOes", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                float[] var2 = (float[]) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) __args__).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) __args__).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) __args__).get("var6");
                // jsonable arg
                int var7 = (int) ((Map<String, Object>) __args__).get("var7");
                // jsonable arg
                int var8 = (int) ((Map<String, Object>) __args__).get("var8");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RendererCommon.GlDrawer ref = (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RendererCommon.GlDrawer@" + refId + "::drawOes(" + var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + ")");
                }
            
                // invoke native method
                try {
                    ref.drawOes(var1, var2, var3, var4, var5, var6, var7, var8);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RendererCommon.GlDrawer::drawRgb", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                float[] var2 = (float[]) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) __args__).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) __args__).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) __args__).get("var6");
                // jsonable arg
                int var7 = (int) ((Map<String, Object>) __args__).get("var7");
                // jsonable arg
                int var8 = (int) ((Map<String, Object>) __args__).get("var8");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RendererCommon.GlDrawer ref = (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RendererCommon.GlDrawer@" + refId + "::drawRgb(" + var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + ")");
                }
            
                // invoke native method
                try {
                    ref.drawRgb(var1, var2, var3, var4, var5, var6, var7, var8);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RendererCommon.GlDrawer::drawYuv", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int[] var1 = (int[]) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                float[] var2 = (float[]) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) __args__).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) __args__).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) __args__).get("var6");
                // jsonable arg
                int var7 = (int) ((Map<String, Object>) __args__).get("var7");
                // jsonable arg
                int var8 = (int) ((Map<String, Object>) __args__).get("var8");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RendererCommon.GlDrawer ref = (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RendererCommon.GlDrawer@" + refId + "::drawYuv(" + var1 + var2 + var3 + var4 + var5 + var6 + var7 + var8 + ")");
                }
            
                // invoke native method
                try {
                    ref.drawYuv(var1, var2, var3, var4, var5, var6, var7, var8);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RendererCommon.GlDrawer::release", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RendererCommon.GlDrawer ref = (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RendererCommon.GlDrawer@" + refId + "::release(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.release();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::init__org_webrtc_EglBase_Context__org_webrtc_RendererCommon_RendererEvents", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __sharedContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("sharedContext");
                org.webrtc.EglBase.Context sharedContext = __sharedContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__sharedContextRefId__) : null;
                // ref arg
                Integer __rendererEventsRefId__ = (Integer) ((Map<String, Object>) __args__).get("rendererEvents");
                org.webrtc.RendererCommon.RendererEvents rendererEvents = __rendererEventsRefId__ != null ? (org.webrtc.RendererCommon.RendererEvents) getHEAP().get(__rendererEventsRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::init(" + sharedContext + rendererEvents + ")");
                }
            
                // invoke native method
                try {
                    ref.init(sharedContext, rendererEvents);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::init__org_webrtc_EglBase_Context__org_webrtc_RendererCommon_RendererEvents__Int32List__org_webrtc_RendererCommon_GlDrawer", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __sharedContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("sharedContext");
                org.webrtc.EglBase.Context sharedContext = __sharedContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__sharedContextRefId__) : null;
                // ref arg
                Integer __rendererEventsRefId__ = (Integer) ((Map<String, Object>) __args__).get("rendererEvents");
                org.webrtc.RendererCommon.RendererEvents rendererEvents = __rendererEventsRefId__ != null ? (org.webrtc.RendererCommon.RendererEvents) getHEAP().get(__rendererEventsRefId__) : null;
                // jsonable arg
                int[] configAttributes = (int[]) ((Map<String, Object>) __args__).get("configAttributes");
                // ref arg
                Integer __drawerRefId__ = (Integer) ((Map<String, Object>) __args__).get("drawer");
                org.webrtc.RendererCommon.GlDrawer drawer = __drawerRefId__ != null ? (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(__drawerRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::init(" + sharedContext + rendererEvents + configAttributes + drawer + ")");
                }
            
                // invoke native method
                try {
                    ref.init(sharedContext, rendererEvents, configAttributes, drawer);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::release", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::release(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.release();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                Double scale = (Double) ((Map<String, Object>) __args__).get("scale");
                // ref arg
                Integer __drawerParamRefId__ = (Integer) ((Map<String, Object>) __args__).get("drawerParam");
                org.webrtc.RendererCommon.GlDrawer drawerParam = __drawerParamRefId__ != null ? (org.webrtc.RendererCommon.GlDrawer) getHEAP().get(__drawerParamRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::addFrameListener(" + scale + drawerParam + ")");
                }
            
                // invoke native method
                try {
                    ref.addFrameListener(new org.webrtc.EglRenderer.FrameListener() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.SurfaceViewRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onFrame(android.graphics.Bitmap var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFrame(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.EglRenderer.FrameListener::onFrame",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                }, new Double(scale).floatValue(), drawerParam);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                Double scale = (Double) ((Map<String, Object>) __args__).get("scale");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::addFrameListener(" + scale + ")");
                }
            
                // invoke native method
                try {
                    ref.addFrameListener(new org.webrtc.EglRenderer.FrameListener() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.SurfaceViewRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onFrame(android.graphics.Bitmap var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFrame(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.EglRenderer.FrameListener::onFrame",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                }, new Double(scale).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::removeFrameListener", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::removeFrameListener(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.removeFrameListener(new org.webrtc.EglRenderer.FrameListener() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.SurfaceViewRenderer::removeFrameListener::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onFrame(android.graphics.Bitmap var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onFrame(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.EglRenderer.FrameListener::onFrame",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::setEnableHardwareScaler", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean enabled = (boolean) ((Map<String, Object>) __args__).get("enabled");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::setEnableHardwareScaler(" + enabled + ")");
                }
            
                // invoke native method
                try {
                    ref.setEnableHardwareScaler(enabled);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::setMirror", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean mirror = (boolean) ((Map<String, Object>) __args__).get("mirror");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::setMirror(" + mirror + ")");
                }
            
                // invoke native method
                try {
                    ref.setMirror(mirror);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::setScalingType__org_webrtc_RendererCommon_ScalingType", (__args__, __methodResult__) -> {
                // args
                // enum arg
                org.webrtc.RendererCommon.ScalingType scalingType = org.webrtc.RendererCommon.ScalingType.values()[(int) ((Map<String, Object>) __args__).get("scalingType")];
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::setScalingType(" + scalingType + ")");
                }
            
                // invoke native method
                try {
                    ref.setScalingType(scalingType);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::setScalingType__org_webrtc_RendererCommon_ScalingType__org_webrtc_RendererCommon_ScalingType", (__args__, __methodResult__) -> {
                // args
                // enum arg
                org.webrtc.RendererCommon.ScalingType scalingTypeMatchOrientation = org.webrtc.RendererCommon.ScalingType.values()[(int) ((Map<String, Object>) __args__).get("scalingTypeMatchOrientation")];
                // enum arg
                org.webrtc.RendererCommon.ScalingType scalingTypeMismatchOrientation = org.webrtc.RendererCommon.ScalingType.values()[(int) ((Map<String, Object>) __args__).get("scalingTypeMismatchOrientation")];
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::setScalingType(" + scalingTypeMatchOrientation + scalingTypeMismatchOrientation + ")");
                }
            
                // invoke native method
                try {
                    ref.setScalingType(scalingTypeMatchOrientation, scalingTypeMismatchOrientation);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::setFpsReduction", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                Double fps = (Double) ((Map<String, Object>) __args__).get("fps");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::setFpsReduction(" + fps + ")");
                }
            
                // invoke native method
                try {
                    ref.setFpsReduction(new Double(fps).floatValue());
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::disableFpsReduction", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::disableFpsReduction(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.disableFpsReduction();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::pauseVideo", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::pauseVideo(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.pauseVideo();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceViewRenderer::clearImage", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceViewRenderer ref = (org.webrtc.SurfaceViewRenderer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceViewRenderer@" + refId + "::clearImage(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.clearImage();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.CameraVideoCapturer.CameraStatistics::addFrame", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.CameraVideoCapturer.CameraStatistics ref = (org.webrtc.CameraVideoCapturer.CameraStatistics) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.CameraVideoCapturer.CameraStatistics@" + refId + "::addFrame(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.addFrame();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.CameraVideoCapturer.CameraStatistics::release", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.CameraVideoCapturer.CameraStatistics ref = (org.webrtc.CameraVideoCapturer.CameraStatistics) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.CameraVideoCapturer.CameraStatistics@" + refId + "::release(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.release();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.EglBase.Context::getNativeEglContext", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.EglBase.Context ref = (org.webrtc.EglBase.Context) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.EglBase.Context@" + refId + "::getNativeEglContext(" + "" + ")");
                }
            
                // invoke native method
                long __result__;
                try {
                    __result__ = ref.getNativeEglContext();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                long jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpSender::setTrack", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __trackRefId__ = (Integer) ((Map<String, Object>) __args__).get("track");
                org.webrtc.MediaStreamTrack track = __trackRefId__ != null ? (org.webrtc.MediaStreamTrack) getHEAP().get(__trackRefId__) : null;
                // jsonable arg
                boolean takeOwnership = (boolean) ((Map<String, Object>) __args__).get("takeOwnership");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpSender ref = (org.webrtc.RtpSender) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpSender@" + refId + "::setTrack(" + track + takeOwnership + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.setTrack(track, takeOwnership);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpSender::track", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpSender ref = (org.webrtc.RtpSender) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpSender@" + refId + "::track(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.MediaStreamTrack __result__;
                try {
                    __result__ = ref.track();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpSender::setParameters", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __parametersRefId__ = (Integer) ((Map<String, Object>) __args__).get("parameters");
                org.webrtc.RtpParameters parameters = __parametersRefId__ != null ? (org.webrtc.RtpParameters) getHEAP().get(__parametersRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpSender ref = (org.webrtc.RtpSender) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpSender@" + refId + "::setParameters(" + parameters + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.setParameters(parameters);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpSender::getParameters", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpSender ref = (org.webrtc.RtpSender) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpSender@" + refId + "::getParameters(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.RtpParameters __result__;
                try {
                    __result__ = ref.getParameters();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpSender::dtmf", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpSender ref = (org.webrtc.RtpSender) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpSender@" + refId + "::dtmf(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.DtmfSender __result__;
                try {
                    __result__ = ref.dtmf();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RtpSender::dispose", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RtpSender ref = (org.webrtc.RtpSender) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RtpSender@" + refId + "::dispose(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.dispose();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrame::getBuffer", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrame ref = (org.webrtc.VideoFrame) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrame@" + refId + "::getBuffer(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.VideoFrame.Buffer __result__;
                try {
                    __result__ = ref.getBuffer();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrame::getRotation", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrame ref = (org.webrtc.VideoFrame) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrame@" + refId + "::getRotation(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getRotation();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrame::getTimestampNs", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrame ref = (org.webrtc.VideoFrame) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrame@" + refId + "::getTimestampNs(" + "" + ")");
                }
            
                // invoke native method
                long __result__;
                try {
                    __result__ = ref.getTimestampNs();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                long jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrame::getRotatedWidth", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrame ref = (org.webrtc.VideoFrame) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrame@" + refId + "::getRotatedWidth(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getRotatedWidth();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrame::getRotatedHeight", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrame ref = (org.webrtc.VideoFrame) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrame@" + refId + "::getRotatedHeight(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getRotatedHeight();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.CameraEnumerationAndroid::getClosestSupportedFramerateRange", (__args__, __methodResult__) -> {
                // args
                // list arg
                List<Integer> supportedFrameratesRefIdList = (List<Integer>) ((Map<String, Object>) __args__).get("supportedFramerates");
                java.util.List<org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange> supportedFramerates = new ArrayList<>();
                for (int refId : supportedFrameratesRefIdList) {
                    ((ArrayList<org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange>) supportedFramerates).add((org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange) getHEAP().get(refId));
                }
                // jsonable arg
                int requestedFps = (int) ((Map<String, Object>) __args__).get("requestedFps");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.CameraEnumerationAndroid::getClosestSupportedFramerateRange(" + supportedFramerates + requestedFps + ")");
                }
            
                // invoke native method
                org.webrtc.CameraEnumerationAndroid.CaptureFormat.FramerateRange __result__;
                try {
                    __result__ = org.webrtc.CameraEnumerationAndroid.getClosestSupportedFramerateRange((ArrayList) supportedFramerates, requestedFps);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.CameraEnumerationAndroid::getClosestSupportedSize", (__args__, __methodResult__) -> {
                // args
                // list arg
                List<Integer> supportedSizesRefIdList = (List<Integer>) ((Map<String, Object>) __args__).get("supportedSizes");
                java.util.List<org.webrtc.Size> supportedSizes = new ArrayList<>();
                for (int refId : supportedSizesRefIdList) {
                    ((ArrayList<org.webrtc.Size>) supportedSizes).add((org.webrtc.Size) getHEAP().get(refId));
                }
                // jsonable arg
                int requestedWidth = (int) ((Map<String, Object>) __args__).get("requestedWidth");
                // jsonable arg
                int requestedHeight = (int) ((Map<String, Object>) __args__).get("requestedHeight");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.CameraEnumerationAndroid::getClosestSupportedSize(" + supportedSizes + requestedWidth + requestedHeight + ")");
                }
            
                // invoke native method
                org.webrtc.Size __result__;
                try {
                    __result__ = org.webrtc.CameraEnumerationAndroid.getClosestSupportedSize((ArrayList) supportedSizes, requestedWidth, requestedHeight);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.GlShader::getAttribLocation", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String label = (String) ((Map<String, Object>) __args__).get("label");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.GlShader ref = (org.webrtc.GlShader) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.GlShader@" + refId + "::getAttribLocation(" + label + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getAttribLocation(label);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.GlShader::getUniformLocation", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String label = (String) ((Map<String, Object>) __args__).get("label");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.GlShader ref = (org.webrtc.GlShader) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.GlShader@" + refId + "::getUniformLocation(" + label + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getUniformLocation(label);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.GlShader::useProgram", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.GlShader ref = (org.webrtc.GlShader) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.GlShader@" + refId + "::useProgram(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.useProgram();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.GlShader::release", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.GlShader ref = (org.webrtc.GlShader) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.GlShader@" + refId + "::release(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.release();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DataChannel::registerObserver", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __observerRefId__ = (Integer) ((Map<String, Object>) __args__).get("observer");
                org.webrtc.DataChannel.Observer observer = __observerRefId__ != null ? (org.webrtc.DataChannel.Observer) getHEAP().get(__observerRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel ref = (org.webrtc.DataChannel) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DataChannel@" + refId + "::registerObserver(" + observer + ")");
                }
            
                // invoke native method
                try {
                    ref.registerObserver(observer);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DataChannel::unregisterObserver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel ref = (org.webrtc.DataChannel) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DataChannel@" + refId + "::unregisterObserver(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.unregisterObserver();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DataChannel::label", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel ref = (org.webrtc.DataChannel) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DataChannel@" + refId + "::label(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = ref.label();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DataChannel::state", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel ref = (org.webrtc.DataChannel) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DataChannel@" + refId + "::state(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.DataChannel.State __result__;
                try {
                    __result__ = ref.state();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DataChannel::bufferedAmount", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel ref = (org.webrtc.DataChannel) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DataChannel@" + refId + "::bufferedAmount(" + "" + ")");
                }
            
                // invoke native method
                long __result__;
                try {
                    __result__ = ref.bufferedAmount();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                long jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DataChannel::close", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel ref = (org.webrtc.DataChannel) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DataChannel@" + refId + "::close(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.close();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DataChannel::send", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __bufferRefId__ = (Integer) ((Map<String, Object>) __args__).get("buffer");
                org.webrtc.DataChannel.Buffer buffer = __bufferRefId__ != null ? (org.webrtc.DataChannel.Buffer) getHEAP().get(__bufferRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel ref = (org.webrtc.DataChannel) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DataChannel@" + refId + "::send(" + buffer + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.send(buffer);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.DataChannel::dispose", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.DataChannel ref = (org.webrtc.DataChannel) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.DataChannel@" + refId + "::dispose(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.dispose();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SessionDescription.Type::canonicalForm", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SessionDescription.Type ref = (org.webrtc.SessionDescription.Type) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SessionDescription.Type@" + refId + "::canonicalForm(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = ref.canonicalForm();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SessionDescription.Type::fromCanonicalForm", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String canonical = (String) ((Map<String, Object>) __args__).get("canonical");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SessionDescription.Type::fromCanonicalForm(" + canonical + ")");
                }
            
                // invoke native method
                org.webrtc.SessionDescription.Type __result__;
                try {
                    __result__ = org.webrtc.SessionDescription.Type.fromCanonicalForm(canonical);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.NetworkMonitor::init", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __contextRefId__ = (Integer) ((Map<String, Object>) __args__).get("context");
                android.content.Context context = __contextRefId__ != null ? (android.content.Context) getHEAP().get(__contextRefId__) : null;
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.NetworkMonitor::init(" + context + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.NetworkMonitor.init(context);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.NetworkMonitor::getInstance", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.NetworkMonitor::getInstance(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.NetworkMonitor __result__;
                try {
                    __result__ = org.webrtc.NetworkMonitor.getInstance();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.NetworkMonitor::startMonitoring__android_content_Context", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __applicationContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("applicationContext");
                android.content.Context applicationContext = __applicationContextRefId__ != null ? (android.content.Context) getHEAP().get(__applicationContextRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.NetworkMonitor ref = (org.webrtc.NetworkMonitor) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.NetworkMonitor@" + refId + "::startMonitoring(" + applicationContext + ")");
                }
            
                // invoke native method
                try {
                    ref.startMonitoring(applicationContext);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.NetworkMonitor::startMonitoring", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.NetworkMonitor ref = (org.webrtc.NetworkMonitor) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.NetworkMonitor@" + refId + "::startMonitoring(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.startMonitoring();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.NetworkMonitor::stopMonitoring", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.NetworkMonitor ref = (org.webrtc.NetworkMonitor) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.NetworkMonitor@" + refId + "::stopMonitoring(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.stopMonitoring();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.NetworkMonitor::addNetworkObserver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.NetworkMonitor::addNetworkObserver(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.NetworkMonitor.addNetworkObserver(new org.webrtc.NetworkMonitor.NetworkObserver() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.NetworkMonitor::addNetworkObserver::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onConnectionTypeChanged(org.webrtc.NetworkMonitorAutoDetect.ConnectionType var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onConnectionTypeChanged(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // enum arg
                            int argvar1 = var1.ordinal();
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.NetworkMonitor.NetworkObserver::onConnectionTypeChanged",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.NetworkMonitor::addObserver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.NetworkMonitor ref = (org.webrtc.NetworkMonitor) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.NetworkMonitor@" + refId + "::addObserver(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.addObserver(new org.webrtc.NetworkMonitor.NetworkObserver() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.NetworkMonitor::addObserver::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onConnectionTypeChanged(org.webrtc.NetworkMonitorAutoDetect.ConnectionType var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onConnectionTypeChanged(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // enum arg
                            int argvar1 = var1.ordinal();
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.NetworkMonitor.NetworkObserver::onConnectionTypeChanged",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.NetworkMonitor::removeNetworkObserver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.NetworkMonitor::removeNetworkObserver(" + "" + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.NetworkMonitor.removeNetworkObserver(new org.webrtc.NetworkMonitor.NetworkObserver() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.NetworkMonitor::removeNetworkObserver::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onConnectionTypeChanged(org.webrtc.NetworkMonitorAutoDetect.ConnectionType var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onConnectionTypeChanged(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // enum arg
                            int argvar1 = var1.ordinal();
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.NetworkMonitor.NetworkObserver::onConnectionTypeChanged",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.NetworkMonitor::removeObserver", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.NetworkMonitor ref = (org.webrtc.NetworkMonitor) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.NetworkMonitor@" + refId + "::removeObserver(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.removeObserver(new org.webrtc.NetworkMonitor.NetworkObserver() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.NetworkMonitor::removeObserver::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onConnectionTypeChanged(org.webrtc.NetworkMonitorAutoDetect.ConnectionType var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onConnectionTypeChanged(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // enum arg
                            int argvar1 = var1.ordinal();
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.NetworkMonitor.NetworkObserver::onConnectionTypeChanged",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.NetworkMonitor::isOnline", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.NetworkMonitor::isOnline(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = org.webrtc.NetworkMonitor.isOnline();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat::frameSize", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.CameraEnumerationAndroid.CaptureFormat ref = (org.webrtc.CameraEnumerationAndroid.CaptureFormat) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.CameraEnumerationAndroid.CaptureFormat@" + refId + "::frameSize(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.frameSize();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.CameraEnumerationAndroid.CaptureFormat::frameSize__int__int__int", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int width = (int) ((Map<String, Object>) __args__).get("width");
                // jsonable arg
                int height = (int) ((Map<String, Object>) __args__).get("height");
                // jsonable arg
                int imageFormat = (int) ((Map<String, Object>) __args__).get("imageFormat");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.CameraEnumerationAndroid.CaptureFormat::frameSize(" + width + height + imageFormat + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = org.webrtc.CameraEnumerationAndroid.CaptureFormat.frameSize(width, height, imageFormat);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.GlTextureFrameBuffer::setSize", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int width = (int) ((Map<String, Object>) __args__).get("width");
                // jsonable arg
                int height = (int) ((Map<String, Object>) __args__).get("height");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.GlTextureFrameBuffer ref = (org.webrtc.GlTextureFrameBuffer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.GlTextureFrameBuffer@" + refId + "::setSize(" + width + height + ")");
                }
            
                // invoke native method
                try {
                    ref.setSize(width, height);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.GlTextureFrameBuffer::getWidth", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.GlTextureFrameBuffer ref = (org.webrtc.GlTextureFrameBuffer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.GlTextureFrameBuffer@" + refId + "::getWidth(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getWidth();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.GlTextureFrameBuffer::getHeight", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.GlTextureFrameBuffer ref = (org.webrtc.GlTextureFrameBuffer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.GlTextureFrameBuffer@" + refId + "::getHeight(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getHeight();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.GlTextureFrameBuffer::getFrameBufferId", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.GlTextureFrameBuffer ref = (org.webrtc.GlTextureFrameBuffer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.GlTextureFrameBuffer@" + refId + "::getFrameBufferId(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getFrameBufferId();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.GlTextureFrameBuffer::getTextureId", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.GlTextureFrameBuffer ref = (org.webrtc.GlTextureFrameBuffer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.GlTextureFrameBuffer@" + refId + "::getTextureId(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getTextureId();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.GlTextureFrameBuffer::release", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.GlTextureFrameBuffer ref = (org.webrtc.GlTextureFrameBuffer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.GlTextureFrameBuffer@" + refId + "::release(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.release();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaStream::addTrack__org_webrtc_AudioTrack", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __trackRefId__ = (Integer) ((Map<String, Object>) __args__).get("track");
                org.webrtc.AudioTrack track = __trackRefId__ != null ? (org.webrtc.AudioTrack) getHEAP().get(__trackRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaStream ref = (org.webrtc.MediaStream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaStream@" + refId + "::addTrack(" + track + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.addTrack(track);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaStream::addTrack__org_webrtc_VideoTrack", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __trackRefId__ = (Integer) ((Map<String, Object>) __args__).get("track");
                org.webrtc.VideoTrack track = __trackRefId__ != null ? (org.webrtc.VideoTrack) getHEAP().get(__trackRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaStream ref = (org.webrtc.MediaStream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaStream@" + refId + "::addTrack(" + track + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.addTrack(track);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaStream::addPreservedTrack", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __trackRefId__ = (Integer) ((Map<String, Object>) __args__).get("track");
                org.webrtc.VideoTrack track = __trackRefId__ != null ? (org.webrtc.VideoTrack) getHEAP().get(__trackRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaStream ref = (org.webrtc.MediaStream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaStream@" + refId + "::addPreservedTrack(" + track + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.addPreservedTrack(track);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaStream::removeTrack__org_webrtc_AudioTrack", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __trackRefId__ = (Integer) ((Map<String, Object>) __args__).get("track");
                org.webrtc.AudioTrack track = __trackRefId__ != null ? (org.webrtc.AudioTrack) getHEAP().get(__trackRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaStream ref = (org.webrtc.MediaStream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaStream@" + refId + "::removeTrack(" + track + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.removeTrack(track);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaStream::removeTrack__org_webrtc_VideoTrack", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __trackRefId__ = (Integer) ((Map<String, Object>) __args__).get("track");
                org.webrtc.VideoTrack track = __trackRefId__ != null ? (org.webrtc.VideoTrack) getHEAP().get(__trackRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaStream ref = (org.webrtc.MediaStream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaStream@" + refId + "::removeTrack(" + track + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.removeTrack(track);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaStream::dispose", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaStream ref = (org.webrtc.MediaStream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaStream@" + refId + "::dispose(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.dispose();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.MediaStream::getId", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.MediaStream ref = (org.webrtc.MediaStream) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.MediaStream@" + refId + "::getId(" + "" + ")");
                }
            
                // invoke native method
                String __result__;
                try {
                    __result__ = ref.getId();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.JniCommon::nativeAddRef", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                long var0 = (long) (int) ((Map<String, Object>) __args__).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.JniCommon::nativeAddRef(" + var0 + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.JniCommon.nativeAddRef(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.JniCommon::nativeReleaseRef", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                long var0 = (long) (int) ((Map<String, Object>) __args__).get("var0");
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.JniCommon::nativeReleaseRef(" + var0 + ")");
                }
            
                // invoke native method
                try {
                    org.webrtc.JniCommon.nativeReleaseRef(var0);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.EncodedImage.FrameType::getNative", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.EncodedImage.FrameType ref = (org.webrtc.EncodedImage.FrameType) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.EncodedImage.FrameType@" + refId + "::getNative(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getNative();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrame.Buffer::getWidth", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrame.Buffer ref = (org.webrtc.VideoFrame.Buffer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrame.Buffer@" + refId + "::getWidth(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getWidth();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrame.Buffer::getHeight", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrame.Buffer ref = (org.webrtc.VideoFrame.Buffer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrame.Buffer@" + refId + "::getHeight(" + "" + ")");
                }
            
                // invoke native method
                int __result__;
                try {
                    __result__ = ref.getHeight();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                int jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrame.Buffer::toI420", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrame.Buffer ref = (org.webrtc.VideoFrame.Buffer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrame.Buffer@" + refId + "::toI420(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.VideoFrame.I420Buffer __result__;
                try {
                    __result__ = ref.toI420();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoFrame.Buffer::cropAndScale", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) __args__).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) __args__).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) __args__).get("var6");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoFrame.Buffer ref = (org.webrtc.VideoFrame.Buffer) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoFrame.Buffer@" + refId + "::cropAndScale(" + var1 + var2 + var3 + var4 + var5 + var6 + ")");
                }
            
                // invoke native method
                org.webrtc.VideoFrame.Buffer __result__;
                try {
                    __result__ = ref.cropAndScale(var1, var2, var3, var4, var5, var6);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoDecoderFactory::createDecoder__String", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String codecType = (String) ((Map<String, Object>) __args__).get("codecType");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoDecoderFactory ref = (org.webrtc.VideoDecoderFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoDecoderFactory@" + refId + "::createDecoder(" + codecType + ")");
                }
            
                // invoke native method
                org.webrtc.VideoDecoder __result__;
                try {
                    __result__ = ref.createDecoder(codecType);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoDecoderFactory::createDecoder__org_webrtc_VideoCodecInfo", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __infoRefId__ = (Integer) ((Map<String, Object>) __args__).get("info");
                org.webrtc.VideoCodecInfo info = __infoRefId__ != null ? (org.webrtc.VideoCodecInfo) getHEAP().get(__infoRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoDecoderFactory ref = (org.webrtc.VideoDecoderFactory) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoDecoderFactory@" + refId + "::createDecoder(" + info + ")");
                }
            
                // invoke native method
                org.webrtc.VideoDecoder __result__;
                try {
                    __result__ = ref.createDecoder(info);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RefCounted::retain", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RefCounted ref = (org.webrtc.RefCounted) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RefCounted@" + refId + "::retain(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.retain();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.RefCounted::release", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.RefCounted ref = (org.webrtc.RefCounted) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.RefCounted@" + refId + "::release(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.release();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoTrack::addSink", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __sinkRefId__ = (Integer) ((Map<String, Object>) __args__).get("sink");
                org.webrtc.VideoSink sink = __sinkRefId__ != null ? (org.webrtc.VideoSink) getHEAP().get(__sinkRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoTrack ref = (org.webrtc.VideoTrack) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoTrack@" + refId + "::addSink(" + sink + ")");
                }
            
                // invoke native method
                try {
                    ref.addSink(sink);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.VideoTrack::removeSink", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __sinkRefId__ = (Integer) ((Map<String, Object>) __args__).get("sink");
                org.webrtc.VideoSink sink = __sinkRefId__ != null ? (org.webrtc.VideoSink) getHEAP().get(__sinkRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.VideoTrack ref = (org.webrtc.VideoTrack) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.VideoTrack@" + refId + "::removeSink(" + sink + ")");
                }
            
                // invoke native method
                try {
                    ref.removeSink(sink);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceTextureHelper::create", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String threadName = (String) ((Map<String, Object>) __args__).get("threadName");
                // ref arg
                Integer __sharedContextRefId__ = (Integer) ((Map<String, Object>) __args__).get("sharedContext");
                org.webrtc.EglBase.Context sharedContext = __sharedContextRefId__ != null ? (org.webrtc.EglBase.Context) getHEAP().get(__sharedContextRefId__) : null;
            
                // ref
            
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceTextureHelper::create(" + threadName + sharedContext + ")");
                }
            
                // invoke native method
                org.webrtc.SurfaceTextureHelper __result__;
                try {
                    __result__ = org.webrtc.SurfaceTextureHelper.create(threadName, sharedContext);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceTextureHelper::startListening", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __listenerRefId__ = (Integer) ((Map<String, Object>) __args__).get("listener");
                org.webrtc.VideoSink listener = __listenerRefId__ != null ? (org.webrtc.VideoSink) getHEAP().get(__listenerRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceTextureHelper ref = (org.webrtc.SurfaceTextureHelper) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceTextureHelper@" + refId + "::startListening(" + listener + ")");
                }
            
                // invoke native method
                try {
                    ref.startListening(listener);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceTextureHelper::stopListening", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceTextureHelper ref = (org.webrtc.SurfaceTextureHelper) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceTextureHelper@" + refId + "::stopListening(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.stopListening();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceTextureHelper::setTextureSize", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int textureWidth = (int) ((Map<String, Object>) __args__).get("textureWidth");
                // jsonable arg
                int textureHeight = (int) ((Map<String, Object>) __args__).get("textureHeight");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceTextureHelper ref = (org.webrtc.SurfaceTextureHelper) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceTextureHelper@" + refId + "::setTextureSize(" + textureWidth + textureHeight + ")");
                }
            
                // invoke native method
                try {
                    ref.setTextureSize(textureWidth, textureHeight);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceTextureHelper::setFrameRotation", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int rotation = (int) ((Map<String, Object>) __args__).get("rotation");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceTextureHelper ref = (org.webrtc.SurfaceTextureHelper) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceTextureHelper@" + refId + "::setFrameRotation(" + rotation + ")");
                }
            
                // invoke native method
                try {
                    ref.setFrameRotation(rotation);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceTextureHelper::isTextureInUse", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceTextureHelper ref = (org.webrtc.SurfaceTextureHelper) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceTextureHelper@" + refId + "::isTextureInUse(" + "" + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.isTextureInUse();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceTextureHelper::dispose", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceTextureHelper ref = (org.webrtc.SurfaceTextureHelper) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceTextureHelper@" + refId + "::dispose(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.dispose();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.SurfaceTextureHelper::textureToYuv", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __textureBufferRefId__ = (Integer) ((Map<String, Object>) __args__).get("textureBuffer");
                org.webrtc.VideoFrame.TextureBuffer textureBuffer = __textureBufferRefId__ != null ? (org.webrtc.VideoFrame.TextureBuffer) getHEAP().get(__textureBufferRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.SurfaceTextureHelper ref = (org.webrtc.SurfaceTextureHelper) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.SurfaceTextureHelper@" + refId + "::textureToYuv(" + textureBuffer + ")");
                }
            
                // invoke native method
                org.webrtc.VideoFrame.I420Buffer __result__;
                try {
                    __result__ = ref.textureToYuv(textureBuffer);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::getLocalDescription", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::getLocalDescription(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.SessionDescription __result__;
                try {
                    __result__ = ref.getLocalDescription();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::getRemoteDescription", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::getRemoteDescription(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.SessionDescription __result__;
                try {
                    __result__ = ref.getRemoteDescription();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::createDataChannel", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String label = (String) ((Map<String, Object>) __args__).get("label");
                // ref arg
                Integer __initRefId__ = (Integer) ((Map<String, Object>) __args__).get("init");
                org.webrtc.DataChannel.Init init = __initRefId__ != null ? (org.webrtc.DataChannel.Init) getHEAP().get(__initRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::createDataChannel(" + label + init + ")");
                }
            
                // invoke native method
                org.webrtc.DataChannel __result__;
                try {
                    __result__ = ref.createDataChannel(label, init);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::createOffer", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __observerRefId__ = (Integer) ((Map<String, Object>) __args__).get("observer");
                org.webrtc.SdpObserver observer = __observerRefId__ != null ? (org.webrtc.SdpObserver) getHEAP().get(__observerRefId__) : null;
                // ref arg
                Integer __constraintsRefId__ = (Integer) ((Map<String, Object>) __args__).get("constraints");
                org.webrtc.MediaConstraints constraints = __constraintsRefId__ != null ? (org.webrtc.MediaConstraints) getHEAP().get(__constraintsRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::createOffer(" + observer + constraints + ")");
                }
            
                // invoke native method
                try {
                    ref.createOffer(observer, constraints);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::createAnswer", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __observerRefId__ = (Integer) ((Map<String, Object>) __args__).get("observer");
                org.webrtc.SdpObserver observer = __observerRefId__ != null ? (org.webrtc.SdpObserver) getHEAP().get(__observerRefId__) : null;
                // ref arg
                Integer __constraintsRefId__ = (Integer) ((Map<String, Object>) __args__).get("constraints");
                org.webrtc.MediaConstraints constraints = __constraintsRefId__ != null ? (org.webrtc.MediaConstraints) getHEAP().get(__constraintsRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::createAnswer(" + observer + constraints + ")");
                }
            
                // invoke native method
                try {
                    ref.createAnswer(observer, constraints);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::setLocalDescription", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __observerRefId__ = (Integer) ((Map<String, Object>) __args__).get("observer");
                org.webrtc.SdpObserver observer = __observerRefId__ != null ? (org.webrtc.SdpObserver) getHEAP().get(__observerRefId__) : null;
                // ref arg
                Integer __sdpRefId__ = (Integer) ((Map<String, Object>) __args__).get("sdp");
                org.webrtc.SessionDescription sdp = __sdpRefId__ != null ? (org.webrtc.SessionDescription) getHEAP().get(__sdpRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::setLocalDescription(" + observer + sdp + ")");
                }
            
                // invoke native method
                try {
                    ref.setLocalDescription(observer, sdp);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::setRemoteDescription", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __observerRefId__ = (Integer) ((Map<String, Object>) __args__).get("observer");
                org.webrtc.SdpObserver observer = __observerRefId__ != null ? (org.webrtc.SdpObserver) getHEAP().get(__observerRefId__) : null;
                // ref arg
                Integer __sdpRefId__ = (Integer) ((Map<String, Object>) __args__).get("sdp");
                org.webrtc.SessionDescription sdp = __sdpRefId__ != null ? (org.webrtc.SessionDescription) getHEAP().get(__sdpRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::setRemoteDescription(" + observer + sdp + ")");
                }
            
                // invoke native method
                try {
                    ref.setRemoteDescription(observer, sdp);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::setAudioPlayout", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean playout = (boolean) ((Map<String, Object>) __args__).get("playout");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::setAudioPlayout(" + playout + ")");
                }
            
                // invoke native method
                try {
                    ref.setAudioPlayout(playout);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::setAudioRecording", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                boolean recording = (boolean) ((Map<String, Object>) __args__).get("recording");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::setAudioRecording(" + recording + ")");
                }
            
                // invoke native method
                try {
                    ref.setAudioRecording(recording);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::setConfiguration", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __configRefId__ = (Integer) ((Map<String, Object>) __args__).get("config");
                org.webrtc.PeerConnection.RTCConfiguration config = __configRefId__ != null ? (org.webrtc.PeerConnection.RTCConfiguration) getHEAP().get(__configRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::setConfiguration(" + config + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.setConfiguration(config);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::addIceCandidate", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __candidateRefId__ = (Integer) ((Map<String, Object>) __args__).get("candidate");
                org.webrtc.IceCandidate candidate = __candidateRefId__ != null ? (org.webrtc.IceCandidate) getHEAP().get(__candidateRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::addIceCandidate(" + candidate + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.addIceCandidate(candidate);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::addStream", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __streamRefId__ = (Integer) ((Map<String, Object>) __args__).get("stream");
                org.webrtc.MediaStream stream = __streamRefId__ != null ? (org.webrtc.MediaStream) getHEAP().get(__streamRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::addStream(" + stream + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.addStream(stream);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::removeStream", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __streamRefId__ = (Integer) ((Map<String, Object>) __args__).get("stream");
                org.webrtc.MediaStream stream = __streamRefId__ != null ? (org.webrtc.MediaStream) getHEAP().get(__streamRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::removeStream(" + stream + ")");
                }
            
                // invoke native method
                try {
                    ref.removeStream(stream);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::createSender", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                String kind = (String) ((Map<String, Object>) __args__).get("kind");
                // jsonable arg
                String stream_id = (String) ((Map<String, Object>) __args__).get("stream_id");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::createSender(" + kind + stream_id + ")");
                }
            
                // invoke native method
                org.webrtc.RtpSender __result__;
                try {
                    __result__ = ref.createSender(kind, stream_id);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::getSenders", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::getSenders(" + "" + ")");
                }
            
                // invoke native method
                java.util.List<org.webrtc.RtpSender> __result__;
                try {
                    __result__ = ref.getSenders();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = new ArrayList<>();
                    for (org.webrtc.RtpSender item : __result__) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::getReceivers", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::getReceivers(" + "" + ")");
                }
            
                // invoke native method
                java.util.List<org.webrtc.RtpReceiver> __result__;
                try {
                    __result__ = ref.getReceivers();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = new ArrayList<>();
                    for (org.webrtc.RtpReceiver item : __result__) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::getTransceivers", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::getTransceivers(" + "" + ")");
                }
            
                // invoke native method
                java.util.List<org.webrtc.RtpTransceiver> __result__;
                try {
                    __result__ = ref.getTransceivers();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                List<Integer> jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = new ArrayList<>();
                    for (org.webrtc.RtpTransceiver item : __result__) {
                        getHEAP().put(System.identityHashCode(item), item);
                        jsonableResult.add(System.identityHashCode(item));
                    }
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::addTrack__org_webrtc_MediaStreamTrack", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __trackRefId__ = (Integer) ((Map<String, Object>) __args__).get("track");
                org.webrtc.MediaStreamTrack track = __trackRefId__ != null ? (org.webrtc.MediaStreamTrack) getHEAP().get(__trackRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::addTrack(" + track + ")");
                }
            
                // invoke native method
                org.webrtc.RtpSender __result__;
                try {
                    __result__ = ref.addTrack(track);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::addTrack__org_webrtc_MediaStreamTrack__List_String_", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __trackRefId__ = (Integer) ((Map<String, Object>) __args__).get("track");
                org.webrtc.MediaStreamTrack track = __trackRefId__ != null ? (org.webrtc.MediaStreamTrack) getHEAP().get(__trackRefId__) : null;
                // jsonable arg
                java.util.List<String> streamIds = (java.util.List<String>) ((Map<String, Object>) __args__).get("streamIds");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::addTrack(" + track + streamIds + ")");
                }
            
                // invoke native method
                org.webrtc.RtpSender __result__;
                try {
                    __result__ = ref.addTrack(track, (ArrayList) streamIds);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::removeTrack", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __senderRefId__ = (Integer) ((Map<String, Object>) __args__).get("sender");
                org.webrtc.RtpSender sender = __senderRefId__ != null ? (org.webrtc.RtpSender) getHEAP().get(__senderRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::removeTrack(" + sender + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.removeTrack(sender);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::addTransceiver__org_webrtc_MediaStreamTrack", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __trackRefId__ = (Integer) ((Map<String, Object>) __args__).get("track");
                org.webrtc.MediaStreamTrack track = __trackRefId__ != null ? (org.webrtc.MediaStreamTrack) getHEAP().get(__trackRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::addTransceiver(" + track + ")");
                }
            
                // invoke native method
                org.webrtc.RtpTransceiver __result__;
                try {
                    __result__ = ref.addTransceiver(track);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::addTransceiver__org_webrtc_MediaStreamTrack__org_webrtc_RtpTransceiver_RtpTransceiverInit", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __trackRefId__ = (Integer) ((Map<String, Object>) __args__).get("track");
                org.webrtc.MediaStreamTrack track = __trackRefId__ != null ? (org.webrtc.MediaStreamTrack) getHEAP().get(__trackRefId__) : null;
                // ref arg
                Integer __initRefId__ = (Integer) ((Map<String, Object>) __args__).get("init");
                org.webrtc.RtpTransceiver.RtpTransceiverInit init = __initRefId__ != null ? (org.webrtc.RtpTransceiver.RtpTransceiverInit) getHEAP().get(__initRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::addTransceiver(" + track + init + ")");
                }
            
                // invoke native method
                org.webrtc.RtpTransceiver __result__;
                try {
                    __result__ = ref.addTransceiver(track, init);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::addTransceiver__org_webrtc_MediaStreamTrack_MediaType", (__args__, __methodResult__) -> {
                // args
                // enum arg
                org.webrtc.MediaStreamTrack.MediaType mediaType = org.webrtc.MediaStreamTrack.MediaType.values()[(int) ((Map<String, Object>) __args__).get("mediaType")];
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::addTransceiver(" + mediaType + ")");
                }
            
                // invoke native method
                org.webrtc.RtpTransceiver __result__;
                try {
                    __result__ = ref.addTransceiver(mediaType);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::addTransceiver__org_webrtc_MediaStreamTrack_MediaType__org_webrtc_RtpTransceiver_RtpTransceiverInit", (__args__, __methodResult__) -> {
                // args
                // enum arg
                org.webrtc.MediaStreamTrack.MediaType mediaType = org.webrtc.MediaStreamTrack.MediaType.values()[(int) ((Map<String, Object>) __args__).get("mediaType")];
                // ref arg
                Integer __initRefId__ = (Integer) ((Map<String, Object>) __args__).get("init");
                org.webrtc.RtpTransceiver.RtpTransceiverInit init = __initRefId__ != null ? (org.webrtc.RtpTransceiver.RtpTransceiverInit) getHEAP().get(__initRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::addTransceiver(" + mediaType + init + ")");
                }
            
                // invoke native method
                org.webrtc.RtpTransceiver __result__;
                try {
                    __result__ = ref.addTransceiver(mediaType, init);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = System.identityHashCode(__result__);
                    getHEAP().put(jsonableResult, __result__);
                }
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::getStats__org_webrtc_StatsObserver__org_webrtc_MediaStreamTrack", (__args__, __methodResult__) -> {
                // args
                // ref arg
                Integer __trackRefId__ = (Integer) ((Map<String, Object>) __args__).get("track");
                org.webrtc.MediaStreamTrack track = __trackRefId__ != null ? (org.webrtc.MediaStreamTrack) getHEAP().get(__trackRefId__) : null;
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::getStats(" + track + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.getStats(new org.webrtc.StatsObserver() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.PeerConnection::getStats__org_webrtc_StatsObserver__org_webrtc_MediaStreamTrack::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onComplete(org.webrtc.StatsReport[] var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onComplete(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.StatsObserver::onComplete",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                }, track);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::getStats__org_webrtc_RTCStatsCollectorCallback", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::getStats(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.getStats(new org.webrtc.RTCStatsCollectorCallback() {
                        // method channel
                        MethodChannel callbackChannel = new MethodChannel(messenger, "org.webrtc.PeerConnection::getStats__org_webrtc_RTCStatsCollectorCallback::Callback");
                        android.os.Handler handler = new android.os.Handler(android.os.Looper.getMainLooper());
            
                        // call dart method
                        @Override
                        public void onStatsDelivered(org.webrtc.RTCStatsReport var1) {
                            // print log
                            if (getEnableLog()) {
                                Log.d("java-callback", "fluttify-java-callback: onStatsDelivered(" + var1 + ")");
                            }
            
                            // convert to jsonable data
                            // ref arg
                            final Integer argvar1;
                            if (var1 != null) {
                                argvar1 = System.identityHashCode(var1);
                                getHEAP().put(argvar1, var1);
                            } else {
                                argvar1 = null;
                            }
            
                            // call dart method
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    callbackChannel.invokeMethod(
                                        "Callback::org.webrtc.RTCStatsCollectorCallback::onStatsDelivered",
                                        new HashMap<String, Object>() {{
                                            put("var1", argvar1);
                                        }}
                                    );
                                }
                            });
            
                            // method result
            
                        }
            
                });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::setBitrate", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                Integer min = (Integer) ((Map<String, Object>) __args__).get("min");
                // jsonable arg
                Integer current = (Integer) ((Map<String, Object>) __args__).get("current");
                // jsonable arg
                Integer max = (Integer) ((Map<String, Object>) __args__).get("max");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::setBitrate(" + min + current + max + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.setBitrate(min, current, max);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::startRtcEventLog", (__args__, __methodResult__) -> {
                // args
                // jsonable arg
                int file_descriptor = (int) ((Map<String, Object>) __args__).get("file_descriptor");
                // jsonable arg
                int max_size_bytes = (int) ((Map<String, Object>) __args__).get("max_size_bytes");
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::startRtcEventLog(" + file_descriptor + max_size_bytes + ")");
                }
            
                // invoke native method
                boolean __result__;
                try {
                    __result__ = ref.startRtcEventLog(file_descriptor, max_size_bytes);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                boolean jsonableResult = __result__;
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::stopRtcEventLog", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::stopRtcEventLog(" + "" + ")");
                }
            
                // invoke native method
                try {
                    ref.stopRtcEventLog();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                String jsonableResult = "success";
            
                __methodResult__.success(jsonableResult);
            });
            // method
            put("org.webrtc.PeerConnection::signalingState", (__args__, __methodResult__) -> {
                // args
            
            
                // ref
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                org.webrtc.PeerConnection ref = (org.webrtc.PeerConnection) getHEAP().get(refId);
            
                // print log
                if (getEnableLog()) {
                    Log.d("fluttify-java", "fluttify-java: org.webrtc.PeerConnection@" + refId + "::signalingState(" + "" + ")");
                }
            
                // invoke native method
                org.webrtc.PeerConnection.SignalingState __result__;
                try {
                    __result__ = ref.signalingState();
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            
                // convert result to jsonable result
                Integer jsonableResult = null;
                if (__result__ != null) {
                    jsonableResult = __result__.ordinal();
                }
            
                __methodResult__.success(jsonableResult);
            });
        }};
    }
}
