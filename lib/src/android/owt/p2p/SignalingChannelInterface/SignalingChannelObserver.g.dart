// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class _owt_p2p_SignalingChannelInterface_SignalingChannelObserver_SUB extends java_lang_Object with owt_p2p_SignalingChannelInterface_SignalingChannelObserver {}

mixin owt_p2p_SignalingChannelInterface_SignalingChannelObserver on java_lang_Object {
  

  static owt_p2p_SignalingChannelInterface_SignalingChannelObserver subInstance() => _owt_p2p_SignalingChannelInterface_SignalingChannelObserver_SUB();

  

  

  
  Future<void> onMessage(String var1, String var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.p2p.SignalingChannelInterface.SignalingChannelObserver@$refId::onMessage([\'var1\':$var1, \'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.SignalingChannelInterface.SignalingChannelObserver::onMessage', {"var1": var1, "var2": var2, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> onServerDisconnected() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.p2p.SignalingChannelInterface.SignalingChannelObserver@$refId::onServerDisconnected([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.SignalingChannelInterface.SignalingChannelObserver::onServerDisconnected', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
}

extension owt_p2p_SignalingChannelInterface_SignalingChannelObserver_Batch on List<owt_p2p_SignalingChannelInterface_SignalingChannelObserver> {
  //region methods
  
  Future<List<void>> onMessage_batch(List<String> var1, List<String> var2) async {
    if (var1.length != var2.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.SignalingChannelInterface.SignalingChannelObserver::onMessage_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "var2": var2[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> onServerDisconnected_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.SignalingChannelInterface.SignalingChannelObserver::onServerDisconnected_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}