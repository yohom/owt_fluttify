// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class owt_p2p_P2PClient extends java_lang_Object with owt_p2p_SignalingChannelInterface_SignalingChannelObserver, owt_base_PeerConnectionChannel_PeerConnectionChannelObserver {
  //region constants
  static const String name__ = 'owt.p2p.P2PClient';

  
  //endregion

  //region creators
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<void> addObserver(owt_p2p_P2PClient_P2PClientObserver observer) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.p2p.P2PClient@$refId::addObserver([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.P2PClient::addObserver', {"refId": refId});
  
  
    // handle native call
    MethodChannel('owt.p2p.P2PClient::addObserver::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::owt.p2p.P2PClient.P2PClientObserver::onServerDisconnected':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onServerDisconnected([])');
              }
        
              // handle the native call
              observer?.onServerDisconnected();
              break;
            case 'Callback::owt.p2p.P2PClient.P2PClientObserver::onStreamAdded':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onStreamAdded([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              observer?.onStreamAdded(TypeOpOwtFluttifyAndroid((args['var1'] as Object))?.as__<owt_p2p_RemoteStream>());
              break;
            case 'Callback::owt.p2p.P2PClient.P2PClientObserver::onDataReceived':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onDataReceived([\'var1\':${args['var1']}, \'var2\':${args['var2']}])');
              }
        
              // handle the native call
              observer?.onDataReceived(args['var1'], args['var2']);
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> removeObserver(owt_p2p_P2PClient_P2PClientObserver observer) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.p2p.P2PClient@$refId::removeObserver([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.P2PClient::removeObserver', {"refId": refId});
  
  
    // handle native call
    MethodChannel('owt.p2p.P2PClient::removeObserver::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::owt.p2p.P2PClient.P2PClientObserver::onServerDisconnected':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onServerDisconnected([])');
              }
        
              // handle the native call
              observer?.onServerDisconnected();
              break;
            case 'Callback::owt.p2p.P2PClient.P2PClientObserver::onStreamAdded':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onStreamAdded([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              observer?.onStreamAdded(TypeOpOwtFluttifyAndroid((args['var1'] as Object))?.as__<owt_p2p_RemoteStream>());
              break;
            case 'Callback::owt.p2p.P2PClient.P2PClientObserver::onDataReceived':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onDataReceived([\'var1\':${args['var1']}, \'var2\':${args['var2']}])');
              }
        
              // handle the native call
              observer?.onDataReceived(args['var1'], args['var2']);
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> addAllowedRemotePeer(String peerId) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.p2p.P2PClient@$refId::addAllowedRemotePeer([\'peerId\':$peerId])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.P2PClient::addAllowedRemotePeer', {"peerId": peerId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> removeAllowedRemotePeer(String peerId) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.p2p.P2PClient@$refId::removeAllowedRemotePeer([\'peerId\':$peerId])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.P2PClient::removeAllowedRemotePeer', {"peerId": peerId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> connect(String token, owt_base_ActionCallback<String> callback) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.p2p.P2PClient@$refId::connect([\'token\':$token])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.P2PClient::connect', {"token": token, "refId": refId});
  
  
    // handle native call
    MethodChannel('owt.p2p.P2PClient::connect::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::owt.base.ActionCallback::onSuccess':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onSuccess([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              callback?.onSuccess(args['var1']);
              break;
            case 'Callback::owt.base.ActionCallback::onFailure':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onFailure([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              callback?.onFailure(TypeOpOwtFluttifyAndroid((args['var1'] as Object))?.as__<owt_base_OwtError>());
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> disconnect() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.p2p.P2PClient@$refId::disconnect([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.P2PClient::disconnect', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> publish(String peerId, owt_base_LocalStream localStream, owt_base_ActionCallback<owt_p2p_Publication> callback) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.p2p.P2PClient@$refId::publish([\'peerId\':$peerId])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.P2PClient::publish', {"peerId": peerId, "localStream": localStream is Ref ? (localStream as Ref)?.refId : localStream, "refId": refId});
  
  
    // handle native call
    MethodChannel('owt.p2p.P2PClient::publish::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::owt.base.ActionCallback::onSuccess':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onSuccess([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              callback?.onSuccess(TypeOpOwtFluttifyAndroid((args['var1'] as Object))?.as__<owt_p2p_Publication>());
              break;
            case 'Callback::owt.base.ActionCallback::onFailure':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onFailure([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              callback?.onFailure(TypeOpOwtFluttifyAndroid((args['var1'] as Object))?.as__<owt_base_OwtError>());
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> stop(String peerId) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.p2p.P2PClient@$refId::stop([\'peerId\':$peerId])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.P2PClient::stop', {"peerId": peerId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> send(String peerId, String message, owt_base_ActionCallback<void> callback) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.p2p.P2PClient@$refId::send([\'peerId\':$peerId, \'message\':$message])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.P2PClient::send', {"peerId": peerId, "message": message, "refId": refId});
  
  
    // handle native call
    MethodChannel('owt.p2p.P2PClient::send::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::owt.base.ActionCallback::onSuccess':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onSuccess([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              callback?.onSuccess(null);
              break;
            case 'Callback::owt.base.ActionCallback::onFailure':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onFailure([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              callback?.onFailure(TypeOpOwtFluttifyAndroid((args['var1'] as Object))?.as__<owt_base_OwtError>());
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension owt_p2p_P2PClient_Batch on List<owt_p2p_P2PClient> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<void>> addAllowedRemotePeer_batch(List<String> peerId) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.P2PClient::addAllowedRemotePeer_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"peerId": peerId[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> removeAllowedRemotePeer_batch(List<String> peerId) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.P2PClient::removeAllowedRemotePeer_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"peerId": peerId[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> disconnect_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.P2PClient::disconnect_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> stop_batch(List<String> peerId) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.p2p.P2PClient::stop_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"peerId": peerId[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}