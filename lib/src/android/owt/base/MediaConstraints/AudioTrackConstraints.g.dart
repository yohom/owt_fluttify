// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class owt_base_MediaConstraints_AudioTrackConstraints extends java_lang_Object  {
  //region constants
  static const String name__ = 'owt.base.MediaConstraints.AudioTrackConstraints';

  
  //endregion

  //region creators
  static Future<owt_base_MediaConstraints_AudioTrackConstraints> create__() async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createowt_base_MediaConstraints_AudioTrackConstraints__');
    final object = owt_base_MediaConstraints_AudioTrackConstraints()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<owt_base_MediaConstraints_AudioTrackConstraints>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchowt_base_MediaConstraints_AudioTrackConstraints__', {'length': length});
  
    final List<owt_base_MediaConstraints_AudioTrackConstraints> typedResult = resultBatch.map((result) => owt_base_MediaConstraints_AudioTrackConstraints()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<bool> get_echoCancellation() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.MediaConstraints.AudioTrackConstraints::get_echoCancellation", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_extendedFilterEchoCancellation() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.MediaConstraints.AudioTrackConstraints::get_extendedFilterEchoCancellation", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_delayAgnosticEchoCancellation() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.MediaConstraints.AudioTrackConstraints::get_delayAgnosticEchoCancellation", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_echoCancellation(bool echoCancellation) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.MediaConstraints.AudioTrackConstraints::set_echoCancellation', {'refId': refId, "echoCancellation": echoCancellation});
  
  
  }
  
  Future<void> set_extendedFilterEchoCancellation(bool extendedFilterEchoCancellation) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.MediaConstraints.AudioTrackConstraints::set_extendedFilterEchoCancellation', {'refId': refId, "extendedFilterEchoCancellation": extendedFilterEchoCancellation});
  
  
  }
  
  Future<void> set_delayAgnosticEchoCancellation(bool delayAgnosticEchoCancellation) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.MediaConstraints.AudioTrackConstraints::set_delayAgnosticEchoCancellation', {'refId': refId, "delayAgnosticEchoCancellation": delayAgnosticEchoCancellation});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension owt_base_MediaConstraints_AudioTrackConstraints_Batch on List<owt_base_MediaConstraints_AudioTrackConstraints> {
  //region getters
  Future<List<bool>> get_echoCancellation_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.MediaConstraints.AudioTrackConstraints::get_echoCancellation_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_extendedFilterEchoCancellation_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.MediaConstraints.AudioTrackConstraints::get_extendedFilterEchoCancellation_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_delayAgnosticEchoCancellation_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.MediaConstraints.AudioTrackConstraints::get_delayAgnosticEchoCancellation_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_echoCancellation_batch(List<bool> echoCancellation) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.MediaConstraints.AudioTrackConstraints::set_echoCancellation_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "echoCancellation": echoCancellation[__i__]}]);
  
  
  }
  
  Future<void> set_extendedFilterEchoCancellation_batch(List<bool> extendedFilterEchoCancellation) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.MediaConstraints.AudioTrackConstraints::set_extendedFilterEchoCancellation_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "extendedFilterEchoCancellation": extendedFilterEchoCancellation[__i__]}]);
  
  
  }
  
  Future<void> set_delayAgnosticEchoCancellation_batch(List<bool> delayAgnosticEchoCancellation) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.MediaConstraints.AudioTrackConstraints::set_delayAgnosticEchoCancellation_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "delayAgnosticEchoCancellation": delayAgnosticEchoCancellation[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}