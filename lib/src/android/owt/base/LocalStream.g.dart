// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class owt_base_LocalStream extends owt_base_Stream  {
  //region constants
  static const String name__ = 'owt.base.LocalStream';

  
  //endregion

  //region creators
  static Future<owt_base_LocalStream> create__owt_base_MediaConstraints_AudioTrackConstraints(owt_base_MediaConstraints_AudioTrackConstraints audioMediaConstraints) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createowt_base_LocalStream__owt_base_MediaConstraints_AudioTrackConstraints', {"audioMediaConstraints": audioMediaConstraints.refId});
    final object = owt_base_LocalStream()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<owt_base_LocalStream>> create_batch__owt_base_MediaConstraints_AudioTrackConstraints(List<owt_base_MediaConstraints_AudioTrackConstraints> audioMediaConstraints) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchowt_base_LocalStream__owt_base_MediaConstraints_AudioTrackConstraints', [for (int __i__ = 0; __i__ < audioMediaConstraints.length; __i__++) {"audioMediaConstraints": audioMediaConstraints[__i__].refId}]);
  
    final List<owt_base_LocalStream> typedResult = resultBatch.map((result) => owt_base_LocalStream()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_resolutionWidth() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.LocalStream::get_resolutionWidth", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_resolutionHeight() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.LocalStream::get_resolutionHeight", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_frameRate() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.LocalStream::get_frameRate", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<void> dispose() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.base.LocalStream@$refId::dispose([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.LocalStream::dispose', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension owt_base_LocalStream_Batch on List<owt_base_LocalStream> {
  //region getters
  Future<List<int>> get_resolutionWidth_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.LocalStream::get_resolutionWidth_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_resolutionHeight_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.LocalStream::get_resolutionHeight_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_frameRate_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.LocalStream::get_frameRate_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<void>> dispose_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.LocalStream::dispose_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}