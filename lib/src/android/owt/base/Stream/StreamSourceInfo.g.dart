// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class owt_base_Stream_StreamSourceInfo extends java_lang_Object  {
  //region constants
  static const String name__ = 'owt.base.Stream.StreamSourceInfo';

  
  //endregion

  //region creators
  static Future<owt_base_Stream_StreamSourceInfo> create__() async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createowt_base_Stream_StreamSourceInfo__');
    final object = owt_base_Stream_StreamSourceInfo()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<owt_base_Stream_StreamSourceInfo> create__owt_base_Stream_StreamSourceInfo_VideoSourceInfo__owt_base_Stream_StreamSourceInfo_AudioSourceInfo(owt_base_Stream_StreamSourceInfo_VideoSourceInfo videoSourceInfo, owt_base_Stream_StreamSourceInfo_AudioSourceInfo audioSourceInfo) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createowt_base_Stream_StreamSourceInfo__owt_base_Stream_StreamSourceInfo_VideoSourceInfo__owt_base_Stream_StreamSourceInfo_AudioSourceInfo', {"videoSourceInfo": videoSourceInfo.index, "audioSourceInfo": audioSourceInfo.index});
    final object = owt_base_Stream_StreamSourceInfo()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<owt_base_Stream_StreamSourceInfo>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchowt_base_Stream_StreamSourceInfo__', {'length': length});
  
    final List<owt_base_Stream_StreamSourceInfo> typedResult = resultBatch.map((result) => owt_base_Stream_StreamSourceInfo()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  static Future<List<owt_base_Stream_StreamSourceInfo>> create_batch__owt_base_Stream_StreamSourceInfo_VideoSourceInfo__owt_base_Stream_StreamSourceInfo_AudioSourceInfo(List<owt_base_Stream_StreamSourceInfo_VideoSourceInfo> videoSourceInfo, List<owt_base_Stream_StreamSourceInfo_AudioSourceInfo> audioSourceInfo) async {
    if (videoSourceInfo.length != audioSourceInfo.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchowt_base_Stream_StreamSourceInfo__owt_base_Stream_StreamSourceInfo_VideoSourceInfo__owt_base_Stream_StreamSourceInfo_AudioSourceInfo', [for (int __i__ = 0; __i__ < videoSourceInfo.length; __i__++) {"videoSourceInfo": videoSourceInfo[__i__].index, "audioSourceInfo": audioSourceInfo[__i__].index}]);
  
    final List<owt_base_Stream_StreamSourceInfo> typedResult = resultBatch.map((result) => owt_base_Stream_StreamSourceInfo()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<owt_base_Stream_StreamSourceInfo_VideoSourceInfo> get_videoSourceInfo() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.Stream.StreamSourceInfo::get_videoSourceInfo", {'refId': refId});
  
    return (__result__ as int).toowt_base_Stream_StreamSourceInfo_VideoSourceInfo();
  }
  
  Future<owt_base_Stream_StreamSourceInfo_AudioSourceInfo> get_audioSourceInfo() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.Stream.StreamSourceInfo::get_audioSourceInfo", {'refId': refId});
  
    return (__result__ as int).toowt_base_Stream_StreamSourceInfo_AudioSourceInfo();
  }
  
  //endregion

  //region setters
  Future<void> set_videoSourceInfo(owt_base_Stream_StreamSourceInfo_VideoSourceInfo videoSourceInfo) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.Stream.StreamSourceInfo::set_videoSourceInfo', {'refId': refId, "videoSourceInfo": videoSourceInfo.toValue()});
  
  
  }
  
  Future<void> set_audioSourceInfo(owt_base_Stream_StreamSourceInfo_AudioSourceInfo audioSourceInfo) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.Stream.StreamSourceInfo::set_audioSourceInfo', {'refId': refId, "audioSourceInfo": audioSourceInfo.toValue()});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension owt_base_Stream_StreamSourceInfo_Batch on List<owt_base_Stream_StreamSourceInfo> {
  //region getters
  Future<List<owt_base_Stream_StreamSourceInfo_VideoSourceInfo>> get_videoSourceInfo_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.Stream.StreamSourceInfo::get_videoSourceInfo_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toowt_base_Stream_StreamSourceInfo_VideoSourceInfo()).toList();
  
    return typedResult;
  }
  
  Future<List<owt_base_Stream_StreamSourceInfo_AudioSourceInfo>> get_audioSourceInfo_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.Stream.StreamSourceInfo::get_audioSourceInfo_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toowt_base_Stream_StreamSourceInfo_AudioSourceInfo()).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_videoSourceInfo_batch(List<owt_base_Stream_StreamSourceInfo_VideoSourceInfo> videoSourceInfo) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.Stream.StreamSourceInfo::set_videoSourceInfo_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "videoSourceInfo": videoSourceInfo[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_audioSourceInfo_batch(List<owt_base_Stream_StreamSourceInfo_AudioSourceInfo> audioSourceInfo) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.Stream.StreamSourceInfo::set_audioSourceInfo_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "audioSourceInfo": audioSourceInfo[__i__].toValue()}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}