// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class owt_base_CheckCondition extends java_lang_Object  {
  //region constants
  static const String name__ = 'owt.base.CheckCondition';

  
  //endregion

  //region creators
  static Future<owt_base_CheckCondition> create__() async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createowt_base_CheckCondition__');
    final object = owt_base_CheckCondition()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<owt_base_CheckCondition>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchowt_base_CheckCondition__', {'length': length});
  
    final List<owt_base_CheckCondition> typedResult = resultBatch.map((result) => owt_base_CheckCondition()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<void> DCHECK__Object(Object obj) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.base.CheckCondition::DCHECK([\'obj\':$obj])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.CheckCondition::DCHECK__Object', {"obj": obj});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  static Future<void> RCHECK__Object(Object object) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.base.CheckCondition::RCHECK([\'object\':$object])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.CheckCondition::RCHECK__Object', {"object": object});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  static Future<void> DCHECK__bool(bool condition) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.base.CheckCondition::DCHECK([\'condition\':$condition])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.CheckCondition::DCHECK__bool', {"condition": condition});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  static Future<void> RCHECK__bool(bool condition) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.base.CheckCondition::RCHECK([\'condition\':$condition])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.CheckCondition::RCHECK__bool', {"condition": condition});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension owt_base_CheckCondition_Batch on List<owt_base_CheckCondition> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<void>> DCHECK__Object_batch(List<Object> obj) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.CheckCondition::DCHECK__Object_batch', [for (int __i__ = 0; __i__ < obj.length; __i__++) {"obj": obj[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<void>> RCHECK__Object_batch(List<Object> object) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.CheckCondition::RCHECK__Object_batch', [for (int __i__ = 0; __i__ < object.length; __i__++) {"object": object[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<void>> DCHECK__bool_batch(List<bool> condition) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.CheckCondition::DCHECK__bool_batch', [for (int __i__ = 0; __i__ < condition.length; __i__++) {"condition": condition[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<void>> RCHECK__bool_batch(List<bool> condition) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.base.CheckCondition::RCHECK__bool_batch', [for (int __i__ = 0; __i__ < condition.length; __i__++) {"condition": condition[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}