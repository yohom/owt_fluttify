// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class owt_base_OwtError extends java_lang_Object  {
  //region constants
  static const String name__ = 'owt.base.OwtError';

  
  //endregion

  //region creators
  static Future<owt_base_OwtError> create__String(String errorMessage) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createowt_base_OwtError__String', {"errorMessage": errorMessage});
    final object = owt_base_OwtError()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<owt_base_OwtError> create__int__String(int errorCode, String errorMessage) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createowt_base_OwtError__int__String', {"errorCode": errorCode, "errorMessage": errorMessage});
    final object = owt_base_OwtError()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<owt_base_OwtError>> create_batch__String(List<String> errorMessage) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchowt_base_OwtError__String', [for (int __i__ = 0; __i__ < errorMessage.length; __i__++) {"errorMessage": errorMessage[__i__]}]);
  
    final List<owt_base_OwtError> typedResult = resultBatch.map((result) => owt_base_OwtError()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  static Future<List<owt_base_OwtError>> create_batch__int__String(List<int> errorCode, List<String> errorMessage) async {
    if (errorCode.length != errorMessage.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchowt_base_OwtError__int__String', [for (int __i__ = 0; __i__ < errorCode.length; __i__++) {"errorCode": errorCode[__i__], "errorMessage": errorMessage[__i__]}]);
  
    final List<owt_base_OwtError> typedResult = resultBatch.map((result) => owt_base_OwtError()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_errorCode() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.OwtError::get_errorCode", {'refId': refId});
  
    return __result__;
  }
  
  Future<String> get_errorMessage() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.OwtError::get_errorMessage", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}

extension owt_base_OwtError_Batch on List<owt_base_OwtError> {
  //region getters
  Future<List<int>> get_errorCode_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.OwtError::get_errorCode_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_errorMessage_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.base.OwtError::get_errorMessage_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}