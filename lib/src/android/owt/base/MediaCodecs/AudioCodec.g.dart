// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

enum owt_base_MediaCodecs_AudioCodec {
  PCMU /* null */,
  PCMA /* null */,
  OPUS /* null */,
  G722 /* null */,
  ISAC /* null */,
  ILBC /* null */,
  AAC /* null */,
  AC3 /* null */,
  ASAO /* null */,
  INVALID /* null */
}

extension owt_base_MediaCodecs_AudioCodecToX on owt_base_MediaCodecs_AudioCodec {
  int toValue() {
    switch (this) {
      case owt_base_MediaCodecs_AudioCodec.PCMU: return owt_base_MediaCodecs_AudioCodec.PCMU.index + 0;
      case owt_base_MediaCodecs_AudioCodec.PCMA: return owt_base_MediaCodecs_AudioCodec.PCMA.index + 0;
      case owt_base_MediaCodecs_AudioCodec.OPUS: return owt_base_MediaCodecs_AudioCodec.OPUS.index + 0;
      case owt_base_MediaCodecs_AudioCodec.G722: return owt_base_MediaCodecs_AudioCodec.G722.index + 0;
      case owt_base_MediaCodecs_AudioCodec.ISAC: return owt_base_MediaCodecs_AudioCodec.ISAC.index + 0;
      case owt_base_MediaCodecs_AudioCodec.ILBC: return owt_base_MediaCodecs_AudioCodec.ILBC.index + 0;
      case owt_base_MediaCodecs_AudioCodec.AAC: return owt_base_MediaCodecs_AudioCodec.AAC.index + 0;
      case owt_base_MediaCodecs_AudioCodec.AC3: return owt_base_MediaCodecs_AudioCodec.AC3.index + 0;
      case owt_base_MediaCodecs_AudioCodec.ASAO: return owt_base_MediaCodecs_AudioCodec.ASAO.index + 0;
      case owt_base_MediaCodecs_AudioCodec.INVALID: return owt_base_MediaCodecs_AudioCodec.INVALID.index + 0;
    }
  }
}

extension owt_base_MediaCodecs_AudioCodecFromX on int {
  owt_base_MediaCodecs_AudioCodec toowt_base_MediaCodecs_AudioCodec() {
    switch (this) {
      
      default: return owt_base_MediaCodecs_AudioCodec.values[this + 0];
    }
  }
}