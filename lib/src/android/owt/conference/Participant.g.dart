// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class owt_conference_Participant extends java_lang_Object  {
  //region constants
  static const String name__ = 'owt.conference.Participant';

  
  //endregion

  //region creators
  
  //endregion

  //region getters
  Future<String> get_id() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.conference.Participant::get_id", {'refId': refId});
  
    return __result__;
  }
  
  Future<String> get_role() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.conference.Participant::get_role", {'refId': refId});
  
    return __result__;
  }
  
  Future<String> get_userId() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.conference.Participant::get_userId", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<void> addObserver(owt_conference_Participant_ParticipantObserver observer) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.conference.Participant@$refId::addObserver([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.conference.Participant::addObserver', {"refId": refId});
  
  
    // handle native call
    MethodChannel('owt.conference.Participant::addObserver::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::owt.conference.Participant.ParticipantObserver::onLeft':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onLeft([])');
              }
        
              // handle the native call
              observer?.onLeft();
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> removeObserver(owt_conference_Participant_ParticipantObserver observer) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: owt.conference.Participant@$refId::removeObserver([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.conference.Participant::removeObserver', {"refId": refId});
  
  
    // handle native call
    MethodChannel('owt.conference.Participant::removeObserver::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::owt.conference.Participant.ParticipantObserver::onLeft':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onLeft([])');
              }
        
              // handle the native call
              observer?.onLeft();
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension owt_conference_Participant_Batch on List<owt_conference_Participant> {
  //region getters
  Future<List<String>> get_id_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.conference.Participant::get_id_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_role_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.conference.Participant::get_role_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_userId_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.conference.Participant::get_userId_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}