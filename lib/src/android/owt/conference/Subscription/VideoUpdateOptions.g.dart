// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class owt_conference_Subscription_VideoUpdateOptions extends java_lang_Object  {
  //region constants
  static const String name__ = 'owt.conference.Subscription.VideoUpdateOptions';

  
  //endregion

  //region creators
  static Future<owt_conference_Subscription_VideoUpdateOptions> create__() async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createowt_conference_Subscription_VideoUpdateOptions__');
    final object = owt_conference_Subscription_VideoUpdateOptions()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<owt_conference_Subscription_VideoUpdateOptions>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchowt_conference_Subscription_VideoUpdateOptions__', {'length': length});
  
    final List<owt_conference_Subscription_VideoUpdateOptions> typedResult = resultBatch.map((result) => owt_conference_Subscription_VideoUpdateOptions()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_resolutionHeight() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.conference.Subscription.VideoUpdateOptions::get_resolutionHeight", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_resolutionWidth() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.conference.Subscription.VideoUpdateOptions::get_resolutionWidth", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_fps() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.conference.Subscription.VideoUpdateOptions::get_fps", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_keyframeInterval() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.conference.Subscription.VideoUpdateOptions::get_keyframeInterval", {'refId': refId});
  
    return __result__;
  }
  
  Future<double> get_bitrateMultiplier() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.conference.Subscription.VideoUpdateOptions::get_bitrateMultiplier", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_resolutionHeight(int resolutionHeight) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.conference.Subscription.VideoUpdateOptions::set_resolutionHeight', {'refId': refId, "resolutionHeight": resolutionHeight});
  
  
  }
  
  Future<void> set_resolutionWidth(int resolutionWidth) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.conference.Subscription.VideoUpdateOptions::set_resolutionWidth', {'refId': refId, "resolutionWidth": resolutionWidth});
  
  
  }
  
  Future<void> set_fps(int fps) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.conference.Subscription.VideoUpdateOptions::set_fps', {'refId': refId, "fps": fps});
  
  
  }
  
  Future<void> set_keyframeInterval(int keyframeInterval) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.conference.Subscription.VideoUpdateOptions::set_keyframeInterval', {'refId': refId, "keyframeInterval": keyframeInterval});
  
  
  }
  
  Future<void> set_bitrateMultiplier(double bitrateMultiplier) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.conference.Subscription.VideoUpdateOptions::set_bitrateMultiplier', {'refId': refId, "bitrateMultiplier": bitrateMultiplier});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension owt_conference_Subscription_VideoUpdateOptions_Batch on List<owt_conference_Subscription_VideoUpdateOptions> {
  //region getters
  Future<List<int>> get_resolutionHeight_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.conference.Subscription.VideoUpdateOptions::get_resolutionHeight_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_resolutionWidth_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.conference.Subscription.VideoUpdateOptions::get_resolutionWidth_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_fps_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.conference.Subscription.VideoUpdateOptions::get_fps_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_keyframeInterval_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.conference.Subscription.VideoUpdateOptions::get_keyframeInterval_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<double>> get_bitrateMultiplier_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("owt.conference.Subscription.VideoUpdateOptions::get_bitrateMultiplier_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_resolutionHeight_batch(List<int> resolutionHeight) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.conference.Subscription.VideoUpdateOptions::set_resolutionHeight_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "resolutionHeight": resolutionHeight[__i__]}]);
  
  
  }
  
  Future<void> set_resolutionWidth_batch(List<int> resolutionWidth) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.conference.Subscription.VideoUpdateOptions::set_resolutionWidth_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "resolutionWidth": resolutionWidth[__i__]}]);
  
  
  }
  
  Future<void> set_fps_batch(List<int> fps) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.conference.Subscription.VideoUpdateOptions::set_fps_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "fps": fps[__i__]}]);
  
  
  }
  
  Future<void> set_keyframeInterval_batch(List<int> keyframeInterval) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.conference.Subscription.VideoUpdateOptions::set_keyframeInterval_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "keyframeInterval": keyframeInterval[__i__]}]);
  
  
  }
  
  Future<void> set_bitrateMultiplier_batch(List<double> bitrateMultiplier) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('owt.conference.Subscription.VideoUpdateOptions::set_bitrateMultiplier_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "bitrateMultiplier": bitrateMultiplier[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}