// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_NetworkMonitor extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.NetworkMonitor';

  
  //endregion

  //region creators
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  @deprecated
  static Future<void> init(android_content_Context context) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.NetworkMonitor::init([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.NetworkMonitor::init', {"context": context is Ref ? (context as Ref)?.refId : context});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  static Future<org_webrtc_NetworkMonitor> getInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.NetworkMonitor::getInstance([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.NetworkMonitor::getInstance', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_NetworkMonitor()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<void> startMonitoring__android_content_Context(android_content_Context applicationContext) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.NetworkMonitor@$refId::startMonitoring([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.NetworkMonitor::startMonitoring__android_content_Context', {"applicationContext": applicationContext is Ref ? (applicationContext as Ref)?.refId : applicationContext, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  @deprecated
  Future<void> startMonitoring() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.NetworkMonitor@$refId::startMonitoring([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.NetworkMonitor::startMonitoring', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> stopMonitoring() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.NetworkMonitor@$refId::stopMonitoring([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.NetworkMonitor::stopMonitoring', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  @deprecated
  static Future<void> addNetworkObserver(org_webrtc_NetworkMonitor_NetworkObserver observer) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.NetworkMonitor::addNetworkObserver([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.NetworkMonitor::addNetworkObserver', );
  
  
    // handle native call
    MethodChannel('org.webrtc.NetworkMonitor::addNetworkObserver::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::org.webrtc.NetworkMonitor.NetworkObserver::onConnectionTypeChanged':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onConnectionTypeChanged([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              observer?.onConnectionTypeChanged((args['var1'] as int).toorg_webrtc_NetworkMonitorAutoDetect_ConnectionType());
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> addObserver(org_webrtc_NetworkMonitor_NetworkObserver observer) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.NetworkMonitor@$refId::addObserver([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.NetworkMonitor::addObserver', {"refId": refId});
  
  
    // handle native call
    MethodChannel('org.webrtc.NetworkMonitor::addObserver::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::org.webrtc.NetworkMonitor.NetworkObserver::onConnectionTypeChanged':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onConnectionTypeChanged([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              observer?.onConnectionTypeChanged((args['var1'] as int).toorg_webrtc_NetworkMonitorAutoDetect_ConnectionType());
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  @deprecated
  static Future<void> removeNetworkObserver(org_webrtc_NetworkMonitor_NetworkObserver observer) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.NetworkMonitor::removeNetworkObserver([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.NetworkMonitor::removeNetworkObserver', );
  
  
    // handle native call
    MethodChannel('org.webrtc.NetworkMonitor::removeNetworkObserver::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::org.webrtc.NetworkMonitor.NetworkObserver::onConnectionTypeChanged':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onConnectionTypeChanged([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              observer?.onConnectionTypeChanged((args['var1'] as int).toorg_webrtc_NetworkMonitorAutoDetect_ConnectionType());
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> removeObserver(org_webrtc_NetworkMonitor_NetworkObserver observer) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.NetworkMonitor@$refId::removeObserver([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.NetworkMonitor::removeObserver', {"refId": refId});
  
  
    // handle native call
    MethodChannel('org.webrtc.NetworkMonitor::removeObserver::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::org.webrtc.NetworkMonitor.NetworkObserver::onConnectionTypeChanged':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onConnectionTypeChanged([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              observer?.onConnectionTypeChanged((args['var1'] as int).toorg_webrtc_NetworkMonitorAutoDetect_ConnectionType());
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  static Future<bool> isOnline() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.NetworkMonitor::isOnline([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.NetworkMonitor::isOnline', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension org_webrtc_NetworkMonitor_Batch on List<org_webrtc_NetworkMonitor> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  @deprecated
  static Future<List<void>> init_batch(List<android_content_Context> context) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.NetworkMonitor::init_batch', [for (int __i__ = 0; __i__ < context.length; __i__++) {"context": context[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<org_webrtc_NetworkMonitor>> getInstance_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.NetworkMonitor::getInstance_batch', );
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_NetworkMonitor()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<void>> startMonitoring__android_content_Context_batch(List<android_content_Context> applicationContext) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.NetworkMonitor::startMonitoring__android_content_Context_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"applicationContext": applicationContext[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  @deprecated
  Future<List<void>> startMonitoring_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.NetworkMonitor::startMonitoring_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> stopMonitoring_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.NetworkMonitor::stopMonitoring_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<bool>> isOnline_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.NetworkMonitor::isOnline_batch', );
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}