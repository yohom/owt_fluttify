// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_VideoDecoder_DecodeInfo extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.VideoDecoder.DecodeInfo';

  
  //endregion

  //region creators
  static Future<org_webrtc_VideoDecoder_DecodeInfo> create__boolean__long(bool isMissingFrames, int renderTimeMs) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_VideoDecoder_DecodeInfo__boolean__long', {"isMissingFrames": isMissingFrames, "renderTimeMs": renderTimeMs});
    final object = org_webrtc_VideoDecoder_DecodeInfo()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_VideoDecoder_DecodeInfo>> create_batch__boolean__long(List<bool> isMissingFrames, List<int> renderTimeMs) async {
    if (isMissingFrames.length != renderTimeMs.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_VideoDecoder_DecodeInfo__boolean__long', [for (int __i__ = 0; __i__ < isMissingFrames.length; __i__++) {"isMissingFrames": isMissingFrames[__i__], "renderTimeMs": renderTimeMs[__i__]}]);
  
    final List<org_webrtc_VideoDecoder_DecodeInfo> typedResult = resultBatch.map((result) => org_webrtc_VideoDecoder_DecodeInfo()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<bool> get_isMissingFrames() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoDecoder.DecodeInfo::get_isMissingFrames", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_renderTimeMs() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoDecoder.DecodeInfo::get_renderTimeMs", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}

extension org_webrtc_VideoDecoder_DecodeInfo_Batch on List<org_webrtc_VideoDecoder_DecodeInfo> {
  //region getters
  Future<List<bool>> get_isMissingFrames_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoDecoder.DecodeInfo::get_isMissingFrames_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_renderTimeMs_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoDecoder.DecodeInfo::get_renderTimeMs_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}