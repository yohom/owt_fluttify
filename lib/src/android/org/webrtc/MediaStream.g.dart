// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_MediaStream extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.MediaStream';

  
  //endregion

  //region creators
  static Future<org_webrtc_MediaStream> create__long(int nativeStream) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_MediaStream__long', {"nativeStream": nativeStream});
    final object = org_webrtc_MediaStream()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_MediaStream>> create_batch__long(List<int> nativeStream) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_MediaStream__long', [for (int __i__ = 0; __i__ < nativeStream.length; __i__++) {"nativeStream": nativeStream[__i__]}]);
  
    final List<org_webrtc_MediaStream> typedResult = resultBatch.map((result) => org_webrtc_MediaStream()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<List<org_webrtc_AudioTrack>> get_audioTracks() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.MediaStream::get_audioTracks", {'refId': refId});
    kNativeObjectPool.addAll((__result__ as List).cast<int>().map((__it__) => org_webrtc_AudioTrack()..refId = __it__..tag__ = 'owt_fluttify').toList());
    return (__result__ as List).cast<int>().map((__it__) => org_webrtc_AudioTrack()..refId = __it__..tag__ = 'owt_fluttify').toList();
  }
  
  Future<List<org_webrtc_VideoTrack>> get_videoTracks() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.MediaStream::get_videoTracks", {'refId': refId});
    kNativeObjectPool.addAll((__result__ as List).cast<int>().map((__it__) => org_webrtc_VideoTrack()..refId = __it__..tag__ = 'owt_fluttify').toList());
    return (__result__ as List).cast<int>().map((__it__) => org_webrtc_VideoTrack()..refId = __it__..tag__ = 'owt_fluttify').toList();
  }
  
  Future<List<org_webrtc_VideoTrack>> get_preservedVideoTracks() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.MediaStream::get_preservedVideoTracks", {'refId': refId});
    kNativeObjectPool.addAll((__result__ as List).cast<int>().map((__it__) => org_webrtc_VideoTrack()..refId = __it__..tag__ = 'owt_fluttify').toList());
    return (__result__ as List).cast<int>().map((__it__) => org_webrtc_VideoTrack()..refId = __it__..tag__ = 'owt_fluttify').toList();
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<bool> addTrack__org_webrtc_AudioTrack(org_webrtc_AudioTrack track) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.MediaStream@$refId::addTrack([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.MediaStream::addTrack__org_webrtc_AudioTrack', {"track": track is Ref ? (track as Ref)?.refId : track, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<bool> addTrack__org_webrtc_VideoTrack(org_webrtc_VideoTrack track) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.MediaStream@$refId::addTrack([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.MediaStream::addTrack__org_webrtc_VideoTrack', {"track": track is Ref ? (track as Ref)?.refId : track, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<bool> addPreservedTrack(org_webrtc_VideoTrack track) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.MediaStream@$refId::addPreservedTrack([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.MediaStream::addPreservedTrack', {"track": track is Ref ? (track as Ref)?.refId : track, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<bool> removeTrack__org_webrtc_AudioTrack(org_webrtc_AudioTrack track) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.MediaStream@$refId::removeTrack([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.MediaStream::removeTrack__org_webrtc_AudioTrack', {"track": track is Ref ? (track as Ref)?.refId : track, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<bool> removeTrack__org_webrtc_VideoTrack(org_webrtc_VideoTrack track) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.MediaStream@$refId::removeTrack([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.MediaStream::removeTrack__org_webrtc_VideoTrack', {"track": track is Ref ? (track as Ref)?.refId : track, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> dispose() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.MediaStream@$refId::dispose([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.MediaStream::dispose', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<String> getId() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.MediaStream@$refId::getId([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.MediaStream::getId', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension org_webrtc_MediaStream_Batch on List<org_webrtc_MediaStream> {
  //region getters
  Future<List<List<org_webrtc_AudioTrack>>> get_audioTracks_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.MediaStream::get_audioTracks_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as List).cast<int>().map((__it__) => org_webrtc_AudioTrack()..refId = __it__..tag__ = 'owt_fluttify').toList()).toList();
    kNativeObjectPool.addAll(typedResult.expand((e) => e));
    return typedResult;
  }
  
  Future<List<List<org_webrtc_VideoTrack>>> get_videoTracks_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.MediaStream::get_videoTracks_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as List).cast<int>().map((__it__) => org_webrtc_VideoTrack()..refId = __it__..tag__ = 'owt_fluttify').toList()).toList();
    kNativeObjectPool.addAll(typedResult.expand((e) => e));
    return typedResult;
  }
  
  Future<List<List<org_webrtc_VideoTrack>>> get_preservedVideoTracks_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.MediaStream::get_preservedVideoTracks_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as List).cast<int>().map((__it__) => org_webrtc_VideoTrack()..refId = __it__..tag__ = 'owt_fluttify').toList()).toList();
    kNativeObjectPool.addAll(typedResult.expand((e) => e));
    return typedResult;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<bool>> addTrack__org_webrtc_AudioTrack_batch(List<org_webrtc_AudioTrack> track) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.MediaStream::addTrack__org_webrtc_AudioTrack_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"track": track[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<bool>> addTrack__org_webrtc_VideoTrack_batch(List<org_webrtc_VideoTrack> track) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.MediaStream::addTrack__org_webrtc_VideoTrack_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"track": track[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<bool>> addPreservedTrack_batch(List<org_webrtc_VideoTrack> track) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.MediaStream::addPreservedTrack_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"track": track[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<bool>> removeTrack__org_webrtc_AudioTrack_batch(List<org_webrtc_AudioTrack> track) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.MediaStream::removeTrack__org_webrtc_AudioTrack_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"track": track[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<bool>> removeTrack__org_webrtc_VideoTrack_batch(List<org_webrtc_VideoTrack> track) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.MediaStream::removeTrack__org_webrtc_VideoTrack_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"track": track[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> dispose_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.MediaStream::dispose_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<String>> getId_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.MediaStream::getId_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}