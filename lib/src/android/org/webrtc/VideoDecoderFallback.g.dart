// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_VideoDecoderFallback extends java_lang_Object with org_webrtc_VideoDecoder {
  //region constants
  static const String name__ = 'org.webrtc.VideoDecoderFallback';

  
  //endregion

  //region creators
  static Future<org_webrtc_VideoDecoderFallback> create__org_webrtc_VideoDecoder__org_webrtc_VideoDecoder(org_webrtc_VideoDecoder fallback, org_webrtc_VideoDecoder primary) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_VideoDecoderFallback__org_webrtc_VideoDecoder__org_webrtc_VideoDecoder', {"fallback": fallback.refId, "primary": primary.refId});
    final object = org_webrtc_VideoDecoderFallback()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_VideoDecoderFallback>> create_batch__org_webrtc_VideoDecoder__org_webrtc_VideoDecoder(List<org_webrtc_VideoDecoder> fallback, List<org_webrtc_VideoDecoder> primary) async {
    if (fallback.length != primary.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_VideoDecoderFallback__org_webrtc_VideoDecoder__org_webrtc_VideoDecoder', [for (int __i__ = 0; __i__ < fallback.length; __i__++) {"fallback": fallback[__i__].refId, "primary": primary[__i__].refId}]);
  
    final List<org_webrtc_VideoDecoderFallback> typedResult = resultBatch.map((result) => org_webrtc_VideoDecoderFallback()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}

extension org_webrtc_VideoDecoderFallback_Batch on List<org_webrtc_VideoDecoderFallback> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}