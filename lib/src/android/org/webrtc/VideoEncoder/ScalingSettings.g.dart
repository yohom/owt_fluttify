// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_VideoEncoder_ScalingSettings extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.VideoEncoder.ScalingSettings';

  
  //endregion

  //region creators
  static Future<org_webrtc_VideoEncoder_ScalingSettings> create__int__int(int low, int high) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_VideoEncoder_ScalingSettings__int__int', {"low": low, "high": high});
    final object = org_webrtc_VideoEncoder_ScalingSettings()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<org_webrtc_VideoEncoder_ScalingSettings> create__boolean(bool on) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_VideoEncoder_ScalingSettings__boolean', {"on": on});
    final object = org_webrtc_VideoEncoder_ScalingSettings()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<org_webrtc_VideoEncoder_ScalingSettings> create__boolean__int__int(bool on, int low, int high) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_VideoEncoder_ScalingSettings__boolean__int__int', {"on": on, "low": low, "high": high});
    final object = org_webrtc_VideoEncoder_ScalingSettings()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_VideoEncoder_ScalingSettings>> create_batch__int__int(List<int> low, List<int> high) async {
    if (low.length != high.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_VideoEncoder_ScalingSettings__int__int', [for (int __i__ = 0; __i__ < low.length; __i__++) {"low": low[__i__], "high": high[__i__]}]);
  
    final List<org_webrtc_VideoEncoder_ScalingSettings> typedResult = resultBatch.map((result) => org_webrtc_VideoEncoder_ScalingSettings()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  static Future<List<org_webrtc_VideoEncoder_ScalingSettings>> create_batch__boolean(List<bool> on) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_VideoEncoder_ScalingSettings__boolean', [for (int __i__ = 0; __i__ < on.length; __i__++) {"on": on[__i__]}]);
  
    final List<org_webrtc_VideoEncoder_ScalingSettings> typedResult = resultBatch.map((result) => org_webrtc_VideoEncoder_ScalingSettings()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  static Future<List<org_webrtc_VideoEncoder_ScalingSettings>> create_batch__boolean__int__int(List<bool> on, List<int> low, List<int> high) async {
    if (on.length != low.length || low.length != high.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_VideoEncoder_ScalingSettings__boolean__int__int', [for (int __i__ = 0; __i__ < on.length; __i__++) {"on": on[__i__], "low": low[__i__], "high": high[__i__]}]);
  
    final List<org_webrtc_VideoEncoder_ScalingSettings> typedResult = resultBatch.map((result) => org_webrtc_VideoEncoder_ScalingSettings()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<bool> get_on() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoEncoder.ScalingSettings::get_on", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_low() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoEncoder.ScalingSettings::get_low", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_high() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoEncoder.ScalingSettings::get_high", {'refId': refId});
  
    return __result__;
  }
  
  static Future<org_webrtc_VideoEncoder_ScalingSettings> get_static_OFF() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoEncoder.ScalingSettings::get_OFF", );
    kNativeObjectPool.add(org_webrtc_VideoEncoder_ScalingSettings()..refId = __result__..tag__ = 'owt_fluttify');
    return org_webrtc_VideoEncoder_ScalingSettings()..refId = __result__..tag__ = 'owt_fluttify';
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}

extension org_webrtc_VideoEncoder_ScalingSettings_Batch on List<org_webrtc_VideoEncoder_ScalingSettings> {
  //region getters
  Future<List<bool>> get_on_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoEncoder.ScalingSettings::get_on_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_low_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoEncoder.ScalingSettings::get_low_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_high_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoEncoder.ScalingSettings::get_high_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<org_webrtc_VideoEncoder_ScalingSettings>> get_static_OFF_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoEncoder.ScalingSettings::get_OFF_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_VideoEncoder_ScalingSettings()..refId = __result__..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}