// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_PeerConnectionFactory_Options extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.PeerConnectionFactory.Options';

  
  //endregion

  //region creators
  static Future<org_webrtc_PeerConnectionFactory_Options> create__() async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_PeerConnectionFactory_Options__');
    final object = org_webrtc_PeerConnectionFactory_Options()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_PeerConnectionFactory_Options>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_PeerConnectionFactory_Options__', {'length': length});
  
    final List<org_webrtc_PeerConnectionFactory_Options> typedResult = resultBatch.map((result) => org_webrtc_PeerConnectionFactory_Options()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_networkIgnoreMask() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnectionFactory.Options::get_networkIgnoreMask", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_disableEncryption() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnectionFactory.Options::get_disableEncryption", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_disableNetworkMonitor() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnectionFactory.Options::get_disableNetworkMonitor", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_enableAes128Sha1_32CryptoCipher() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnectionFactory.Options::get_enableAes128Sha1_32CryptoCipher", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_enableGcmCryptoSuites() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnectionFactory.Options::get_enableGcmCryptoSuites", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_networkIgnoreMask(int networkIgnoreMask) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory.Options::set_networkIgnoreMask', {'refId': refId, "networkIgnoreMask": networkIgnoreMask});
  
  
  }
  
  Future<void> set_disableEncryption(bool disableEncryption) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory.Options::set_disableEncryption', {'refId': refId, "disableEncryption": disableEncryption});
  
  
  }
  
  Future<void> set_disableNetworkMonitor(bool disableNetworkMonitor) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory.Options::set_disableNetworkMonitor', {'refId': refId, "disableNetworkMonitor": disableNetworkMonitor});
  
  
  }
  
  Future<void> set_enableAes128Sha1_32CryptoCipher(bool enableAes128Sha1_32CryptoCipher) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory.Options::set_enableAes128Sha1_32CryptoCipher', {'refId': refId, "enableAes128Sha1_32CryptoCipher": enableAes128Sha1_32CryptoCipher});
  
  
  }
  
  Future<void> set_enableGcmCryptoSuites(bool enableGcmCryptoSuites) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory.Options::set_enableGcmCryptoSuites', {'refId': refId, "enableGcmCryptoSuites": enableGcmCryptoSuites});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension org_webrtc_PeerConnectionFactory_Options_Batch on List<org_webrtc_PeerConnectionFactory_Options> {
  //region getters
  Future<List<int>> get_networkIgnoreMask_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnectionFactory.Options::get_networkIgnoreMask_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_disableEncryption_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnectionFactory.Options::get_disableEncryption_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_disableNetworkMonitor_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnectionFactory.Options::get_disableNetworkMonitor_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_enableAes128Sha1_32CryptoCipher_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnectionFactory.Options::get_enableAes128Sha1_32CryptoCipher_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_enableGcmCryptoSuites_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnectionFactory.Options::get_enableGcmCryptoSuites_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_networkIgnoreMask_batch(List<int> networkIgnoreMask) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory.Options::set_networkIgnoreMask_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "networkIgnoreMask": networkIgnoreMask[__i__]}]);
  
  
  }
  
  Future<void> set_disableEncryption_batch(List<bool> disableEncryption) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory.Options::set_disableEncryption_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "disableEncryption": disableEncryption[__i__]}]);
  
  
  }
  
  Future<void> set_disableNetworkMonitor_batch(List<bool> disableNetworkMonitor) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory.Options::set_disableNetworkMonitor_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "disableNetworkMonitor": disableNetworkMonitor[__i__]}]);
  
  
  }
  
  Future<void> set_enableAes128Sha1_32CryptoCipher_batch(List<bool> enableAes128Sha1_32CryptoCipher) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory.Options::set_enableAes128Sha1_32CryptoCipher_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "enableAes128Sha1_32CryptoCipher": enableAes128Sha1_32CryptoCipher[__i__]}]);
  
  
  }
  
  Future<void> set_enableGcmCryptoSuites_batch(List<bool> enableGcmCryptoSuites) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory.Options::set_enableGcmCryptoSuites_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "enableGcmCryptoSuites": enableGcmCryptoSuites[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}