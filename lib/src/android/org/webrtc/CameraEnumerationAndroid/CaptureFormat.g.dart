// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_CameraEnumerationAndroid_CaptureFormat extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.CameraEnumerationAndroid.CaptureFormat';

  
  //endregion

  //region creators
  static Future<org_webrtc_CameraEnumerationAndroid_CaptureFormat> create__int__int__int__int(int width, int height, int minFramerate, int maxFramerate) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_CameraEnumerationAndroid_CaptureFormat__int__int__int__int', {"width": width, "height": height, "minFramerate": minFramerate, "maxFramerate": maxFramerate});
    final object = org_webrtc_CameraEnumerationAndroid_CaptureFormat()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<org_webrtc_CameraEnumerationAndroid_CaptureFormat> create__int__int__org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange(int width, int height, org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange framerate) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_CameraEnumerationAndroid_CaptureFormat__int__int__org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange', {"width": width, "height": height, "framerate": framerate.refId});
    final object = org_webrtc_CameraEnumerationAndroid_CaptureFormat()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_CameraEnumerationAndroid_CaptureFormat>> create_batch__int__int__int__int(List<int> width, List<int> height, List<int> minFramerate, List<int> maxFramerate) async {
    if (width.length != height.length || height.length != minFramerate.length || minFramerate.length != maxFramerate.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_CameraEnumerationAndroid_CaptureFormat__int__int__int__int', [for (int __i__ = 0; __i__ < width.length; __i__++) {"width": width[__i__], "height": height[__i__], "minFramerate": minFramerate[__i__], "maxFramerate": maxFramerate[__i__]}]);
  
    final List<org_webrtc_CameraEnumerationAndroid_CaptureFormat> typedResult = resultBatch.map((result) => org_webrtc_CameraEnumerationAndroid_CaptureFormat()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  static Future<List<org_webrtc_CameraEnumerationAndroid_CaptureFormat>> create_batch__int__int__org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange(List<int> width, List<int> height, List<org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange> framerate) async {
    if (width.length != height.length || height.length != framerate.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_CameraEnumerationAndroid_CaptureFormat__int__int__org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange', [for (int __i__ = 0; __i__ < width.length; __i__++) {"width": width[__i__], "height": height[__i__], "framerate": framerate[__i__].refId}]);
  
    final List<org_webrtc_CameraEnumerationAndroid_CaptureFormat> typedResult = resultBatch.map((result) => org_webrtc_CameraEnumerationAndroid_CaptureFormat()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_width() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.CameraEnumerationAndroid.CaptureFormat::get_width", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_height() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.CameraEnumerationAndroid.CaptureFormat::get_height", {'refId': refId});
  
    return __result__;
  }
  
  Future<org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange> get_framerate() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.CameraEnumerationAndroid.CaptureFormat::get_framerate", {'refId': refId});
    kNativeObjectPool.add(org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange()..refId = __result__..tag__ = 'owt_fluttify');
    return org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange()..refId = __result__..tag__ = 'owt_fluttify';
  }
  
  Future<int> get_imageFormat() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.CameraEnumerationAndroid.CaptureFormat::get_imageFormat", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<int> frameSize() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.CameraEnumerationAndroid.CaptureFormat@$refId::frameSize([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerationAndroid.CaptureFormat::frameSize', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  static Future<int> frameSize__int__int__int(int width, int height, int imageFormat) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.CameraEnumerationAndroid.CaptureFormat::frameSize([\'width\':$width, \'height\':$height, \'imageFormat\':$imageFormat])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerationAndroid.CaptureFormat::frameSize__int__int__int', {"width": width, "height": height, "imageFormat": imageFormat});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension org_webrtc_CameraEnumerationAndroid_CaptureFormat_Batch on List<org_webrtc_CameraEnumerationAndroid_CaptureFormat> {
  //region getters
  Future<List<int>> get_width_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.CameraEnumerationAndroid.CaptureFormat::get_width_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_height_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.CameraEnumerationAndroid.CaptureFormat::get_height_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange>> get_framerate_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.CameraEnumerationAndroid.CaptureFormat::get_framerate_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange()..refId = __result__..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<int>> get_imageFormat_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.CameraEnumerationAndroid.CaptureFormat::get_imageFormat_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<int>> frameSize_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerationAndroid.CaptureFormat::frameSize_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<int>> frameSize__int__int__int_batch(List<int> width, List<int> height, List<int> imageFormat) async {
    if (width.length != height.length || height.length != imageFormat.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerationAndroid.CaptureFormat::frameSize__int__int__int_batch', [for (int __i__ = 0; __i__ < width.length; __i__++) {"width": width[__i__], "height": height[__i__], "imageFormat": imageFormat[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}