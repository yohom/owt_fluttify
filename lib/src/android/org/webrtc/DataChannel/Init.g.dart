// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_DataChannel_Init extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.DataChannel.Init';

  
  //endregion

  //region creators
  static Future<org_webrtc_DataChannel_Init> create__() async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_DataChannel_Init__');
    final object = org_webrtc_DataChannel_Init()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_DataChannel_Init>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_DataChannel_Init__', {'length': length});
  
    final List<org_webrtc_DataChannel_Init> typedResult = resultBatch.map((result) => org_webrtc_DataChannel_Init()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<bool> get_ordered() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.DataChannel.Init::get_ordered", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_maxRetransmitTimeMs() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.DataChannel.Init::get_maxRetransmitTimeMs", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_maxRetransmits() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.DataChannel.Init::get_maxRetransmits", {'refId': refId});
  
    return __result__;
  }
  
  Future<String> get_protocol() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.DataChannel.Init::get_protocol", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_negotiated() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.DataChannel.Init::get_negotiated", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_id() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.DataChannel.Init::get_id", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_ordered(bool ordered) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.DataChannel.Init::set_ordered', {'refId': refId, "ordered": ordered});
  
  
  }
  
  Future<void> set_maxRetransmitTimeMs(int maxRetransmitTimeMs) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.DataChannel.Init::set_maxRetransmitTimeMs', {'refId': refId, "maxRetransmitTimeMs": maxRetransmitTimeMs});
  
  
  }
  
  Future<void> set_maxRetransmits(int maxRetransmits) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.DataChannel.Init::set_maxRetransmits', {'refId': refId, "maxRetransmits": maxRetransmits});
  
  
  }
  
  Future<void> set_protocol(String protocol) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.DataChannel.Init::set_protocol', {'refId': refId, "protocol": protocol});
  
  
  }
  
  Future<void> set_negotiated(bool negotiated) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.DataChannel.Init::set_negotiated', {'refId': refId, "negotiated": negotiated});
  
  
  }
  
  Future<void> set_id(int id) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.DataChannel.Init::set_id', {'refId': refId, "id": id});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension org_webrtc_DataChannel_Init_Batch on List<org_webrtc_DataChannel_Init> {
  //region getters
  Future<List<bool>> get_ordered_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.DataChannel.Init::get_ordered_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_maxRetransmitTimeMs_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.DataChannel.Init::get_maxRetransmitTimeMs_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_maxRetransmits_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.DataChannel.Init::get_maxRetransmits_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_protocol_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.DataChannel.Init::get_protocol_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_negotiated_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.DataChannel.Init::get_negotiated_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_id_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.DataChannel.Init::get_id_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_ordered_batch(List<bool> ordered) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.DataChannel.Init::set_ordered_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "ordered": ordered[__i__]}]);
  
  
  }
  
  Future<void> set_maxRetransmitTimeMs_batch(List<int> maxRetransmitTimeMs) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.DataChannel.Init::set_maxRetransmitTimeMs_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "maxRetransmitTimeMs": maxRetransmitTimeMs[__i__]}]);
  
  
  }
  
  Future<void> set_maxRetransmits_batch(List<int> maxRetransmits) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.DataChannel.Init::set_maxRetransmits_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "maxRetransmits": maxRetransmits[__i__]}]);
  
  
  }
  
  Future<void> set_protocol_batch(List<String> protocol) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.DataChannel.Init::set_protocol_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "protocol": protocol[__i__]}]);
  
  
  }
  
  Future<void> set_negotiated_batch(List<bool> negotiated) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.DataChannel.Init::set_negotiated_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "negotiated": negotiated[__i__]}]);
  
  
  }
  
  Future<void> set_id_batch(List<int> id) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.DataChannel.Init::set_id_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "id": id[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}