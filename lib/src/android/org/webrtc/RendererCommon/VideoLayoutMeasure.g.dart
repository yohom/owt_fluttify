// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_RendererCommon_VideoLayoutMeasure extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.RendererCommon.VideoLayoutMeasure';

  
  //endregion

  //region creators
  static Future<org_webrtc_RendererCommon_VideoLayoutMeasure> create__() async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_RendererCommon_VideoLayoutMeasure__');
    final object = org_webrtc_RendererCommon_VideoLayoutMeasure()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_RendererCommon_VideoLayoutMeasure>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_RendererCommon_VideoLayoutMeasure__', {'length': length});
  
    final List<org_webrtc_RendererCommon_VideoLayoutMeasure> typedResult = resultBatch.map((result) => org_webrtc_RendererCommon_VideoLayoutMeasure()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<void> setScalingType__org_webrtc_RendererCommon_ScalingType(org_webrtc_RendererCommon_ScalingType scalingType) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.RendererCommon.VideoLayoutMeasure@$refId::setScalingType([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.RendererCommon.VideoLayoutMeasure::setScalingType__org_webrtc_RendererCommon_ScalingType', {"scalingType": scalingType.toValue(), "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> setScalingType__org_webrtc_RendererCommon_ScalingType__org_webrtc_RendererCommon_ScalingType(org_webrtc_RendererCommon_ScalingType scalingTypeMatchOrientation, org_webrtc_RendererCommon_ScalingType scalingTypeMismatchOrientation) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.RendererCommon.VideoLayoutMeasure@$refId::setScalingType([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.RendererCommon.VideoLayoutMeasure::setScalingType__org_webrtc_RendererCommon_ScalingType__org_webrtc_RendererCommon_ScalingType', {"scalingTypeMatchOrientation": scalingTypeMatchOrientation.toValue(), "scalingTypeMismatchOrientation": scalingTypeMismatchOrientation.toValue(), "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<android_graphics_Point> measure(int widthSpec, int heightSpec, int frameWidth, int frameHeight) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.RendererCommon.VideoLayoutMeasure@$refId::measure([\'widthSpec\':$widthSpec, \'heightSpec\':$heightSpec, \'frameWidth\':$frameWidth, \'frameHeight\':$frameHeight])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.RendererCommon.VideoLayoutMeasure::measure', {"widthSpec": widthSpec, "heightSpec": heightSpec, "frameWidth": frameWidth, "frameHeight": frameHeight, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = android_graphics_Point()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  //endregion
}

extension org_webrtc_RendererCommon_VideoLayoutMeasure_Batch on List<org_webrtc_RendererCommon_VideoLayoutMeasure> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<void>> setScalingType__org_webrtc_RendererCommon_ScalingType_batch(List<org_webrtc_RendererCommon_ScalingType> scalingType) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.RendererCommon.VideoLayoutMeasure::setScalingType__org_webrtc_RendererCommon_ScalingType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"scalingType": scalingType[__i__].toValue(), "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> setScalingType__org_webrtc_RendererCommon_ScalingType__org_webrtc_RendererCommon_ScalingType_batch(List<org_webrtc_RendererCommon_ScalingType> scalingTypeMatchOrientation, List<org_webrtc_RendererCommon_ScalingType> scalingTypeMismatchOrientation) async {
    if (scalingTypeMatchOrientation.length != scalingTypeMismatchOrientation.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.RendererCommon.VideoLayoutMeasure::setScalingType__org_webrtc_RendererCommon_ScalingType__org_webrtc_RendererCommon_ScalingType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"scalingTypeMatchOrientation": scalingTypeMatchOrientation[__i__].toValue(), "scalingTypeMismatchOrientation": scalingTypeMismatchOrientation[__i__].toValue(), "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<android_graphics_Point>> measure_batch(List<int> widthSpec, List<int> heightSpec, List<int> frameWidth, List<int> frameHeight) async {
    if (widthSpec.length != heightSpec.length || heightSpec.length != frameWidth.length || frameWidth.length != frameHeight.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.RendererCommon.VideoLayoutMeasure::measure_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"widthSpec": widthSpec[__i__], "heightSpec": heightSpec[__i__], "frameWidth": frameWidth[__i__], "frameHeight": frameHeight[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => android_graphics_Point()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  //endregion
}