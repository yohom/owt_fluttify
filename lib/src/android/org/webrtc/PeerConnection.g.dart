// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_PeerConnection extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.PeerConnection';

  
  //endregion

  //region creators
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<org_webrtc_SessionDescription> getLocalDescription() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::getLocalDescription([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::getLocalDescription', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_SessionDescription()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<org_webrtc_SessionDescription> getRemoteDescription() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::getRemoteDescription([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::getRemoteDescription', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_SessionDescription()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<org_webrtc_DataChannel> createDataChannel(String label, org_webrtc_DataChannel_Init init) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::createDataChannel([\'label\':$label])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::createDataChannel', {"label": label, "init": init is Ref ? (init as Ref)?.refId : init, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_DataChannel()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<void> createOffer(org_webrtc_SdpObserver observer, org_webrtc_MediaConstraints constraints) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::createOffer([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::createOffer', {"observer": observer is Ref ? (observer as Ref)?.refId : observer, "constraints": constraints is Ref ? (constraints as Ref)?.refId : constraints, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> createAnswer(org_webrtc_SdpObserver observer, org_webrtc_MediaConstraints constraints) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::createAnswer([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::createAnswer', {"observer": observer is Ref ? (observer as Ref)?.refId : observer, "constraints": constraints is Ref ? (constraints as Ref)?.refId : constraints, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> setLocalDescription(org_webrtc_SdpObserver observer, org_webrtc_SessionDescription sdp) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::setLocalDescription([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::setLocalDescription', {"observer": observer is Ref ? (observer as Ref)?.refId : observer, "sdp": sdp is Ref ? (sdp as Ref)?.refId : sdp, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> setRemoteDescription(org_webrtc_SdpObserver observer, org_webrtc_SessionDescription sdp) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::setRemoteDescription([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::setRemoteDescription', {"observer": observer is Ref ? (observer as Ref)?.refId : observer, "sdp": sdp is Ref ? (sdp as Ref)?.refId : sdp, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> setAudioPlayout(bool playout) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::setAudioPlayout([\'playout\':$playout])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::setAudioPlayout', {"playout": playout, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> setAudioRecording(bool recording) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::setAudioRecording([\'recording\':$recording])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::setAudioRecording', {"recording": recording, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<bool> setConfiguration(org_webrtc_PeerConnection_RTCConfiguration config) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::setConfiguration([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::setConfiguration', {"config": config is Ref ? (config as Ref)?.refId : config, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<bool> addIceCandidate(org_webrtc_IceCandidate candidate) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::addIceCandidate([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::addIceCandidate', {"candidate": candidate is Ref ? (candidate as Ref)?.refId : candidate, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<bool> addStream(org_webrtc_MediaStream stream) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::addStream([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::addStream', {"stream": stream is Ref ? (stream as Ref)?.refId : stream, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> removeStream(org_webrtc_MediaStream stream) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::removeStream([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::removeStream', {"stream": stream is Ref ? (stream as Ref)?.refId : stream, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<org_webrtc_RtpSender> createSender(String kind, String stream_id) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::createSender([\'kind\':$kind, \'stream_id\':$stream_id])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::createSender', {"kind": kind, "stream_id": stream_id, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_RtpSender()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<List<org_webrtc_RtpSender>> getSenders() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::getSenders([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::getSenders', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = (__result__ as List).cast<int>().map((__it__) => org_webrtc_RtpSender()..refId = __it__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(__return__);
      return __return__;
    }
  }
  
  
  Future<List<org_webrtc_RtpReceiver>> getReceivers() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::getReceivers([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::getReceivers', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = (__result__ as List).cast<int>().map((__it__) => org_webrtc_RtpReceiver()..refId = __it__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(__return__);
      return __return__;
    }
  }
  
  
  Future<List<org_webrtc_RtpTransceiver>> getTransceivers() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::getTransceivers([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::getTransceivers', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = (__result__ as List).cast<int>().map((__it__) => org_webrtc_RtpTransceiver()..refId = __it__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(__return__);
      return __return__;
    }
  }
  
  
  Future<org_webrtc_RtpSender> addTrack__org_webrtc_MediaStreamTrack(org_webrtc_MediaStreamTrack track) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::addTrack([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::addTrack__org_webrtc_MediaStreamTrack', {"track": track is Ref ? (track as Ref)?.refId : track, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_RtpSender()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<org_webrtc_RtpSender> addTrack__org_webrtc_MediaStreamTrack__List_String_(org_webrtc_MediaStreamTrack track, List<String> streamIds) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::addTrack([\'streamIds\':$streamIds])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::addTrack__org_webrtc_MediaStreamTrack__List_String_', {"track": track is Ref ? (track as Ref)?.refId : track, "streamIds": streamIds, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_RtpSender()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<bool> removeTrack(org_webrtc_RtpSender sender) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::removeTrack([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::removeTrack', {"sender": sender is Ref ? (sender as Ref)?.refId : sender, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<org_webrtc_RtpTransceiver> addTransceiver__org_webrtc_MediaStreamTrack(org_webrtc_MediaStreamTrack track) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::addTransceiver([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::addTransceiver__org_webrtc_MediaStreamTrack', {"track": track is Ref ? (track as Ref)?.refId : track, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_RtpTransceiver()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<org_webrtc_RtpTransceiver> addTransceiver__org_webrtc_MediaStreamTrack__org_webrtc_RtpTransceiver_RtpTransceiverInit(org_webrtc_MediaStreamTrack track, org_webrtc_RtpTransceiver_RtpTransceiverInit init) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::addTransceiver([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::addTransceiver__org_webrtc_MediaStreamTrack__org_webrtc_RtpTransceiver_RtpTransceiverInit', {"track": track is Ref ? (track as Ref)?.refId : track, "init": init is Ref ? (init as Ref)?.refId : init, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_RtpTransceiver()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<org_webrtc_RtpTransceiver> addTransceiver__org_webrtc_MediaStreamTrack_MediaType(org_webrtc_MediaStreamTrack_MediaType mediaType) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::addTransceiver([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::addTransceiver__org_webrtc_MediaStreamTrack_MediaType', {"mediaType": mediaType.toValue(), "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_RtpTransceiver()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<org_webrtc_RtpTransceiver> addTransceiver__org_webrtc_MediaStreamTrack_MediaType__org_webrtc_RtpTransceiver_RtpTransceiverInit(org_webrtc_MediaStreamTrack_MediaType mediaType, org_webrtc_RtpTransceiver_RtpTransceiverInit init) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::addTransceiver([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::addTransceiver__org_webrtc_MediaStreamTrack_MediaType__org_webrtc_RtpTransceiver_RtpTransceiverInit', {"mediaType": mediaType.toValue(), "init": init is Ref ? (init as Ref)?.refId : init, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_RtpTransceiver()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  @deprecated
  Future<bool> getStats__org_webrtc_StatsObserver__org_webrtc_MediaStreamTrack(org_webrtc_StatsObserver observer, org_webrtc_MediaStreamTrack track) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::getStats([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::getStats__org_webrtc_StatsObserver__org_webrtc_MediaStreamTrack', {"track": track is Ref ? (track as Ref)?.refId : track, "refId": refId});
  
  
    // handle native call
    MethodChannel('org.webrtc.PeerConnection::getStats__org_webrtc_StatsObserver__org_webrtc_MediaStreamTrack::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
        
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> getStats__org_webrtc_RTCStatsCollectorCallback(org_webrtc_RTCStatsCollectorCallback callback) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::getStats([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::getStats__org_webrtc_RTCStatsCollectorCallback', {"refId": refId});
  
  
    // handle native call
    MethodChannel('org.webrtc.PeerConnection::getStats__org_webrtc_RTCStatsCollectorCallback::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
        
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<bool> setBitrate(int min, int current, int max) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::setBitrate([\'min\':$min, \'current\':$current, \'max\':$max])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::setBitrate', {"min": min, "current": current, "max": max, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<bool> startRtcEventLog(int file_descriptor, int max_size_bytes) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::startRtcEventLog([\'file_descriptor\':$file_descriptor, \'max_size_bytes\':$max_size_bytes])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::startRtcEventLog', {"file_descriptor": file_descriptor, "max_size_bytes": max_size_bytes, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> stopRtcEventLog() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::stopRtcEventLog([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::stopRtcEventLog', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<org_webrtc_PeerConnection_SignalingState> signalingState() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::signalingState([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::signalingState', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = (__result__ as int).toorg_webrtc_PeerConnection_SignalingState();
    
      return __return__;
    }
  }
  
  
  Future<org_webrtc_PeerConnection_IceConnectionState> iceConnectionState() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::iceConnectionState([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::iceConnectionState', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = (__result__ as int).toorg_webrtc_PeerConnection_IceConnectionState();
    
      return __return__;
    }
  }
  
  
  Future<org_webrtc_PeerConnection_IceGatheringState> iceGatheringState() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::iceGatheringState([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::iceGatheringState', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = (__result__ as int).toorg_webrtc_PeerConnection_IceGatheringState();
    
      return __return__;
    }
  }
  
  
  Future<void> close() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::close([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::close', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> dispose() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::dispose([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::dispose', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<int> getNativePeerConnection() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection@$refId::getNativePeerConnection([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::getNativePeerConnection', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  static Future<int> createNativePeerConnectionObserver(org_webrtc_PeerConnection_Observer observer) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnection::createNativePeerConnectionObserver([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::createNativePeerConnectionObserver', {"observer": observer is Ref ? (observer as Ref)?.refId : observer});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension org_webrtc_PeerConnection_Batch on List<org_webrtc_PeerConnection> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<org_webrtc_SessionDescription>> getLocalDescription_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::getLocalDescription_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_SessionDescription()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_SessionDescription>> getRemoteDescription_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::getRemoteDescription_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_SessionDescription()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_DataChannel>> createDataChannel_batch(List<String> label, List<org_webrtc_DataChannel_Init> init) async {
    if (label.length != init.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::createDataChannel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"label": label[__i__], "init": init[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_DataChannel()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<void>> createOffer_batch(List<org_webrtc_SdpObserver> observer, List<org_webrtc_MediaConstraints> constraints) async {
    if (observer.length != constraints.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::createOffer_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"observer": observer[__i__].refId, "constraints": constraints[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> createAnswer_batch(List<org_webrtc_SdpObserver> observer, List<org_webrtc_MediaConstraints> constraints) async {
    if (observer.length != constraints.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::createAnswer_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"observer": observer[__i__].refId, "constraints": constraints[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> setLocalDescription_batch(List<org_webrtc_SdpObserver> observer, List<org_webrtc_SessionDescription> sdp) async {
    if (observer.length != sdp.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::setLocalDescription_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"observer": observer[__i__].refId, "sdp": sdp[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> setRemoteDescription_batch(List<org_webrtc_SdpObserver> observer, List<org_webrtc_SessionDescription> sdp) async {
    if (observer.length != sdp.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::setRemoteDescription_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"observer": observer[__i__].refId, "sdp": sdp[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> setAudioPlayout_batch(List<bool> playout) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::setAudioPlayout_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"playout": playout[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> setAudioRecording_batch(List<bool> recording) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::setAudioRecording_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"recording": recording[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<bool>> setConfiguration_batch(List<org_webrtc_PeerConnection_RTCConfiguration> config) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::setConfiguration_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"config": config[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<bool>> addIceCandidate_batch(List<org_webrtc_IceCandidate> candidate) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::addIceCandidate_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"candidate": candidate[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<bool>> addStream_batch(List<org_webrtc_MediaStream> stream) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::addStream_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"stream": stream[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> removeStream_batch(List<org_webrtc_MediaStream> stream) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::removeStream_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"stream": stream[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_RtpSender>> createSender_batch(List<String> kind, List<String> stream_id) async {
    if (kind.length != stream_id.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::createSender_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"kind": kind[__i__], "stream_id": stream_id[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_RtpSender()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<List<org_webrtc_RtpSender>>> getSenders_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::getSenders_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as List).cast<int>().map((__it__) => org_webrtc_RtpSender()..refId = __it__..tag__ = 'owt_fluttify').toList()).toList();
      kNativeObjectPool.addAll(typedResult.expand((e) => e));
      return typedResult;
    }
  }
  
  
  Future<List<List<org_webrtc_RtpReceiver>>> getReceivers_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::getReceivers_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as List).cast<int>().map((__it__) => org_webrtc_RtpReceiver()..refId = __it__..tag__ = 'owt_fluttify').toList()).toList();
      kNativeObjectPool.addAll(typedResult.expand((e) => e));
      return typedResult;
    }
  }
  
  
  Future<List<List<org_webrtc_RtpTransceiver>>> getTransceivers_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::getTransceivers_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as List).cast<int>().map((__it__) => org_webrtc_RtpTransceiver()..refId = __it__..tag__ = 'owt_fluttify').toList()).toList();
      kNativeObjectPool.addAll(typedResult.expand((e) => e));
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_RtpSender>> addTrack__org_webrtc_MediaStreamTrack_batch(List<org_webrtc_MediaStreamTrack> track) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::addTrack__org_webrtc_MediaStreamTrack_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"track": track[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_RtpSender()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_RtpSender>> addTrack__org_webrtc_MediaStreamTrack__List_String__batch(List<org_webrtc_MediaStreamTrack> track, List<List<String>> streamIds) async {
    if (track.length != streamIds.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::addTrack__org_webrtc_MediaStreamTrack__List_String__batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"track": track[__i__].refId, "streamIds": streamIds[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_RtpSender()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<bool>> removeTrack_batch(List<org_webrtc_RtpSender> sender) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::removeTrack_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"sender": sender[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_RtpTransceiver>> addTransceiver__org_webrtc_MediaStreamTrack_batch(List<org_webrtc_MediaStreamTrack> track) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::addTransceiver__org_webrtc_MediaStreamTrack_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"track": track[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_RtpTransceiver()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_RtpTransceiver>> addTransceiver__org_webrtc_MediaStreamTrack__org_webrtc_RtpTransceiver_RtpTransceiverInit_batch(List<org_webrtc_MediaStreamTrack> track, List<org_webrtc_RtpTransceiver_RtpTransceiverInit> init) async {
    if (track.length != init.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::addTransceiver__org_webrtc_MediaStreamTrack__org_webrtc_RtpTransceiver_RtpTransceiverInit_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"track": track[__i__].refId, "init": init[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_RtpTransceiver()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_RtpTransceiver>> addTransceiver__org_webrtc_MediaStreamTrack_MediaType_batch(List<org_webrtc_MediaStreamTrack_MediaType> mediaType) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::addTransceiver__org_webrtc_MediaStreamTrack_MediaType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"mediaType": mediaType[__i__].toValue(), "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_RtpTransceiver()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_RtpTransceiver>> addTransceiver__org_webrtc_MediaStreamTrack_MediaType__org_webrtc_RtpTransceiver_RtpTransceiverInit_batch(List<org_webrtc_MediaStreamTrack_MediaType> mediaType, List<org_webrtc_RtpTransceiver_RtpTransceiverInit> init) async {
    if (mediaType.length != init.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::addTransceiver__org_webrtc_MediaStreamTrack_MediaType__org_webrtc_RtpTransceiver_RtpTransceiverInit_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"mediaType": mediaType[__i__].toValue(), "init": init[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_RtpTransceiver()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<bool>> setBitrate_batch(List<int> min, List<int> current, List<int> max) async {
    if (min.length != current.length || current.length != max.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::setBitrate_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"min": min[__i__], "current": current[__i__], "max": max[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<bool>> startRtcEventLog_batch(List<int> file_descriptor, List<int> max_size_bytes) async {
    if (file_descriptor.length != max_size_bytes.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::startRtcEventLog_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"file_descriptor": file_descriptor[__i__], "max_size_bytes": max_size_bytes[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> stopRtcEventLog_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::stopRtcEventLog_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_PeerConnection_SignalingState>> signalingState_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::signalingState_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toorg_webrtc_PeerConnection_SignalingState()).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_PeerConnection_IceConnectionState>> iceConnectionState_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::iceConnectionState_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toorg_webrtc_PeerConnection_IceConnectionState()).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_PeerConnection_IceGatheringState>> iceGatheringState_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::iceGatheringState_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toorg_webrtc_PeerConnection_IceGatheringState()).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> close_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::close_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> dispose_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::dispose_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<int>> getNativePeerConnection_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::getNativePeerConnection_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<int>> createNativePeerConnectionObserver_batch(List<org_webrtc_PeerConnection_Observer> observer) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection::createNativePeerConnectionObserver_batch', [for (int __i__ = 0; __i__ < observer.length; __i__++) {"observer": observer[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}