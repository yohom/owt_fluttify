// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

enum org_webrtc_NetworkMonitorAutoDetect_ConnectionType {
  CONNECTION_UNKNOWN /* null */,
  CONNECTION_ETHERNET /* null */,
  CONNECTION_WIFI /* null */,
  CONNECTION_4G /* null */,
  CONNECTION_3G /* null */,
  CONNECTION_2G /* null */,
  CONNECTION_UNKNOWN_CELLULAR /* null */,
  CONNECTION_BLUETOOTH /* null */,
  CONNECTION_VPN /* null */,
  CONNECTION_NONE /* null */
}

extension org_webrtc_NetworkMonitorAutoDetect_ConnectionTypeToX on org_webrtc_NetworkMonitorAutoDetect_ConnectionType {
  int toValue() {
    switch (this) {
      case org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_UNKNOWN: return org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_UNKNOWN.index + 0;
      case org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_ETHERNET: return org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_ETHERNET.index + 0;
      case org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_WIFI: return org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_WIFI.index + 0;
      case org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_4G: return org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_4G.index + 0;
      case org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_3G: return org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_3G.index + 0;
      case org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_2G: return org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_2G.index + 0;
      case org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_UNKNOWN_CELLULAR: return org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_UNKNOWN_CELLULAR.index + 0;
      case org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_BLUETOOTH: return org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_BLUETOOTH.index + 0;
      case org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_VPN: return org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_VPN.index + 0;
      case org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_NONE: return org_webrtc_NetworkMonitorAutoDetect_ConnectionType.CONNECTION_NONE.index + 0;
    }
  }
}

extension org_webrtc_NetworkMonitorAutoDetect_ConnectionTypeFromX on int {
  org_webrtc_NetworkMonitorAutoDetect_ConnectionType toorg_webrtc_NetworkMonitorAutoDetect_ConnectionType() {
    switch (this) {
      
      default: return org_webrtc_NetworkMonitorAutoDetect_ConnectionType.values[this + 0];
    }
  }
}