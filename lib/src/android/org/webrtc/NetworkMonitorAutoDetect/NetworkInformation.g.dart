// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_NetworkMonitorAutoDetect_NetworkInformation extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.NetworkMonitorAutoDetect.NetworkInformation';

  
  //endregion

  //region creators
  
  //endregion

  //region getters
  Future<String> get_name() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.NetworkMonitorAutoDetect.NetworkInformation::get_name", {'refId': refId});
  
    return __result__;
  }
  
  Future<org_webrtc_NetworkMonitorAutoDetect_ConnectionType> get_type() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.NetworkMonitorAutoDetect.NetworkInformation::get_type", {'refId': refId});
  
    return (__result__ as int).toorg_webrtc_NetworkMonitorAutoDetect_ConnectionType();
  }
  
  Future<org_webrtc_NetworkMonitorAutoDetect_ConnectionType> get_underlyingTypeForVpn() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.NetworkMonitorAutoDetect.NetworkInformation::get_underlyingTypeForVpn", {'refId': refId});
  
    return (__result__ as int).toorg_webrtc_NetworkMonitorAutoDetect_ConnectionType();
  }
  
  Future<int> get_handle() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.NetworkMonitorAutoDetect.NetworkInformation::get_handle", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}

extension org_webrtc_NetworkMonitorAutoDetect_NetworkInformation_Batch on List<org_webrtc_NetworkMonitorAutoDetect_NetworkInformation> {
  //region getters
  Future<List<String>> get_name_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.NetworkMonitorAutoDetect.NetworkInformation::get_name_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<org_webrtc_NetworkMonitorAutoDetect_ConnectionType>> get_type_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.NetworkMonitorAutoDetect.NetworkInformation::get_type_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toorg_webrtc_NetworkMonitorAutoDetect_ConnectionType()).toList();
  
    return typedResult;
  }
  
  Future<List<org_webrtc_NetworkMonitorAutoDetect_ConnectionType>> get_underlyingTypeForVpn_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.NetworkMonitorAutoDetect.NetworkInformation::get_underlyingTypeForVpn_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toorg_webrtc_NetworkMonitorAutoDetect_ConnectionType()).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_handle_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.NetworkMonitorAutoDetect.NetworkInformation::get_handle_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}