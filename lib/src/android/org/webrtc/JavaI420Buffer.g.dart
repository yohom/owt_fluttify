// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_JavaI420Buffer extends java_lang_Object with org_webrtc_RefCounted, org_webrtc_VideoFrame_Buffer, org_webrtc_VideoFrame_I420Buffer {
  //region constants
  static const String name__ = 'org.webrtc.JavaI420Buffer';

  
  //endregion

  //region creators
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<org_webrtc_JavaI420Buffer> allocate(int width, int height) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.JavaI420Buffer::allocate([\'width\':$width, \'height\':$height])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.JavaI420Buffer::allocate', {"width": width, "height": height});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_JavaI420Buffer()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  static Future<org_webrtc_VideoFrame_Buffer> cropAndScaleI420(org_webrtc_VideoFrame_I420Buffer buffer, int cropX, int cropY, int cropWidth, int cropHeight, int scaleWidth, int scaleHeight) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.JavaI420Buffer::cropAndScaleI420([\'cropX\':$cropX, \'cropY\':$cropY, \'cropWidth\':$cropWidth, \'cropHeight\':$cropHeight, \'scaleWidth\':$scaleWidth, \'scaleHeight\':$scaleHeight])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.JavaI420Buffer::cropAndScaleI420', {"buffer": buffer is Ref ? (buffer as Ref)?.refId : buffer, "cropX": cropX, "cropY": cropY, "cropWidth": cropWidth, "cropHeight": cropHeight, "scaleWidth": scaleWidth, "scaleHeight": scaleHeight});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_VideoFrame_Buffer.subInstance()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  //endregion
}

extension org_webrtc_JavaI420Buffer_Batch on List<org_webrtc_JavaI420Buffer> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<org_webrtc_JavaI420Buffer>> allocate_batch(List<int> width, List<int> height) async {
    if (width.length != height.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.JavaI420Buffer::allocate_batch', [for (int __i__ = 0; __i__ < width.length; __i__++) {"width": width[__i__], "height": height[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_JavaI420Buffer()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  static Future<List<org_webrtc_VideoFrame_Buffer>> cropAndScaleI420_batch(List<org_webrtc_VideoFrame_I420Buffer> buffer, List<int> cropX, List<int> cropY, List<int> cropWidth, List<int> cropHeight, List<int> scaleWidth, List<int> scaleHeight) async {
    if (buffer.length != cropX.length || cropX.length != cropY.length || cropY.length != cropWidth.length || cropWidth.length != cropHeight.length || cropHeight.length != scaleWidth.length || scaleWidth.length != scaleHeight.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.JavaI420Buffer::cropAndScaleI420_batch', [for (int __i__ = 0; __i__ < buffer.length; __i__++) {"buffer": buffer[__i__].refId, "cropX": cropX[__i__], "cropY": cropY[__i__], "cropWidth": cropWidth[__i__], "cropHeight": cropHeight[__i__], "scaleWidth": scaleWidth[__i__], "scaleHeight": scaleHeight[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_VideoFrame_Buffer.subInstance()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  //endregion
}