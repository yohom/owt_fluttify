// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_IceCandidate extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.IceCandidate';

  
  //endregion

  //region creators
  static Future<org_webrtc_IceCandidate> create__String__int__String(String sdpMid, int sdpMLineIndex, String sdp) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_IceCandidate__String__int__String', {"sdpMid": sdpMid, "sdpMLineIndex": sdpMLineIndex, "sdp": sdp});
    final object = org_webrtc_IceCandidate()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_IceCandidate>> create_batch__String__int__String(List<String> sdpMid, List<int> sdpMLineIndex, List<String> sdp) async {
    if (sdpMid.length != sdpMLineIndex.length || sdpMLineIndex.length != sdp.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_IceCandidate__String__int__String', [for (int __i__ = 0; __i__ < sdpMid.length; __i__++) {"sdpMid": sdpMid[__i__], "sdpMLineIndex": sdpMLineIndex[__i__], "sdp": sdp[__i__]}]);
  
    final List<org_webrtc_IceCandidate> typedResult = resultBatch.map((result) => org_webrtc_IceCandidate()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<String> get_sdpMid() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.IceCandidate::get_sdpMid", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_sdpMLineIndex() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.IceCandidate::get_sdpMLineIndex", {'refId': refId});
  
    return __result__;
  }
  
  Future<String> get_sdp() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.IceCandidate::get_sdp", {'refId': refId});
  
    return __result__;
  }
  
  Future<String> get_serverUrl() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.IceCandidate::get_serverUrl", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}

extension org_webrtc_IceCandidate_Batch on List<org_webrtc_IceCandidate> {
  //region getters
  Future<List<String>> get_sdpMid_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.IceCandidate::get_sdpMid_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_sdpMLineIndex_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.IceCandidate::get_sdpMLineIndex_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_sdp_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.IceCandidate::get_sdp_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<String>> get_serverUrl_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.IceCandidate::get_serverUrl_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}