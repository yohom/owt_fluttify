// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_Size extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.Size';

  
  //endregion

  //region creators
  static Future<org_webrtc_Size> create__int__int(int width, int height) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_Size__int__int', {"width": width, "height": height});
    final object = org_webrtc_Size()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_Size>> create_batch__int__int(List<int> width, List<int> height) async {
    if (width.length != height.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_Size__int__int', [for (int __i__ = 0; __i__ < width.length; __i__++) {"width": width[__i__], "height": height[__i__]}]);
  
    final List<org_webrtc_Size> typedResult = resultBatch.map((result) => org_webrtc_Size()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_width() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.Size::get_width", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_height() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.Size::get_height", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_width(int width) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.Size::set_width', {'refId': refId, "width": width});
  
  
  }
  
  Future<void> set_height(int height) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.Size::set_height', {'refId': refId, "height": height});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension org_webrtc_Size_Batch on List<org_webrtc_Size> {
  //region getters
  Future<List<int>> get_width_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.Size::get_width_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_height_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.Size::get_height_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_width_batch(List<int> width) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.Size::set_width_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "width": width[__i__]}]);
  
  
  }
  
  Future<void> set_height_batch(List<int> height) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.Size::set_height_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "height": height[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}