// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_SurfaceViewRenderer extends android_view_SurfaceView with org_webrtc_VideoSink, org_webrtc_RendererCommon_RendererEvents, android_view_SurfaceHolder_Callback {
  //region constants
  static const String name__ = 'org.webrtc.SurfaceViewRenderer';

  
  //endregion

  //region creators
  static Future<org_webrtc_SurfaceViewRenderer> create__android_content_Context(android_content_Context context) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_SurfaceViewRenderer__android_content_Context', {"context": context.refId});
    final object = org_webrtc_SurfaceViewRenderer()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_SurfaceViewRenderer>> create_batch__android_content_Context(List<android_content_Context> context) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_SurfaceViewRenderer__android_content_Context', [for (int __i__ = 0; __i__ < context.length; __i__++) {"context": context[__i__].refId}]);
  
    final List<org_webrtc_SurfaceViewRenderer> typedResult = resultBatch.map((result) => org_webrtc_SurfaceViewRenderer()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<void> init__org_webrtc_EglBase_Context__org_webrtc_RendererCommon_RendererEvents(org_webrtc_EglBase_Context sharedContext, org_webrtc_RendererCommon_RendererEvents rendererEvents, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.SurfaceViewRenderer@$refId::init([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::init__org_webrtc_EglBase_Context__org_webrtc_RendererCommon_RendererEvents', {"sharedContext": sharedContext is Ref ? (sharedContext as Ref)?.refId : sharedContext, "rendererEvents": rendererEvents is Ref ? (rendererEvents as Ref)?.refId : rendererEvents, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> init__org_webrtc_EglBase_Context__org_webrtc_RendererCommon_RendererEvents__Int32List__org_webrtc_RendererCommon_GlDrawer(org_webrtc_EglBase_Context sharedContext, org_webrtc_RendererCommon_RendererEvents rendererEvents, Int32List configAttributes, org_webrtc_RendererCommon_GlDrawer drawer, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.SurfaceViewRenderer@$refId::init([\'configAttributes\':$configAttributes])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::init__org_webrtc_EglBase_Context__org_webrtc_RendererCommon_RendererEvents__Int32List__org_webrtc_RendererCommon_GlDrawer', {"sharedContext": sharedContext is Ref ? (sharedContext as Ref)?.refId : sharedContext, "rendererEvents": rendererEvents is Ref ? (rendererEvents as Ref)?.refId : rendererEvents, "configAttributes": configAttributes, "drawer": drawer is Ref ? (drawer as Ref)?.refId : drawer, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> release({bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.SurfaceViewRenderer@$refId::release([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::release', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer(org_webrtc_EglRenderer_FrameListener listener, double scale, org_webrtc_RendererCommon_GlDrawer drawerParam, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.SurfaceViewRenderer@$refId::addFrameListener([\'scale\':$scale])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer', {"scale": scale, "drawerParam": drawerParam is Ref ? (drawerParam as Ref)?.refId : drawerParam, "refId": refId});
  
  
    // handle native call
    MethodChannel('org.webrtc.SurfaceViewRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::org.webrtc.EglRenderer.FrameListener::onFrame':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onFrame([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              listener?.onFrame(TypeOpOwtFluttifyAndroid((args['var1'] as Object))?.as__<android_graphics_Bitmap>());
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> addFrameListener__org_webrtc_EglRenderer_FrameListener__double(org_webrtc_EglRenderer_FrameListener listener, double scale, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.SurfaceViewRenderer@$refId::addFrameListener([\'scale\':$scale])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double', {"scale": scale, "refId": refId});
  
  
    // handle native call
    MethodChannel('org.webrtc.SurfaceViewRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::org.webrtc.EglRenderer.FrameListener::onFrame':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onFrame([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              listener?.onFrame(TypeOpOwtFluttifyAndroid((args['var1'] as Object))?.as__<android_graphics_Bitmap>());
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> removeFrameListener(org_webrtc_EglRenderer_FrameListener listener, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.SurfaceViewRenderer@$refId::removeFrameListener([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::removeFrameListener', {"refId": refId});
  
  
    // handle native call
    MethodChannel('org.webrtc.SurfaceViewRenderer::removeFrameListener::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::org.webrtc.EglRenderer.FrameListener::onFrame':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onFrame([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              listener?.onFrame(TypeOpOwtFluttifyAndroid((args['var1'] as Object))?.as__<android_graphics_Bitmap>());
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> setEnableHardwareScaler(bool enabled, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.SurfaceViewRenderer@$refId::setEnableHardwareScaler([\'enabled\':$enabled])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::setEnableHardwareScaler', {"enabled": enabled, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> setMirror(bool mirror, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.SurfaceViewRenderer@$refId::setMirror([\'mirror\':$mirror])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::setMirror', {"mirror": mirror, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> setScalingType__org_webrtc_RendererCommon_ScalingType(org_webrtc_RendererCommon_ScalingType scalingType, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.SurfaceViewRenderer@$refId::setScalingType([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::setScalingType__org_webrtc_RendererCommon_ScalingType', {"scalingType": scalingType.toValue(), "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> setScalingType__org_webrtc_RendererCommon_ScalingType__org_webrtc_RendererCommon_ScalingType(org_webrtc_RendererCommon_ScalingType scalingTypeMatchOrientation, org_webrtc_RendererCommon_ScalingType scalingTypeMismatchOrientation, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.SurfaceViewRenderer@$refId::setScalingType([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::setScalingType__org_webrtc_RendererCommon_ScalingType__org_webrtc_RendererCommon_ScalingType', {"scalingTypeMatchOrientation": scalingTypeMatchOrientation.toValue(), "scalingTypeMismatchOrientation": scalingTypeMismatchOrientation.toValue(), "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> setFpsReduction(double fps, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.SurfaceViewRenderer@$refId::setFpsReduction([\'fps\':$fps])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::setFpsReduction', {"fps": fps, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> disableFpsReduction({bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.SurfaceViewRenderer@$refId::disableFpsReduction([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::disableFpsReduction', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> pauseVideo({bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.SurfaceViewRenderer@$refId::pauseVideo([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::pauseVideo', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> clearImage({bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.SurfaceViewRenderer@$refId::clearImage([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::clearImage', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension org_webrtc_SurfaceViewRenderer_Batch on List<org_webrtc_SurfaceViewRenderer> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<void>> init__org_webrtc_EglBase_Context__org_webrtc_RendererCommon_RendererEvents_batch(List<org_webrtc_EglBase_Context> sharedContext, List<org_webrtc_RendererCommon_RendererEvents> rendererEvents, {bool viewChannel = true}) async {
    if (sharedContext.length != rendererEvents.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::init__org_webrtc_EglBase_Context__org_webrtc_RendererCommon_RendererEvents_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"sharedContext": sharedContext[__i__].refId, "rendererEvents": rendererEvents[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> init__org_webrtc_EglBase_Context__org_webrtc_RendererCommon_RendererEvents__Int32List__org_webrtc_RendererCommon_GlDrawer_batch(List<org_webrtc_EglBase_Context> sharedContext, List<org_webrtc_RendererCommon_RendererEvents> rendererEvents, List<Int32List> configAttributes, List<org_webrtc_RendererCommon_GlDrawer> drawer, {bool viewChannel = true}) async {
    if (sharedContext.length != rendererEvents.length || rendererEvents.length != configAttributes.length || configAttributes.length != drawer.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::init__org_webrtc_EglBase_Context__org_webrtc_RendererCommon_RendererEvents__Int32List__org_webrtc_RendererCommon_GlDrawer_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"sharedContext": sharedContext[__i__].refId, "rendererEvents": rendererEvents[__i__].refId, "configAttributes": configAttributes[__i__], "drawer": drawer[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> release_batch({bool viewChannel = true}) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::release_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> setEnableHardwareScaler_batch(List<bool> enabled, {bool viewChannel = true}) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::setEnableHardwareScaler_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"enabled": enabled[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> setMirror_batch(List<bool> mirror, {bool viewChannel = true}) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::setMirror_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"mirror": mirror[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> setScalingType__org_webrtc_RendererCommon_ScalingType_batch(List<org_webrtc_RendererCommon_ScalingType> scalingType, {bool viewChannel = true}) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::setScalingType__org_webrtc_RendererCommon_ScalingType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"scalingType": scalingType[__i__].toValue(), "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> setScalingType__org_webrtc_RendererCommon_ScalingType__org_webrtc_RendererCommon_ScalingType_batch(List<org_webrtc_RendererCommon_ScalingType> scalingTypeMatchOrientation, List<org_webrtc_RendererCommon_ScalingType> scalingTypeMismatchOrientation, {bool viewChannel = true}) async {
    if (scalingTypeMatchOrientation.length != scalingTypeMismatchOrientation.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::setScalingType__org_webrtc_RendererCommon_ScalingType__org_webrtc_RendererCommon_ScalingType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"scalingTypeMatchOrientation": scalingTypeMatchOrientation[__i__].toValue(), "scalingTypeMismatchOrientation": scalingTypeMismatchOrientation[__i__].toValue(), "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> setFpsReduction_batch(List<double> fps, {bool viewChannel = true}) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::setFpsReduction_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"fps": fps[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> disableFpsReduction_batch({bool viewChannel = true}) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::disableFpsReduction_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> pauseVideo_batch({bool viewChannel = true}) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::pauseVideo_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> clearImage_batch({bool viewChannel = true}) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'com.fluttify/owt_fluttify/org_webrtc_SurfaceViewRenderer' : 'com.fluttify/owt_fluttify').invokeMethod('org.webrtc.SurfaceViewRenderer::clearImage_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}