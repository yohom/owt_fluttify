// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class _org_webrtc_CameraEnumerator_SUB extends java_lang_Object with org_webrtc_CameraEnumerator {}

mixin org_webrtc_CameraEnumerator on java_lang_Object {
  

  static org_webrtc_CameraEnumerator subInstance() => _org_webrtc_CameraEnumerator_SUB();

  

  

  
  Future<List<String>> getDeviceNames() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.CameraEnumerator@$refId::getDeviceNames([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerator::getDeviceNames', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = (__result__ as List).cast<String>();
    
      return __return__;
    }
  }
  
  
  Future<bool> isFrontFacing(String var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.CameraEnumerator@$refId::isFrontFacing([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerator::isFrontFacing', {"var1": var1, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<bool> isBackFacing(String var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.CameraEnumerator@$refId::isBackFacing([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerator::isBackFacing', {"var1": var1, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<List<org_webrtc_CameraEnumerationAndroid_CaptureFormat>> getSupportedFormats(String var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.CameraEnumerator@$refId::getSupportedFormats([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerator::getSupportedFormats', {"var1": var1, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = (__result__ as List).cast<int>().map((__it__) => org_webrtc_CameraEnumerationAndroid_CaptureFormat()..refId = __it__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(__return__);
      return __return__;
    }
  }
  
  
  Future<org_webrtc_CameraVideoCapturer> createCapturer(String var1, org_webrtc_CameraVideoCapturer_CameraEventsHandler var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.CameraEnumerator@$refId::createCapturer([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerator::createCapturer', {"var1": var1, "refId": refId});
  
  
    // handle native call
    MethodChannel('org.webrtc.CameraEnumerator::createCapturer::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::org.webrtc.CameraVideoCapturer.CameraEventsHandler::onCameraError':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onCameraError([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              var2?.onCameraError(args['var1']);
              break;
            case 'Callback::org.webrtc.CameraVideoCapturer.CameraEventsHandler::onCameraDisconnected':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onCameraDisconnected([])');
              }
        
              // handle the native call
              var2?.onCameraDisconnected();
              break;
            case 'Callback::org.webrtc.CameraVideoCapturer.CameraEventsHandler::onCameraFreezed':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onCameraFreezed([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              var2?.onCameraFreezed(args['var1']);
              break;
            case 'Callback::org.webrtc.CameraVideoCapturer.CameraEventsHandler::onCameraOpening':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onCameraOpening([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              var2?.onCameraOpening(args['var1']);
              break;
            case 'Callback::org.webrtc.CameraVideoCapturer.CameraEventsHandler::onFirstFrameAvailable':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onFirstFrameAvailable([])');
              }
        
              // handle the native call
              var2?.onFirstFrameAvailable();
              break;
            case 'Callback::org.webrtc.CameraVideoCapturer.CameraEventsHandler::onCameraClosed':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onCameraClosed([])');
              }
        
              // handle the native call
              var2?.onCameraClosed();
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_CameraVideoCapturer.subInstance()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
}

extension org_webrtc_CameraEnumerator_Batch on List<org_webrtc_CameraEnumerator> {
  //region methods
  
  Future<List<List<String>>> getDeviceNames_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerator::getDeviceNames_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<List<String>>().map((__result__) => (__result__ as List).cast<String>()).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<bool>> isFrontFacing_batch(List<String> var1) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerator::isFrontFacing_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<bool>> isBackFacing_batch(List<String> var1) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerator::isBackFacing_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<List<org_webrtc_CameraEnumerationAndroid_CaptureFormat>>> getSupportedFormats_batch(List<String> var1) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerator::getSupportedFormats_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"var1": var1[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as List).cast<int>().map((__it__) => org_webrtc_CameraEnumerationAndroid_CaptureFormat()..refId = __it__..tag__ = 'owt_fluttify').toList()).toList();
      kNativeObjectPool.addAll(typedResult.expand((e) => e));
      return typedResult;
    }
  }
  
  //endregion
}