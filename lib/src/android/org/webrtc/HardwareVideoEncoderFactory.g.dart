// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_HardwareVideoEncoderFactory extends java_lang_Object with org_webrtc_VideoEncoderFactory {
  //region constants
  static const String name__ = 'org.webrtc.HardwareVideoEncoderFactory';

  
  //endregion

  //region creators
  static Future<org_webrtc_HardwareVideoEncoderFactory> create__org_webrtc_EglBase_Context__boolean__boolean(org_webrtc_EglBase_Context sharedContext, bool enableIntelVp8Encoder, bool enableH264HighProfile) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_HardwareVideoEncoderFactory__org_webrtc_EglBase_Context__boolean__boolean', {"sharedContext": sharedContext.refId, "enableIntelVp8Encoder": enableIntelVp8Encoder, "enableH264HighProfile": enableH264HighProfile});
    final object = org_webrtc_HardwareVideoEncoderFactory()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<org_webrtc_HardwareVideoEncoderFactory> create__boolean__boolean(bool enableIntelVp8Encoder, bool enableH264HighProfile) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_HardwareVideoEncoderFactory__boolean__boolean', {"enableIntelVp8Encoder": enableIntelVp8Encoder, "enableH264HighProfile": enableH264HighProfile});
    final object = org_webrtc_HardwareVideoEncoderFactory()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_HardwareVideoEncoderFactory>> create_batch__org_webrtc_EglBase_Context__boolean__boolean(List<org_webrtc_EglBase_Context> sharedContext, List<bool> enableIntelVp8Encoder, List<bool> enableH264HighProfile) async {
    if (sharedContext.length != enableIntelVp8Encoder.length || enableIntelVp8Encoder.length != enableH264HighProfile.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_HardwareVideoEncoderFactory__org_webrtc_EglBase_Context__boolean__boolean', [for (int __i__ = 0; __i__ < sharedContext.length; __i__++) {"sharedContext": sharedContext[__i__].refId, "enableIntelVp8Encoder": enableIntelVp8Encoder[__i__], "enableH264HighProfile": enableH264HighProfile[__i__]}]);
  
    final List<org_webrtc_HardwareVideoEncoderFactory> typedResult = resultBatch.map((result) => org_webrtc_HardwareVideoEncoderFactory()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  static Future<List<org_webrtc_HardwareVideoEncoderFactory>> create_batch__boolean__boolean(List<bool> enableIntelVp8Encoder, List<bool> enableH264HighProfile) async {
    if (enableIntelVp8Encoder.length != enableH264HighProfile.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_HardwareVideoEncoderFactory__boolean__boolean', [for (int __i__ = 0; __i__ < enableIntelVp8Encoder.length; __i__++) {"enableIntelVp8Encoder": enableIntelVp8Encoder[__i__], "enableH264HighProfile": enableH264HighProfile[__i__]}]);
  
    final List<org_webrtc_HardwareVideoEncoderFactory> typedResult = resultBatch.map((result) => org_webrtc_HardwareVideoEncoderFactory()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}

extension org_webrtc_HardwareVideoEncoderFactory_Batch on List<org_webrtc_HardwareVideoEncoderFactory> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}