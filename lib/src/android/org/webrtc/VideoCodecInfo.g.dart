// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_VideoCodecInfo extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.VideoCodecInfo';

  static final String H264_FMTP_PROFILE_LEVEL_ID = "profile-level-id";
  static final String H264_FMTP_LEVEL_ASYMMETRY_ALLOWED = "level-asymmetry-allowed";
  static final String H264_FMTP_PACKETIZATION_MODE = "packetization-mode";
  static final String H264_PROFILE_CONSTRAINED_BASELINE = "42e0";
  static final String H264_PROFILE_CONSTRAINED_HIGH = "640c";
  static final String H264_LEVEL_3_1 = "1f";
  static final String H264_CONSTRAINED_HIGH_3_1 = "640c1f";
  static final String H264_CONSTRAINED_BASELINE_3_1 = "42e01f";
  //endregion

  //region creators
  static Future<org_webrtc_VideoCodecInfo> create__String__java_util_Map_String_String_(String name, Map<String,String> params) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_VideoCodecInfo__String__java_util_Map_String_String_', {"name": name, "params": params});
    final object = org_webrtc_VideoCodecInfo()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<org_webrtc_VideoCodecInfo> create__int__String__java_util_Map_String_String_(int payload, String name, Map<String,String> params) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_VideoCodecInfo__int__String__java_util_Map_String_String_', {"payload": payload, "name": name, "params": params});
    final object = org_webrtc_VideoCodecInfo()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_VideoCodecInfo>> create_batch__String__java_util_Map_String_String_(List<String> name, List<Map<String,String>> params) async {
    if (name.length != params.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_VideoCodecInfo__String__java_util_Map_String_String_', [for (int __i__ = 0; __i__ < name.length; __i__++) {"name": name[__i__], "params": params[__i__]}]);
  
    final List<org_webrtc_VideoCodecInfo> typedResult = resultBatch.map((result) => org_webrtc_VideoCodecInfo()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  static Future<List<org_webrtc_VideoCodecInfo>> create_batch__int__String__java_util_Map_String_String_(List<int> payload, List<String> name, List<Map<String,String>> params) async {
    if (payload.length != name.length || name.length != params.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_VideoCodecInfo__int__String__java_util_Map_String_String_', [for (int __i__ = 0; __i__ < payload.length; __i__++) {"payload": payload[__i__], "name": name[__i__], "params": params[__i__]}]);
  
    final List<org_webrtc_VideoCodecInfo> typedResult = resultBatch.map((result) => org_webrtc_VideoCodecInfo()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<String> get_name() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoCodecInfo::get_name", {'refId': refId});
  
    return __result__;
  }
  
  Future<Map<String,String>> get_params() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoCodecInfo::get_params", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_payload() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoCodecInfo::get_payload", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}

extension org_webrtc_VideoCodecInfo_Batch on List<org_webrtc_VideoCodecInfo> {
  //region getters
  Future<List<String>> get_name_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoCodecInfo::get_name_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<Map<String,String>>> get_params_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoCodecInfo::get_params_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<Map<String,String>>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_payload_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.VideoCodecInfo::get_payload_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}