// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_PeerConnectionFactory extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.PeerConnectionFactory';

  static final String TRIAL_ENABLED = "Enabled";
  static final String VIDEO_FRAME_EMIT_TRIAL = "VideoFrameEmit";
  //endregion

  //region creators
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<void> shutdownInternalTracer() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory::shutdownInternalTracer([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::shutdownInternalTracer', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  @deprecated
  static Future<void> initializeFieldTrials(String fieldTrialsInitString) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory::initializeFieldTrials([\'fieldTrialsInitString\':$fieldTrialsInitString])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::initializeFieldTrials', {"fieldTrialsInitString": fieldTrialsInitString});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  static Future<String> fieldTrialsFindFullName(String name) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory::fieldTrialsFindFullName([\'name\':$name])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::fieldTrialsFindFullName', {"name": name});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  static Future<bool> startInternalTracingCapture(String tracingFilename) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory::startInternalTracingCapture([\'tracingFilename\':$tracingFilename])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::startInternalTracingCapture', {"tracingFilename": tracingFilename});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  static Future<void> stopInternalTracingCapture() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory::stopInternalTracingCapture([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::stopInternalTracingCapture', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  @deprecated
  Future<org_webrtc_PeerConnection> createPeerConnection__org_webrtc_PeerConnection_RTCConfiguration__org_webrtc_MediaConstraints__org_webrtc_PeerConnection_Observer(org_webrtc_PeerConnection_RTCConfiguration rtcConfig, org_webrtc_MediaConstraints constraints, org_webrtc_PeerConnection_Observer observer) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory@$refId::createPeerConnection([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createPeerConnection__org_webrtc_PeerConnection_RTCConfiguration__org_webrtc_MediaConstraints__org_webrtc_PeerConnection_Observer', {"rtcConfig": rtcConfig is Ref ? (rtcConfig as Ref)?.refId : rtcConfig, "constraints": constraints is Ref ? (constraints as Ref)?.refId : constraints, "observer": observer is Ref ? (observer as Ref)?.refId : observer, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_PeerConnection()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  @deprecated
  Future<org_webrtc_PeerConnection> createPeerConnection__List_org_webrtc_PeerConnection_IceServer___org_webrtc_MediaConstraints__org_webrtc_PeerConnection_Observer(List<org_webrtc_PeerConnection_IceServer> iceServers, org_webrtc_MediaConstraints constraints, org_webrtc_PeerConnection_Observer observer) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory@$refId::createPeerConnection([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createPeerConnection__List_org_webrtc_PeerConnection_IceServer___org_webrtc_MediaConstraints__org_webrtc_PeerConnection_Observer', {"iceServers": iceServers.map((__it__) => __it__?.refId).toList(), "constraints": constraints is Ref ? (constraints as Ref)?.refId : constraints, "observer": observer is Ref ? (observer as Ref)?.refId : observer, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_PeerConnection()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<org_webrtc_PeerConnection> createPeerConnection__List_org_webrtc_PeerConnection_IceServer___org_webrtc_PeerConnection_Observer(List<org_webrtc_PeerConnection_IceServer> iceServers, org_webrtc_PeerConnection_Observer observer) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory@$refId::createPeerConnection([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createPeerConnection__List_org_webrtc_PeerConnection_IceServer___org_webrtc_PeerConnection_Observer', {"iceServers": iceServers.map((__it__) => __it__?.refId).toList(), "observer": observer is Ref ? (observer as Ref)?.refId : observer, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_PeerConnection()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<org_webrtc_PeerConnection> createPeerConnection__org_webrtc_PeerConnection_RTCConfiguration__org_webrtc_PeerConnection_Observer(org_webrtc_PeerConnection_RTCConfiguration rtcConfig, org_webrtc_PeerConnection_Observer observer) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory@$refId::createPeerConnection([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createPeerConnection__org_webrtc_PeerConnection_RTCConfiguration__org_webrtc_PeerConnection_Observer', {"rtcConfig": rtcConfig is Ref ? (rtcConfig as Ref)?.refId : rtcConfig, "observer": observer is Ref ? (observer as Ref)?.refId : observer, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_PeerConnection()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<org_webrtc_PeerConnection> createPeerConnection__org_webrtc_PeerConnection_RTCConfiguration__org_webrtc_PeerConnectionDependencies(org_webrtc_PeerConnection_RTCConfiguration rtcConfig, org_webrtc_PeerConnectionDependencies dependencies) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory@$refId::createPeerConnection([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createPeerConnection__org_webrtc_PeerConnection_RTCConfiguration__org_webrtc_PeerConnectionDependencies', {"rtcConfig": rtcConfig is Ref ? (rtcConfig as Ref)?.refId : rtcConfig, "dependencies": dependencies is Ref ? (dependencies as Ref)?.refId : dependencies, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_PeerConnection()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<org_webrtc_MediaStream> createLocalMediaStream(String label) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory@$refId::createLocalMediaStream([\'label\':$label])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createLocalMediaStream', {"label": label, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_MediaStream()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<org_webrtc_VideoSource> createVideoSource(bool isScreencast) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory@$refId::createVideoSource([\'isScreencast\':$isScreencast])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createVideoSource', {"isScreencast": isScreencast, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_VideoSource()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<org_webrtc_VideoTrack> createVideoTrack(String id, org_webrtc_VideoSource source) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory@$refId::createVideoTrack([\'id\':$id])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createVideoTrack', {"id": id, "source": source is Ref ? (source as Ref)?.refId : source, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_VideoTrack()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<org_webrtc_AudioSource> createAudioSource(org_webrtc_MediaConstraints constraints) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory@$refId::createAudioSource([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createAudioSource', {"constraints": constraints is Ref ? (constraints as Ref)?.refId : constraints, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_AudioSource()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<org_webrtc_AudioTrack> createAudioTrack(String id, org_webrtc_AudioSource source) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory@$refId::createAudioTrack([\'id\':$id])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createAudioTrack', {"id": id, "source": source is Ref ? (source as Ref)?.refId : source, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_AudioTrack()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<bool> startAecDump(int file_descriptor, int filesize_limit_bytes) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory@$refId::startAecDump([\'file_descriptor\':$file_descriptor, \'filesize_limit_bytes\':$filesize_limit_bytes])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::startAecDump', {"file_descriptor": file_descriptor, "filesize_limit_bytes": filesize_limit_bytes, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> stopAecDump() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory@$refId::stopAecDump([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::stopAecDump', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> dispose() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory@$refId::dispose([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::dispose', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> threadsCallbacks() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory@$refId::threadsCallbacks([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::threadsCallbacks', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<int> getNativePeerConnectionFactory() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory@$refId::getNativePeerConnectionFactory([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::getNativePeerConnectionFactory', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<int> getNativeOwnedFactoryAndThreads() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory@$refId::getNativeOwnedFactoryAndThreads([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::getNativeOwnedFactoryAndThreads', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  static Future<void> printStackTraces() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.PeerConnectionFactory::printStackTraces([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::printStackTraces', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension org_webrtc_PeerConnectionFactory_Batch on List<org_webrtc_PeerConnectionFactory> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<void>> shutdownInternalTracer_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::shutdownInternalTracer_batch', );
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  @deprecated
  static Future<List<void>> initializeFieldTrials_batch(List<String> fieldTrialsInitString) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::initializeFieldTrials_batch', [for (int __i__ = 0; __i__ < fieldTrialsInitString.length; __i__++) {"fieldTrialsInitString": fieldTrialsInitString[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<String>> fieldTrialsFindFullName_batch(List<String> name) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::fieldTrialsFindFullName_batch', [for (int __i__ = 0; __i__ < name.length; __i__++) {"name": name[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<bool>> startInternalTracingCapture_batch(List<String> tracingFilename) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::startInternalTracingCapture_batch', [for (int __i__ = 0; __i__ < tracingFilename.length; __i__++) {"tracingFilename": tracingFilename[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<void>> stopInternalTracingCapture_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::stopInternalTracingCapture_batch', );
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  @deprecated
  Future<List<org_webrtc_PeerConnection>> createPeerConnection__org_webrtc_PeerConnection_RTCConfiguration__org_webrtc_MediaConstraints__org_webrtc_PeerConnection_Observer_batch(List<org_webrtc_PeerConnection_RTCConfiguration> rtcConfig, List<org_webrtc_MediaConstraints> constraints, List<org_webrtc_PeerConnection_Observer> observer) async {
    if (rtcConfig.length != constraints.length || constraints.length != observer.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createPeerConnection__org_webrtc_PeerConnection_RTCConfiguration__org_webrtc_MediaConstraints__org_webrtc_PeerConnection_Observer_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"rtcConfig": rtcConfig[__i__].refId, "constraints": constraints[__i__].refId, "observer": observer[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_PeerConnection()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  @deprecated
  Future<List<org_webrtc_PeerConnection>> createPeerConnection__List_org_webrtc_PeerConnection_IceServer___org_webrtc_MediaConstraints__org_webrtc_PeerConnection_Observer_batch(List<List<org_webrtc_PeerConnection_IceServer>> iceServers, List<org_webrtc_MediaConstraints> constraints, List<org_webrtc_PeerConnection_Observer> observer) async {
    if (iceServers.length != constraints.length || constraints.length != observer.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createPeerConnection__List_org_webrtc_PeerConnection_IceServer___org_webrtc_MediaConstraints__org_webrtc_PeerConnection_Observer_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"iceServers": iceServers[__i__].map((it) => it.refId).toList(), "constraints": constraints[__i__].refId, "observer": observer[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_PeerConnection()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_PeerConnection>> createPeerConnection__List_org_webrtc_PeerConnection_IceServer___org_webrtc_PeerConnection_Observer_batch(List<List<org_webrtc_PeerConnection_IceServer>> iceServers, List<org_webrtc_PeerConnection_Observer> observer) async {
    if (iceServers.length != observer.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createPeerConnection__List_org_webrtc_PeerConnection_IceServer___org_webrtc_PeerConnection_Observer_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"iceServers": iceServers[__i__].map((it) => it.refId).toList(), "observer": observer[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_PeerConnection()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_PeerConnection>> createPeerConnection__org_webrtc_PeerConnection_RTCConfiguration__org_webrtc_PeerConnection_Observer_batch(List<org_webrtc_PeerConnection_RTCConfiguration> rtcConfig, List<org_webrtc_PeerConnection_Observer> observer) async {
    if (rtcConfig.length != observer.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createPeerConnection__org_webrtc_PeerConnection_RTCConfiguration__org_webrtc_PeerConnection_Observer_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"rtcConfig": rtcConfig[__i__].refId, "observer": observer[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_PeerConnection()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_PeerConnection>> createPeerConnection__org_webrtc_PeerConnection_RTCConfiguration__org_webrtc_PeerConnectionDependencies_batch(List<org_webrtc_PeerConnection_RTCConfiguration> rtcConfig, List<org_webrtc_PeerConnectionDependencies> dependencies) async {
    if (rtcConfig.length != dependencies.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createPeerConnection__org_webrtc_PeerConnection_RTCConfiguration__org_webrtc_PeerConnectionDependencies_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"rtcConfig": rtcConfig[__i__].refId, "dependencies": dependencies[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_PeerConnection()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_MediaStream>> createLocalMediaStream_batch(List<String> label) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createLocalMediaStream_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"label": label[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_MediaStream()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_VideoSource>> createVideoSource_batch(List<bool> isScreencast) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createVideoSource_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"isScreencast": isScreencast[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_VideoSource()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_VideoTrack>> createVideoTrack_batch(List<String> id, List<org_webrtc_VideoSource> source) async {
    if (id.length != source.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createVideoTrack_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"id": id[__i__], "source": source[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_VideoTrack()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_AudioSource>> createAudioSource_batch(List<org_webrtc_MediaConstraints> constraints) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createAudioSource_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"constraints": constraints[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_AudioSource()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<org_webrtc_AudioTrack>> createAudioTrack_batch(List<String> id, List<org_webrtc_AudioSource> source) async {
    if (id.length != source.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::createAudioTrack_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"id": id[__i__], "source": source[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_AudioTrack()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<bool>> startAecDump_batch(List<int> file_descriptor, List<int> filesize_limit_bytes) async {
    if (file_descriptor.length != filesize_limit_bytes.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::startAecDump_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"file_descriptor": file_descriptor[__i__], "filesize_limit_bytes": filesize_limit_bytes[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> stopAecDump_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::stopAecDump_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> dispose_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::dispose_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> threadsCallbacks_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::threadsCallbacks_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<int>> getNativePeerConnectionFactory_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::getNativePeerConnectionFactory_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<int>> getNativeOwnedFactoryAndThreads_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::getNativeOwnedFactoryAndThreads_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<void>> printStackTraces_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnectionFactory::printStackTraces_batch', );
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}