// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_audio_JavaAudioDeviceModule_AudioSamples extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.audio.JavaAudioDeviceModule.AudioSamples';

  
  //endregion

  //region creators
  static Future<org_webrtc_audio_JavaAudioDeviceModule_AudioSamples> create__int__int__int__byteArray(int audioFormat, int channelCount, int sampleRate, Uint8List data) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_audio_JavaAudioDeviceModule_AudioSamples__int__int__int__byteArray', {"audioFormat": audioFormat, "channelCount": channelCount, "sampleRate": sampleRate, "data": data});
    final object = org_webrtc_audio_JavaAudioDeviceModule_AudioSamples()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_audio_JavaAudioDeviceModule_AudioSamples>> create_batch__int__int__int__byteArray(List<int> audioFormat, List<int> channelCount, List<int> sampleRate, List<Uint8List> data) async {
    if (audioFormat.length != channelCount.length || channelCount.length != sampleRate.length || sampleRate.length != data.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_audio_JavaAudioDeviceModule_AudioSamples__int__int__int__byteArray', [for (int __i__ = 0; __i__ < audioFormat.length; __i__++) {"audioFormat": audioFormat[__i__], "channelCount": channelCount[__i__], "sampleRate": sampleRate[__i__], "data": data[__i__]}]);
  
    final List<org_webrtc_audio_JavaAudioDeviceModule_AudioSamples> typedResult = resultBatch.map((result) => org_webrtc_audio_JavaAudioDeviceModule_AudioSamples()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<int> getAudioFormat() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.audio.JavaAudioDeviceModule.AudioSamples@$refId::getAudioFormat([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.audio.JavaAudioDeviceModule.AudioSamples::getAudioFormat', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<int> getChannelCount() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.audio.JavaAudioDeviceModule.AudioSamples@$refId::getChannelCount([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.audio.JavaAudioDeviceModule.AudioSamples::getChannelCount', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<int> getSampleRate() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.audio.JavaAudioDeviceModule.AudioSamples@$refId::getSampleRate([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.audio.JavaAudioDeviceModule.AudioSamples::getSampleRate', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<Uint8List> getData() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.audio.JavaAudioDeviceModule.AudioSamples@$refId::getData([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.audio.JavaAudioDeviceModule.AudioSamples::getData', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__ as Uint8List;
    
      return __return__;
    }
  }
  
  //endregion
}

extension org_webrtc_audio_JavaAudioDeviceModule_AudioSamples_Batch on List<org_webrtc_audio_JavaAudioDeviceModule_AudioSamples> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<int>> getAudioFormat_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.audio.JavaAudioDeviceModule.AudioSamples::getAudioFormat_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<int>> getChannelCount_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.audio.JavaAudioDeviceModule.AudioSamples::getChannelCount_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<int>> getSampleRate_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.audio.JavaAudioDeviceModule.AudioSamples::getSampleRate_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<Uint8List>> getData_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.audio.JavaAudioDeviceModule.AudioSamples::getData_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<Uint8List>().map((__result__) => __result__ as Uint8List).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}