// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class _org_webrtc_CameraVideoCapturer_SUB extends java_lang_Object with org_webrtc_VideoCapturer, org_webrtc_CameraVideoCapturer {}

mixin org_webrtc_CameraVideoCapturer on org_webrtc_VideoCapturer {
  

  static org_webrtc_CameraVideoCapturer subInstance() => _org_webrtc_CameraVideoCapturer_SUB();

  

  

  
  Future<void> switchCamera(org_webrtc_CameraVideoCapturer_CameraSwitchHandler var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.CameraVideoCapturer@$refId::switchCamera([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraVideoCapturer::switchCamera', {"refId": refId});
  
  
    // handle native call
    MethodChannel('org.webrtc.CameraVideoCapturer::switchCamera::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::org.webrtc.CameraVideoCapturer.CameraSwitchHandler::onCameraSwitchDone':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onCameraSwitchDone([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              var1?.onCameraSwitchDone(args['var1']);
              break;
            case 'Callback::org.webrtc.CameraVideoCapturer.CameraSwitchHandler::onCameraSwitchError':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onCameraSwitchError([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              var1?.onCameraSwitchError(args['var1']);
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> removeMediaRecorderFromCamera(org_webrtc_CameraVideoCapturer_MediaRecorderHandler resultHandler) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.CameraVideoCapturer@$refId::removeMediaRecorderFromCamera([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraVideoCapturer::removeMediaRecorderFromCamera', {"refId": refId});
  
  
    // handle native call
    MethodChannel('org.webrtc.CameraVideoCapturer::removeMediaRecorderFromCamera::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::org.webrtc.CameraVideoCapturer.MediaRecorderHandler::onMediaRecorderSuccess':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onMediaRecorderSuccess([])');
              }
        
              // handle the native call
              resultHandler?.onMediaRecorderSuccess();
              break;
            case 'Callback::org.webrtc.CameraVideoCapturer.MediaRecorderHandler::onMediaRecorderError':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onMediaRecorderError([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              resultHandler?.onMediaRecorderError(args['var1']);
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
}

extension org_webrtc_CameraVideoCapturer_Batch on List<org_webrtc_CameraVideoCapturer> {
  //region methods
  
  //endregion
}