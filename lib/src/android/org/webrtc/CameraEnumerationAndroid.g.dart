// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_CameraEnumerationAndroid extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.CameraEnumerationAndroid';

  
  //endregion

  //region creators
  static Future<org_webrtc_CameraEnumerationAndroid> create__() async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_CameraEnumerationAndroid__');
    final object = org_webrtc_CameraEnumerationAndroid()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_CameraEnumerationAndroid>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_CameraEnumerationAndroid__', {'length': length});
  
    final List<org_webrtc_CameraEnumerationAndroid> typedResult = resultBatch.map((result) => org_webrtc_CameraEnumerationAndroid()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange> getClosestSupportedFramerateRange(List<org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange> supportedFramerates, int requestedFps) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.CameraEnumerationAndroid::getClosestSupportedFramerateRange([\'requestedFps\':$requestedFps])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerationAndroid::getClosestSupportedFramerateRange', {"supportedFramerates": supportedFramerates.map((__it__) => __it__?.refId).toList(), "requestedFps": requestedFps});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  static Future<org_webrtc_Size> getClosestSupportedSize(List<org_webrtc_Size> supportedSizes, int requestedWidth, int requestedHeight) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.CameraEnumerationAndroid::getClosestSupportedSize([\'requestedWidth\':$requestedWidth, \'requestedHeight\':$requestedHeight])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerationAndroid::getClosestSupportedSize', {"supportedSizes": supportedSizes.map((__it__) => __it__?.refId).toList(), "requestedWidth": requestedWidth, "requestedHeight": requestedHeight});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = org_webrtc_Size()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  //endregion
}

extension org_webrtc_CameraEnumerationAndroid_Batch on List<org_webrtc_CameraEnumerationAndroid> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange>> getClosestSupportedFramerateRange_batch(List<List<org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange>> supportedFramerates, List<int> requestedFps) async {
    if (supportedFramerates.length != requestedFps.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerationAndroid::getClosestSupportedFramerateRange_batch', [for (int __i__ = 0; __i__ < supportedFramerates.length; __i__++) {"supportedFramerates": supportedFramerates[__i__].map((it) => it.refId).toList(), "requestedFps": requestedFps[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_CameraEnumerationAndroid_CaptureFormat_FramerateRange()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  static Future<List<org_webrtc_Size>> getClosestSupportedSize_batch(List<List<org_webrtc_Size>> supportedSizes, List<int> requestedWidth, List<int> requestedHeight) async {
    if (supportedSizes.length != requestedWidth.length || requestedWidth.length != requestedHeight.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.CameraEnumerationAndroid::getClosestSupportedSize_batch', [for (int __i__ = 0; __i__ < supportedSizes.length; __i__++) {"supportedSizes": supportedSizes[__i__].map((it) => it.refId).toList(), "requestedWidth": requestedWidth[__i__], "requestedHeight": requestedHeight[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_Size()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  //endregion
}