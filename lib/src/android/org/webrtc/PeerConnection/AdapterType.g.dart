// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

enum org_webrtc_PeerConnection_AdapterType {
  UNKNOWN /* null */,
  ETHERNET /* null */,
  WIFI /* null */,
  CELLULAR /* null */,
  VPN /* null */,
  LOOPBACK /* null */
}

extension org_webrtc_PeerConnection_AdapterTypeToX on org_webrtc_PeerConnection_AdapterType {
  int toValue() {
    switch (this) {
      case org_webrtc_PeerConnection_AdapterType.UNKNOWN: return org_webrtc_PeerConnection_AdapterType.UNKNOWN.index + 0;
      case org_webrtc_PeerConnection_AdapterType.ETHERNET: return org_webrtc_PeerConnection_AdapterType.ETHERNET.index + 0;
      case org_webrtc_PeerConnection_AdapterType.WIFI: return org_webrtc_PeerConnection_AdapterType.WIFI.index + 0;
      case org_webrtc_PeerConnection_AdapterType.CELLULAR: return org_webrtc_PeerConnection_AdapterType.CELLULAR.index + 0;
      case org_webrtc_PeerConnection_AdapterType.VPN: return org_webrtc_PeerConnection_AdapterType.VPN.index + 0;
      case org_webrtc_PeerConnection_AdapterType.LOOPBACK: return org_webrtc_PeerConnection_AdapterType.LOOPBACK.index + 0;
    }
  }
}

extension org_webrtc_PeerConnection_AdapterTypeFromX on int {
  org_webrtc_PeerConnection_AdapterType toorg_webrtc_PeerConnection_AdapterType() {
    switch (this) {
      
      default: return org_webrtc_PeerConnection_AdapterType.values[this + 0];
    }
  }
}