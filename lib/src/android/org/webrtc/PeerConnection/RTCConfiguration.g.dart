// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_PeerConnection_RTCConfiguration extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.PeerConnection.RTCConfiguration';

  
  //endregion

  //region creators
  static Future<org_webrtc_PeerConnection_RTCConfiguration> create__List_java_util_List_org_webrtc_PeerConnection_IceServer__(List<org_webrtc_PeerConnection_IceServer> iceServers) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_PeerConnection_RTCConfiguration__java_util_List_org_webrtc_PeerConnection_IceServer_', {"iceServers": iceServers.map((it) => it.refId).toList()});
    final object = org_webrtc_PeerConnection_RTCConfiguration()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_PeerConnection_RTCConfiguration>> create_batch__List_java_util_List_org_webrtc_PeerConnection_IceServer__(List<List<org_webrtc_PeerConnection_IceServer>> iceServers) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_PeerConnection_RTCConfiguration__java_util_List_org_webrtc_PeerConnection_IceServer_', [for (int __i__ = 0; __i__ < iceServers.length; __i__++) {"iceServers": iceServers[__i__].map((it) => it.refId).toList()}]);
  
    final List<org_webrtc_PeerConnection_RTCConfiguration> typedResult = resultBatch.map((result) => org_webrtc_PeerConnection_RTCConfiguration()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<org_webrtc_PeerConnection_IceTransportsType> get_iceTransportsType() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceTransportsType", {'refId': refId});
  
    return (__result__ as int).toorg_webrtc_PeerConnection_IceTransportsType();
  }
  
  Future<List<org_webrtc_PeerConnection_IceServer>> get_iceServers() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceServers", {'refId': refId});
    kNativeObjectPool.addAll((__result__ as List).cast<int>().map((__it__) => org_webrtc_PeerConnection_IceServer()..refId = __it__..tag__ = 'owt_fluttify').toList());
    return (__result__ as List).cast<int>().map((__it__) => org_webrtc_PeerConnection_IceServer()..refId = __it__..tag__ = 'owt_fluttify').toList();
  }
  
  Future<org_webrtc_PeerConnection_BundlePolicy> get_bundlePolicy() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_bundlePolicy", {'refId': refId});
  
    return (__result__ as int).toorg_webrtc_PeerConnection_BundlePolicy();
  }
  
  Future<org_webrtc_PeerConnection_RtcpMuxPolicy> get_rtcpMuxPolicy() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_rtcpMuxPolicy", {'refId': refId});
  
    return (__result__ as int).toorg_webrtc_PeerConnection_RtcpMuxPolicy();
  }
  
  Future<org_webrtc_PeerConnection_TcpCandidatePolicy> get_tcpCandidatePolicy() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_tcpCandidatePolicy", {'refId': refId});
  
    return (__result__ as int).toorg_webrtc_PeerConnection_TcpCandidatePolicy();
  }
  
  Future<org_webrtc_PeerConnection_CandidateNetworkPolicy> get_candidateNetworkPolicy() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_candidateNetworkPolicy", {'refId': refId});
  
    return (__result__ as int).toorg_webrtc_PeerConnection_CandidateNetworkPolicy();
  }
  
  Future<int> get_audioJitterBufferMaxPackets() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_audioJitterBufferMaxPackets", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_audioJitterBufferFastAccelerate() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_audioJitterBufferFastAccelerate", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_iceConnectionReceivingTimeout() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceConnectionReceivingTimeout", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_iceBackupCandidatePairPingInterval() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceBackupCandidatePairPingInterval", {'refId': refId});
  
    return __result__;
  }
  
  Future<org_webrtc_PeerConnection_KeyType> get_keyType() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_keyType", {'refId': refId});
  
    return (__result__ as int).toorg_webrtc_PeerConnection_KeyType();
  }
  
  Future<org_webrtc_PeerConnection_ContinualGatheringPolicy> get_continualGatheringPolicy() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_continualGatheringPolicy", {'refId': refId});
  
    return (__result__ as int).toorg_webrtc_PeerConnection_ContinualGatheringPolicy();
  }
  
  Future<int> get_iceCandidatePoolSize() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceCandidatePoolSize", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_pruneTurnPorts() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_pruneTurnPorts", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_presumeWritableWhenFullyRelayed() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_presumeWritableWhenFullyRelayed", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_iceCheckIntervalStrongConnectivityMs() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceCheckIntervalStrongConnectivityMs", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_iceCheckIntervalWeakConnectivityMs() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceCheckIntervalWeakConnectivityMs", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_iceCheckMinInterval() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceCheckMinInterval", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_iceUnwritableTimeMs() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceUnwritableTimeMs", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_iceUnwritableMinChecks() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceUnwritableMinChecks", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_stunCandidateKeepaliveIntervalMs() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_stunCandidateKeepaliveIntervalMs", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_disableIPv6OnWifi() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_disableIPv6OnWifi", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_maxIPv6Networks() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_maxIPv6Networks", {'refId': refId});
  
    return __result__;
  }
  
  Future<org_webrtc_PeerConnection_IntervalRange> get_iceRegatherIntervalRange() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceRegatherIntervalRange", {'refId': refId});
    kNativeObjectPool.add(org_webrtc_PeerConnection_IntervalRange()..refId = __result__..tag__ = 'owt_fluttify');
    return org_webrtc_PeerConnection_IntervalRange()..refId = __result__..tag__ = 'owt_fluttify';
  }
  
  Future<bool> get_disableIpv6() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_disableIpv6", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_enableDscp() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_enableDscp", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_enableCpuOveruseDetection() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_enableCpuOveruseDetection", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_enableRtpDataChannel() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_enableRtpDataChannel", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_suspendBelowMinBitrate() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_suspendBelowMinBitrate", {'refId': refId});
  
    return __result__;
  }
  
  Future<int> get_screencastMinBitrate() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_screencastMinBitrate", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_combinedAudioVideoBwe() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_combinedAudioVideoBwe", {'refId': refId});
  
    return __result__;
  }
  
  Future<bool> get_enableDtlsSrtp() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_enableDtlsSrtp", {'refId': refId});
  
    return __result__;
  }
  
  Future<org_webrtc_PeerConnection_AdapterType> get_networkPreference() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_networkPreference", {'refId': refId});
  
    return (__result__ as int).toorg_webrtc_PeerConnection_AdapterType();
  }
  
  Future<org_webrtc_PeerConnection_SdpSemantics> get_sdpSemantics() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_sdpSemantics", {'refId': refId});
  
    return (__result__ as int).toorg_webrtc_PeerConnection_SdpSemantics();
  }
  
  Future<org_webrtc_TurnCustomizer> get_turnCustomizer() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_turnCustomizer", {'refId': refId});
    kNativeObjectPool.add(org_webrtc_TurnCustomizer()..refId = __result__..tag__ = 'owt_fluttify');
    return org_webrtc_TurnCustomizer()..refId = __result__..tag__ = 'owt_fluttify';
  }
  
  Future<bool> get_activeResetSrtpParams() async {
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_activeResetSrtpParams", {'refId': refId});
  
    return __result__;
  }
  
  //endregion

  //region setters
  Future<void> set_iceTransportsType(org_webrtc_PeerConnection_IceTransportsType iceTransportsType) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceTransportsType', {'refId': refId, "iceTransportsType": iceTransportsType.toValue()});
  
  
  }
  
  Future<void> set_iceServers(List<org_webrtc_PeerConnection_IceServer> iceServers) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceServers', {'refId': refId, "iceServers": iceServers.map((it) => it.refId).toList()});
  
  
  }
  
  Future<void> set_bundlePolicy(org_webrtc_PeerConnection_BundlePolicy bundlePolicy) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_bundlePolicy', {'refId': refId, "bundlePolicy": bundlePolicy.toValue()});
  
  
  }
  
  Future<void> set_rtcpMuxPolicy(org_webrtc_PeerConnection_RtcpMuxPolicy rtcpMuxPolicy) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_rtcpMuxPolicy', {'refId': refId, "rtcpMuxPolicy": rtcpMuxPolicy.toValue()});
  
  
  }
  
  Future<void> set_tcpCandidatePolicy(org_webrtc_PeerConnection_TcpCandidatePolicy tcpCandidatePolicy) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_tcpCandidatePolicy', {'refId': refId, "tcpCandidatePolicy": tcpCandidatePolicy.toValue()});
  
  
  }
  
  Future<void> set_candidateNetworkPolicy(org_webrtc_PeerConnection_CandidateNetworkPolicy candidateNetworkPolicy) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_candidateNetworkPolicy', {'refId': refId, "candidateNetworkPolicy": candidateNetworkPolicy.toValue()});
  
  
  }
  
  Future<void> set_audioJitterBufferMaxPackets(int audioJitterBufferMaxPackets) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_audioJitterBufferMaxPackets', {'refId': refId, "audioJitterBufferMaxPackets": audioJitterBufferMaxPackets});
  
  
  }
  
  Future<void> set_audioJitterBufferFastAccelerate(bool audioJitterBufferFastAccelerate) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_audioJitterBufferFastAccelerate', {'refId': refId, "audioJitterBufferFastAccelerate": audioJitterBufferFastAccelerate});
  
  
  }
  
  Future<void> set_iceConnectionReceivingTimeout(int iceConnectionReceivingTimeout) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceConnectionReceivingTimeout', {'refId': refId, "iceConnectionReceivingTimeout": iceConnectionReceivingTimeout});
  
  
  }
  
  Future<void> set_iceBackupCandidatePairPingInterval(int iceBackupCandidatePairPingInterval) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceBackupCandidatePairPingInterval', {'refId': refId, "iceBackupCandidatePairPingInterval": iceBackupCandidatePairPingInterval});
  
  
  }
  
  Future<void> set_keyType(org_webrtc_PeerConnection_KeyType keyType) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_keyType', {'refId': refId, "keyType": keyType.toValue()});
  
  
  }
  
  Future<void> set_continualGatheringPolicy(org_webrtc_PeerConnection_ContinualGatheringPolicy continualGatheringPolicy) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_continualGatheringPolicy', {'refId': refId, "continualGatheringPolicy": continualGatheringPolicy.toValue()});
  
  
  }
  
  Future<void> set_iceCandidatePoolSize(int iceCandidatePoolSize) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceCandidatePoolSize', {'refId': refId, "iceCandidatePoolSize": iceCandidatePoolSize});
  
  
  }
  
  Future<void> set_pruneTurnPorts(bool pruneTurnPorts) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_pruneTurnPorts', {'refId': refId, "pruneTurnPorts": pruneTurnPorts});
  
  
  }
  
  Future<void> set_presumeWritableWhenFullyRelayed(bool presumeWritableWhenFullyRelayed) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_presumeWritableWhenFullyRelayed', {'refId': refId, "presumeWritableWhenFullyRelayed": presumeWritableWhenFullyRelayed});
  
  
  }
  
  Future<void> set_iceCheckIntervalStrongConnectivityMs(int iceCheckIntervalStrongConnectivityMs) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceCheckIntervalStrongConnectivityMs', {'refId': refId, "iceCheckIntervalStrongConnectivityMs": iceCheckIntervalStrongConnectivityMs});
  
  
  }
  
  Future<void> set_iceCheckIntervalWeakConnectivityMs(int iceCheckIntervalWeakConnectivityMs) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceCheckIntervalWeakConnectivityMs', {'refId': refId, "iceCheckIntervalWeakConnectivityMs": iceCheckIntervalWeakConnectivityMs});
  
  
  }
  
  Future<void> set_iceCheckMinInterval(int iceCheckMinInterval) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceCheckMinInterval', {'refId': refId, "iceCheckMinInterval": iceCheckMinInterval});
  
  
  }
  
  Future<void> set_iceUnwritableTimeMs(int iceUnwritableTimeMs) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceUnwritableTimeMs', {'refId': refId, "iceUnwritableTimeMs": iceUnwritableTimeMs});
  
  
  }
  
  Future<void> set_iceUnwritableMinChecks(int iceUnwritableMinChecks) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceUnwritableMinChecks', {'refId': refId, "iceUnwritableMinChecks": iceUnwritableMinChecks});
  
  
  }
  
  Future<void> set_stunCandidateKeepaliveIntervalMs(int stunCandidateKeepaliveIntervalMs) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_stunCandidateKeepaliveIntervalMs', {'refId': refId, "stunCandidateKeepaliveIntervalMs": stunCandidateKeepaliveIntervalMs});
  
  
  }
  
  Future<void> set_disableIPv6OnWifi(bool disableIPv6OnWifi) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_disableIPv6OnWifi', {'refId': refId, "disableIPv6OnWifi": disableIPv6OnWifi});
  
  
  }
  
  Future<void> set_maxIPv6Networks(int maxIPv6Networks) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_maxIPv6Networks', {'refId': refId, "maxIPv6Networks": maxIPv6Networks});
  
  
  }
  
  Future<void> set_iceRegatherIntervalRange(org_webrtc_PeerConnection_IntervalRange iceRegatherIntervalRange) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceRegatherIntervalRange', {'refId': refId, "iceRegatherIntervalRange": iceRegatherIntervalRange.refId});
  
  
  }
  
  Future<void> set_disableIpv6(bool disableIpv6) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_disableIpv6', {'refId': refId, "disableIpv6": disableIpv6});
  
  
  }
  
  Future<void> set_enableDscp(bool enableDscp) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_enableDscp', {'refId': refId, "enableDscp": enableDscp});
  
  
  }
  
  Future<void> set_enableCpuOveruseDetection(bool enableCpuOveruseDetection) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_enableCpuOveruseDetection', {'refId': refId, "enableCpuOveruseDetection": enableCpuOveruseDetection});
  
  
  }
  
  Future<void> set_enableRtpDataChannel(bool enableRtpDataChannel) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_enableRtpDataChannel', {'refId': refId, "enableRtpDataChannel": enableRtpDataChannel});
  
  
  }
  
  Future<void> set_suspendBelowMinBitrate(bool suspendBelowMinBitrate) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_suspendBelowMinBitrate', {'refId': refId, "suspendBelowMinBitrate": suspendBelowMinBitrate});
  
  
  }
  
  Future<void> set_screencastMinBitrate(int screencastMinBitrate) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_screencastMinBitrate', {'refId': refId, "screencastMinBitrate": screencastMinBitrate});
  
  
  }
  
  Future<void> set_combinedAudioVideoBwe(bool combinedAudioVideoBwe) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_combinedAudioVideoBwe', {'refId': refId, "combinedAudioVideoBwe": combinedAudioVideoBwe});
  
  
  }
  
  Future<void> set_enableDtlsSrtp(bool enableDtlsSrtp) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_enableDtlsSrtp', {'refId': refId, "enableDtlsSrtp": enableDtlsSrtp});
  
  
  }
  
  Future<void> set_networkPreference(org_webrtc_PeerConnection_AdapterType networkPreference) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_networkPreference', {'refId': refId, "networkPreference": networkPreference.toValue()});
  
  
  }
  
  Future<void> set_sdpSemantics(org_webrtc_PeerConnection_SdpSemantics sdpSemantics) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_sdpSemantics', {'refId': refId, "sdpSemantics": sdpSemantics.toValue()});
  
  
  }
  
  Future<void> set_turnCustomizer(org_webrtc_TurnCustomizer turnCustomizer) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_turnCustomizer', {'refId': refId, "turnCustomizer": turnCustomizer.refId});
  
  
  }
  
  Future<void> set_activeResetSrtpParams(bool activeResetSrtpParams) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_activeResetSrtpParams', {'refId': refId, "activeResetSrtpParams": activeResetSrtpParams});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension org_webrtc_PeerConnection_RTCConfiguration_Batch on List<org_webrtc_PeerConnection_RTCConfiguration> {
  //region getters
  Future<List<org_webrtc_PeerConnection_IceTransportsType>> get_iceTransportsType_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceTransportsType_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toorg_webrtc_PeerConnection_IceTransportsType()).toList();
  
    return typedResult;
  }
  
  Future<List<List<org_webrtc_PeerConnection_IceServer>>> get_iceServers_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceServers_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as List).cast<int>().map((__it__) => org_webrtc_PeerConnection_IceServer()..refId = __it__..tag__ = 'owt_fluttify').toList()).toList();
    kNativeObjectPool.addAll(typedResult.expand((e) => e));
    return typedResult;
  }
  
  Future<List<org_webrtc_PeerConnection_BundlePolicy>> get_bundlePolicy_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_bundlePolicy_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toorg_webrtc_PeerConnection_BundlePolicy()).toList();
  
    return typedResult;
  }
  
  Future<List<org_webrtc_PeerConnection_RtcpMuxPolicy>> get_rtcpMuxPolicy_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_rtcpMuxPolicy_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toorg_webrtc_PeerConnection_RtcpMuxPolicy()).toList();
  
    return typedResult;
  }
  
  Future<List<org_webrtc_PeerConnection_TcpCandidatePolicy>> get_tcpCandidatePolicy_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_tcpCandidatePolicy_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toorg_webrtc_PeerConnection_TcpCandidatePolicy()).toList();
  
    return typedResult;
  }
  
  Future<List<org_webrtc_PeerConnection_CandidateNetworkPolicy>> get_candidateNetworkPolicy_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_candidateNetworkPolicy_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toorg_webrtc_PeerConnection_CandidateNetworkPolicy()).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_audioJitterBufferMaxPackets_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_audioJitterBufferMaxPackets_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_audioJitterBufferFastAccelerate_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_audioJitterBufferFastAccelerate_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_iceConnectionReceivingTimeout_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceConnectionReceivingTimeout_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_iceBackupCandidatePairPingInterval_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceBackupCandidatePairPingInterval_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<org_webrtc_PeerConnection_KeyType>> get_keyType_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_keyType_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toorg_webrtc_PeerConnection_KeyType()).toList();
  
    return typedResult;
  }
  
  Future<List<org_webrtc_PeerConnection_ContinualGatheringPolicy>> get_continualGatheringPolicy_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_continualGatheringPolicy_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toorg_webrtc_PeerConnection_ContinualGatheringPolicy()).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_iceCandidatePoolSize_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceCandidatePoolSize_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_pruneTurnPorts_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_pruneTurnPorts_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_presumeWritableWhenFullyRelayed_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_presumeWritableWhenFullyRelayed_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_iceCheckIntervalStrongConnectivityMs_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceCheckIntervalStrongConnectivityMs_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_iceCheckIntervalWeakConnectivityMs_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceCheckIntervalWeakConnectivityMs_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_iceCheckMinInterval_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceCheckMinInterval_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_iceUnwritableTimeMs_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceUnwritableTimeMs_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_iceUnwritableMinChecks_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceUnwritableMinChecks_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_stunCandidateKeepaliveIntervalMs_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_stunCandidateKeepaliveIntervalMs_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_disableIPv6OnWifi_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_disableIPv6OnWifi_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_maxIPv6Networks_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_maxIPv6Networks_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<org_webrtc_PeerConnection_IntervalRange>> get_iceRegatherIntervalRange_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_iceRegatherIntervalRange_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_PeerConnection_IntervalRange()..refId = __result__..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<bool>> get_disableIpv6_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_disableIpv6_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_enableDscp_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_enableDscp_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_enableCpuOveruseDetection_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_enableCpuOveruseDetection_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_enableRtpDataChannel_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_enableRtpDataChannel_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_suspendBelowMinBitrate_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_suspendBelowMinBitrate_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<int>> get_screencastMinBitrate_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_screencastMinBitrate_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_combinedAudioVideoBwe_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_combinedAudioVideoBwe_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<bool>> get_enableDtlsSrtp_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_enableDtlsSrtp_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  Future<List<org_webrtc_PeerConnection_AdapterType>> get_networkPreference_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_networkPreference_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toorg_webrtc_PeerConnection_AdapterType()).toList();
  
    return typedResult;
  }
  
  Future<List<org_webrtc_PeerConnection_SdpSemantics>> get_sdpSemantics_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_sdpSemantics_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as int).toorg_webrtc_PeerConnection_SdpSemantics()).toList();
  
    return typedResult;
  }
  
  Future<List<org_webrtc_TurnCustomizer>> get_turnCustomizer_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_turnCustomizer_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => org_webrtc_TurnCustomizer()..refId = __result__..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  Future<List<bool>> get_activeResetSrtpParams_batch() async {
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod("org.webrtc.PeerConnection.RTCConfiguration::get_activeResetSrtpParams_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_iceTransportsType_batch(List<org_webrtc_PeerConnection_IceTransportsType> iceTransportsType) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceTransportsType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "iceTransportsType": iceTransportsType[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_iceServers_batch(List<List<org_webrtc_PeerConnection_IceServer>> iceServers) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceServers_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "iceServers": iceServers[__i__].map((it) => it.refId).toList()}]);
  
  
  }
  
  Future<void> set_bundlePolicy_batch(List<org_webrtc_PeerConnection_BundlePolicy> bundlePolicy) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_bundlePolicy_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "bundlePolicy": bundlePolicy[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_rtcpMuxPolicy_batch(List<org_webrtc_PeerConnection_RtcpMuxPolicy> rtcpMuxPolicy) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_rtcpMuxPolicy_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "rtcpMuxPolicy": rtcpMuxPolicy[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_tcpCandidatePolicy_batch(List<org_webrtc_PeerConnection_TcpCandidatePolicy> tcpCandidatePolicy) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_tcpCandidatePolicy_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "tcpCandidatePolicy": tcpCandidatePolicy[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_candidateNetworkPolicy_batch(List<org_webrtc_PeerConnection_CandidateNetworkPolicy> candidateNetworkPolicy) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_candidateNetworkPolicy_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "candidateNetworkPolicy": candidateNetworkPolicy[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_audioJitterBufferMaxPackets_batch(List<int> audioJitterBufferMaxPackets) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_audioJitterBufferMaxPackets_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "audioJitterBufferMaxPackets": audioJitterBufferMaxPackets[__i__]}]);
  
  
  }
  
  Future<void> set_audioJitterBufferFastAccelerate_batch(List<bool> audioJitterBufferFastAccelerate) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_audioJitterBufferFastAccelerate_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "audioJitterBufferFastAccelerate": audioJitterBufferFastAccelerate[__i__]}]);
  
  
  }
  
  Future<void> set_iceConnectionReceivingTimeout_batch(List<int> iceConnectionReceivingTimeout) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceConnectionReceivingTimeout_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "iceConnectionReceivingTimeout": iceConnectionReceivingTimeout[__i__]}]);
  
  
  }
  
  Future<void> set_iceBackupCandidatePairPingInterval_batch(List<int> iceBackupCandidatePairPingInterval) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceBackupCandidatePairPingInterval_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "iceBackupCandidatePairPingInterval": iceBackupCandidatePairPingInterval[__i__]}]);
  
  
  }
  
  Future<void> set_keyType_batch(List<org_webrtc_PeerConnection_KeyType> keyType) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_keyType_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "keyType": keyType[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_continualGatheringPolicy_batch(List<org_webrtc_PeerConnection_ContinualGatheringPolicy> continualGatheringPolicy) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_continualGatheringPolicy_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "continualGatheringPolicy": continualGatheringPolicy[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_iceCandidatePoolSize_batch(List<int> iceCandidatePoolSize) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceCandidatePoolSize_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "iceCandidatePoolSize": iceCandidatePoolSize[__i__]}]);
  
  
  }
  
  Future<void> set_pruneTurnPorts_batch(List<bool> pruneTurnPorts) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_pruneTurnPorts_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "pruneTurnPorts": pruneTurnPorts[__i__]}]);
  
  
  }
  
  Future<void> set_presumeWritableWhenFullyRelayed_batch(List<bool> presumeWritableWhenFullyRelayed) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_presumeWritableWhenFullyRelayed_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "presumeWritableWhenFullyRelayed": presumeWritableWhenFullyRelayed[__i__]}]);
  
  
  }
  
  Future<void> set_iceCheckIntervalStrongConnectivityMs_batch(List<int> iceCheckIntervalStrongConnectivityMs) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceCheckIntervalStrongConnectivityMs_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "iceCheckIntervalStrongConnectivityMs": iceCheckIntervalStrongConnectivityMs[__i__]}]);
  
  
  }
  
  Future<void> set_iceCheckIntervalWeakConnectivityMs_batch(List<int> iceCheckIntervalWeakConnectivityMs) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceCheckIntervalWeakConnectivityMs_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "iceCheckIntervalWeakConnectivityMs": iceCheckIntervalWeakConnectivityMs[__i__]}]);
  
  
  }
  
  Future<void> set_iceCheckMinInterval_batch(List<int> iceCheckMinInterval) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceCheckMinInterval_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "iceCheckMinInterval": iceCheckMinInterval[__i__]}]);
  
  
  }
  
  Future<void> set_iceUnwritableTimeMs_batch(List<int> iceUnwritableTimeMs) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceUnwritableTimeMs_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "iceUnwritableTimeMs": iceUnwritableTimeMs[__i__]}]);
  
  
  }
  
  Future<void> set_iceUnwritableMinChecks_batch(List<int> iceUnwritableMinChecks) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceUnwritableMinChecks_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "iceUnwritableMinChecks": iceUnwritableMinChecks[__i__]}]);
  
  
  }
  
  Future<void> set_stunCandidateKeepaliveIntervalMs_batch(List<int> stunCandidateKeepaliveIntervalMs) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_stunCandidateKeepaliveIntervalMs_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "stunCandidateKeepaliveIntervalMs": stunCandidateKeepaliveIntervalMs[__i__]}]);
  
  
  }
  
  Future<void> set_disableIPv6OnWifi_batch(List<bool> disableIPv6OnWifi) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_disableIPv6OnWifi_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "disableIPv6OnWifi": disableIPv6OnWifi[__i__]}]);
  
  
  }
  
  Future<void> set_maxIPv6Networks_batch(List<int> maxIPv6Networks) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_maxIPv6Networks_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "maxIPv6Networks": maxIPv6Networks[__i__]}]);
  
  
  }
  
  Future<void> set_iceRegatherIntervalRange_batch(List<org_webrtc_PeerConnection_IntervalRange> iceRegatherIntervalRange) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_iceRegatherIntervalRange_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "iceRegatherIntervalRange": iceRegatherIntervalRange[__i__].refId}]);
  
  
  }
  
  Future<void> set_disableIpv6_batch(List<bool> disableIpv6) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_disableIpv6_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "disableIpv6": disableIpv6[__i__]}]);
  
  
  }
  
  Future<void> set_enableDscp_batch(List<bool> enableDscp) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_enableDscp_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "enableDscp": enableDscp[__i__]}]);
  
  
  }
  
  Future<void> set_enableCpuOveruseDetection_batch(List<bool> enableCpuOveruseDetection) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_enableCpuOveruseDetection_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "enableCpuOveruseDetection": enableCpuOveruseDetection[__i__]}]);
  
  
  }
  
  Future<void> set_enableRtpDataChannel_batch(List<bool> enableRtpDataChannel) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_enableRtpDataChannel_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "enableRtpDataChannel": enableRtpDataChannel[__i__]}]);
  
  
  }
  
  Future<void> set_suspendBelowMinBitrate_batch(List<bool> suspendBelowMinBitrate) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_suspendBelowMinBitrate_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "suspendBelowMinBitrate": suspendBelowMinBitrate[__i__]}]);
  
  
  }
  
  Future<void> set_screencastMinBitrate_batch(List<int> screencastMinBitrate) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_screencastMinBitrate_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "screencastMinBitrate": screencastMinBitrate[__i__]}]);
  
  
  }
  
  Future<void> set_combinedAudioVideoBwe_batch(List<bool> combinedAudioVideoBwe) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_combinedAudioVideoBwe_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "combinedAudioVideoBwe": combinedAudioVideoBwe[__i__]}]);
  
  
  }
  
  Future<void> set_enableDtlsSrtp_batch(List<bool> enableDtlsSrtp) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_enableDtlsSrtp_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "enableDtlsSrtp": enableDtlsSrtp[__i__]}]);
  
  
  }
  
  Future<void> set_networkPreference_batch(List<org_webrtc_PeerConnection_AdapterType> networkPreference) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_networkPreference_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "networkPreference": networkPreference[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_sdpSemantics_batch(List<org_webrtc_PeerConnection_SdpSemantics> sdpSemantics) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_sdpSemantics_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "sdpSemantics": sdpSemantics[__i__].toValue()}]);
  
  
  }
  
  Future<void> set_turnCustomizer_batch(List<org_webrtc_TurnCustomizer> turnCustomizer) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_turnCustomizer_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "turnCustomizer": turnCustomizer[__i__].refId}]);
  
  
  }
  
  Future<void> set_activeResetSrtpParams_batch(List<bool> activeResetSrtpParams) async {
    await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.PeerConnection.RTCConfiguration::set_activeResetSrtpParams_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "activeResetSrtpParams": activeResetSrtpParams[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}