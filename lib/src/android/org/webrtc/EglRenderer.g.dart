// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_EglRenderer extends java_lang_Object with org_webrtc_VideoSink {
  //region constants
  static const String name__ = 'org.webrtc.EglRenderer';

  
  //endregion

  //region creators
  static Future<org_webrtc_EglRenderer> create__String(String name) async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_EglRenderer__String', {"name": name});
    final object = org_webrtc_EglRenderer()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_EglRenderer>> create_batch__String(List<String> name) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_EglRenderer__String', [for (int __i__ = 0; __i__ < name.length; __i__++) {"name": name[__i__]}]);
  
    final List<org_webrtc_EglRenderer> typedResult = resultBatch.map((result) => org_webrtc_EglRenderer()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<void> init(org_webrtc_EglBase_Context sharedContext, Int32List configAttributes, org_webrtc_RendererCommon_GlDrawer drawer) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.EglRenderer@$refId::init([\'configAttributes\':$configAttributes])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::init', {"sharedContext": sharedContext is Ref ? (sharedContext as Ref)?.refId : sharedContext, "configAttributes": configAttributes, "drawer": drawer is Ref ? (drawer as Ref)?.refId : drawer, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> release() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.EglRenderer@$refId::release([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::release', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> printStackTrace() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.EglRenderer@$refId::printStackTrace([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::printStackTrace', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> setMirror(bool mirror) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.EglRenderer@$refId::setMirror([\'mirror\':$mirror])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::setMirror', {"mirror": mirror, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> setLayoutAspectRatio(double layoutAspectRatio) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.EglRenderer@$refId::setLayoutAspectRatio([\'layoutAspectRatio\':$layoutAspectRatio])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::setLayoutAspectRatio', {"layoutAspectRatio": layoutAspectRatio, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> setFpsReduction(double fps) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.EglRenderer@$refId::setFpsReduction([\'fps\':$fps])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::setFpsReduction', {"fps": fps, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> disableFpsReduction() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.EglRenderer@$refId::disableFpsReduction([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::disableFpsReduction', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> pauseVideo() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.EglRenderer@$refId::pauseVideo([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::pauseVideo', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> addFrameListener__org_webrtc_EglRenderer_FrameListener__double(org_webrtc_EglRenderer_FrameListener listener, double scale) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.EglRenderer@$refId::addFrameListener([\'scale\':$scale])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double', {"scale": scale, "refId": refId});
  
  
    // handle native call
    MethodChannel('org.webrtc.EglRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::org.webrtc.EglRenderer.FrameListener::onFrame':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onFrame([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              listener?.onFrame(TypeOpOwtFluttifyAndroid((args['var1'] as Object))?.as__<android_graphics_Bitmap>());
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer(org_webrtc_EglRenderer_FrameListener listener, double scale, org_webrtc_RendererCommon_GlDrawer drawerParam) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.EglRenderer@$refId::addFrameListener([\'scale\':$scale])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer', {"scale": scale, "drawerParam": drawerParam is Ref ? (drawerParam as Ref)?.refId : drawerParam, "refId": refId});
  
  
    // handle native call
    MethodChannel('org.webrtc.EglRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::org.webrtc.EglRenderer.FrameListener::onFrame':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onFrame([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              listener?.onFrame(TypeOpOwtFluttifyAndroid((args['var1'] as Object))?.as__<android_graphics_Bitmap>());
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer__bool(org_webrtc_EglRenderer_FrameListener listener, double scale, org_webrtc_RendererCommon_GlDrawer drawerParam, bool applyFpsReduction) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.EglRenderer@$refId::addFrameListener([\'scale\':$scale, \'applyFpsReduction\':$applyFpsReduction])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer__bool', {"scale": scale, "drawerParam": drawerParam is Ref ? (drawerParam as Ref)?.refId : drawerParam, "applyFpsReduction": applyFpsReduction, "refId": refId});
  
  
    // handle native call
    MethodChannel('org.webrtc.EglRenderer::addFrameListener__org_webrtc_EglRenderer_FrameListener__double__org_webrtc_RendererCommon_GlDrawer__bool::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::org.webrtc.EglRenderer.FrameListener::onFrame':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onFrame([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              listener?.onFrame(TypeOpOwtFluttifyAndroid((args['var1'] as Object))?.as__<android_graphics_Bitmap>());
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> removeFrameListener(org_webrtc_EglRenderer_FrameListener listener) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.EglRenderer@$refId::removeFrameListener([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::removeFrameListener', {"refId": refId});
  
  
    // handle native call
    MethodChannel('org.webrtc.EglRenderer::removeFrameListener::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::org.webrtc.EglRenderer.FrameListener::onFrame':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onFrame([\'var1\':${args['var1']}])');
              }
        
              // handle the native call
              listener?.onFrame(TypeOpOwtFluttifyAndroid((args['var1'] as Object))?.as__<android_graphics_Bitmap>());
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> clearImage() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.EglRenderer@$refId::clearImage([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::clearImage', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<void> clearImage__double__double__double__double(double r, double g, double b, double a) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.EglRenderer@$refId::clearImage([\'r\':$r, \'g\':$g, \'b\':$b, \'a\':$a])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::clearImage__double__double__double__double', {"r": r, "g": g, "b": b, "a": a, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension org_webrtc_EglRenderer_Batch on List<org_webrtc_EglRenderer> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<void>> init_batch(List<org_webrtc_EglBase_Context> sharedContext, List<Int32List> configAttributes, List<org_webrtc_RendererCommon_GlDrawer> drawer) async {
    if (sharedContext.length != configAttributes.length || configAttributes.length != drawer.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::init_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"sharedContext": sharedContext[__i__].refId, "configAttributes": configAttributes[__i__], "drawer": drawer[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> release_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::release_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> printStackTrace_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::printStackTrace_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> setMirror_batch(List<bool> mirror) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::setMirror_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"mirror": mirror[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> setLayoutAspectRatio_batch(List<double> layoutAspectRatio) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::setLayoutAspectRatio_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"layoutAspectRatio": layoutAspectRatio[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> setFpsReduction_batch(List<double> fps) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::setFpsReduction_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"fps": fps[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> disableFpsReduction_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::disableFpsReduction_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> pauseVideo_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::pauseVideo_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> clearImage_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::clearImage_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<void>> clearImage__double__double__double__double_batch(List<double> r, List<double> g, List<double> b, List<double> a) async {
    if (r.length != g.length || g.length != b.length || b.length != a.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.EglRenderer::clearImage__double__double__double__double_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"r": r[__i__], "g": g[__i__], "b": b[__i__], "a": a[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}