// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:owt_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class org_webrtc_RendererCommon extends java_lang_Object  {
  //region constants
  static const String name__ = 'org.webrtc.RendererCommon';

  
  //endregion

  //region creators
  static Future<org_webrtc_RendererCommon> create__() async {
    final int refId = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::createorg_webrtc_RendererCommon__');
    final object = org_webrtc_RendererCommon()..refId = refId..tag__ = 'owt_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<org_webrtc_RendererCommon>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('ObjectFactory::create_batchorg_webrtc_RendererCommon__', {'length': length});
  
    final List<org_webrtc_RendererCommon> typedResult = resultBatch.map((result) => org_webrtc_RendererCommon()..refId = result..tag__ = 'owt_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<Float64List> getLayoutMatrix(bool mirror, double videoAspectRatio, double displayAspectRatio) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.RendererCommon::getLayoutMatrix([\'mirror\':$mirror, \'videoAspectRatio\':$videoAspectRatio, \'displayAspectRatio\':$displayAspectRatio])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.RendererCommon::getLayoutMatrix', {"mirror": mirror, "videoAspectRatio": videoAspectRatio, "displayAspectRatio": displayAspectRatio});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__ as Float64List;
    
      return __return__;
    }
  }
  
  
  static Future<android_graphics_Point> getDisplaySize__org_webrtc_RendererCommon_ScalingType__double__int__int(org_webrtc_RendererCommon_ScalingType scalingType, double videoAspectRatio, int maxDisplayWidth, int maxDisplayHeight) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: org.webrtc.RendererCommon::getDisplaySize([\'videoAspectRatio\':$videoAspectRatio, \'maxDisplayWidth\':$maxDisplayWidth, \'maxDisplayHeight\':$maxDisplayHeight])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.RendererCommon::getDisplaySize__org_webrtc_RendererCommon_ScalingType__double__int__int', {"scalingType": scalingType.toValue(), "videoAspectRatio": videoAspectRatio, "maxDisplayWidth": maxDisplayWidth, "maxDisplayHeight": maxDisplayHeight});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = android_graphics_Point()..refId = __result__..tag__ = 'owt_fluttify';
      if (__return__ is Ref) kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  //endregion
}

extension org_webrtc_RendererCommon_Batch on List<org_webrtc_RendererCommon> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<Float64List>> getLayoutMatrix_batch(List<bool> mirror, List<double> videoAspectRatio, List<double> displayAspectRatio) async {
    if (mirror.length != videoAspectRatio.length || videoAspectRatio.length != displayAspectRatio.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.RendererCommon::getLayoutMatrix_batch', [for (int __i__ = 0; __i__ < mirror.length; __i__++) {"mirror": mirror[__i__], "videoAspectRatio": videoAspectRatio[__i__], "displayAspectRatio": displayAspectRatio[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<Float64List>().map((__result__) => __result__ as Float64List).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<android_graphics_Point>> getDisplaySize__org_webrtc_RendererCommon_ScalingType__double__int__int_batch(List<org_webrtc_RendererCommon_ScalingType> scalingType, List<double> videoAspectRatio, List<int> maxDisplayWidth, List<int> maxDisplayHeight) async {
    if (scalingType.length != videoAspectRatio.length || videoAspectRatio.length != maxDisplayWidth.length || maxDisplayWidth.length != maxDisplayHeight.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/owt_fluttify').invokeMethod('org.webrtc.RendererCommon::getDisplaySize__org_webrtc_RendererCommon_ScalingType__double__int__int_batch', [for (int __i__ = 0; __i__ < scalingType.length; __i__++) {"scalingType": scalingType[__i__].toValue(), "videoAspectRatio": videoAspectRatio[__i__], "maxDisplayWidth": maxDisplayWidth[__i__], "maxDisplayHeight": maxDisplayHeight[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => android_graphics_Point()..refId = __result__..tag__ = 'owt_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  //endregion
}